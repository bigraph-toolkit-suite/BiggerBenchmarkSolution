// This file has been generated automatically by GrGen (www.grgen.net)
// Do not modify this file! Any changes will be lost!
// Generated from "./foo/ruleset.grg" on Wed May 28 21:07:08 CEST 2025

//#pragma warning disable CS0219, CS0162
#pragma warning disable 219, 162

using System;
using System.Collections.Generic;
using System.Collections;
using System.Text;
using System.Threading;
using System.Diagnostics;
using GRGEN_LIBGR = de.unika.ipd.grGen.libGr;
using GRGEN_LGSP = de.unika.ipd.grGen.lgsp;
using GRGEN_EXPR = de.unika.ipd.grGen.expression;
using GRGEN_MODEL = de.unika.ipd.grGen.Model_metamodel_graph;
using GRGEN_ACTIONS = de.unika.ipd.grGen.Action_ruleset;

namespace de.unika.ipd.grGen.Action_ruleset
{
	public class Pattern_nac_NodesWithoutSites : GRGEN_LGSP.LGSPMatchingPattern
	{
		private static Pattern_nac_NodesWithoutSites instance = null;
		public static Pattern_nac_NodesWithoutSites Instance { get { if(instance==null) { instance = new Pattern_nac_NodesWithoutSites(); instance.initialize(); } return instance; } }

		public static GRGEN_LIBGR.NodeType[] nac_NodesWithoutSites_node_src_AllowedTypes = null;
		public static bool[] nac_NodesWithoutSites_node_src_IsAllowedType = null;
		public enum nac_NodesWithoutSites_NodeNums { @src, };
		public enum nac_NodesWithoutSites_EdgeNums { };
		public enum nac_NodesWithoutSites_VariableNums { @validChildCount, };
		public enum nac_NodesWithoutSites_SubNums { };
		public enum nac_NodesWithoutSites_AltNums { };
		public enum nac_NodesWithoutSites_IterNums { };



		public GRGEN_LGSP.PatternGraph pat_nac_NodesWithoutSites;

		public enum nac_NodesWithoutSites_neg_0_NodeNums { @src, };
		public enum nac_NodesWithoutSites_neg_0_EdgeNums { };
		public enum nac_NodesWithoutSites_neg_0_VariableNums { @validChildCount, };
		public enum nac_NodesWithoutSites_neg_0_SubNums { };
		public enum nac_NodesWithoutSites_neg_0_AltNums { };
		public enum nac_NodesWithoutSites_neg_0_IterNums { };


		public GRGEN_LGSP.PatternGraph nac_NodesWithoutSites_neg_0;


		private Pattern_nac_NodesWithoutSites()
			: base("nac_NodesWithoutSites",
				new GRGEN_LIBGR.GrGenType[] { GRGEN_MODEL.NodeType_BNode.typeVar, GRGEN_LIBGR.VarType.GetVarType(typeof(int)), },
				new string[] { "nac_NodesWithoutSites_node_src", "nac_NodesWithoutSites_var_validChildCount", },
				new GRGEN_LIBGR.GrGenType[] { },
				new string[] { }
			)
		{
		}
		private void initialize()
		{
			bool[,] nac_NodesWithoutSites_isNodeHomomorphicGlobal = new bool[1, 1] {
				{ false, },
			};
			bool[,] nac_NodesWithoutSites_isEdgeHomomorphicGlobal = new bool[0, 0];
			bool[] nac_NodesWithoutSites_isNodeTotallyHomomorphic = new bool[1] { false,  };
			bool[] nac_NodesWithoutSites_isEdgeTotallyHomomorphic = new bool[0];
			GRGEN_LGSP.PatternVariable nac_NodesWithoutSites_var_validChildCount = new GRGEN_LGSP.PatternVariable(GRGEN_LIBGR.VarType.GetVarType(typeof(int)), "nac_NodesWithoutSites_var_validChildCount", "validChildCount", 1, false,  null);
			GRGEN_LGSP.PatternNode nac_NodesWithoutSites_node_src = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BNode, GRGEN_MODEL.NodeType_BNode.typeVar, "GRGEN_MODEL.IBNode", "nac_NodesWithoutSites_node_src", "src", nac_NodesWithoutSites_node_src_AllowedTypes, nac_NodesWithoutSites_node_src_IsAllowedType, 5.5F, 0, false, null, null, null, null, null, null, false, null);
			bool[,] nac_NodesWithoutSites_neg_0_isNodeHomomorphicGlobal = new bool[1, 1] {
				{ false, },
			};
			bool[,] nac_NodesWithoutSites_neg_0_isEdgeHomomorphicGlobal = new bool[0, 0];
			bool[] nac_NodesWithoutSites_neg_0_isNodeTotallyHomomorphic = new bool[1] { false,  };
			bool[] nac_NodesWithoutSites_neg_0_isEdgeTotallyHomomorphic = new bool[0];
			GRGEN_LGSP.PatternCondition nac_NodesWithoutSites_neg_0_cond_0 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.NE(new GRGEN_EXPR.SetSize(new GRGEN_EXPR.AdjacentIncoming(new GRGEN_EXPR.GraphEntityExpression("nac_NodesWithoutSites_node_src"), new GRGEN_EXPR.Constant("GRGEN_MODEL.EdgeType_bPrnt.typeVar"), new GRGEN_EXPR.Constant("GRGEN_MODEL.NodeType_Node.typeVar"))), new GRGEN_EXPR.VariableExpression("nac_NodesWithoutSites_var_validChildCount")),
				new string[] { "nac_NodesWithoutSites_node_src" }, new string[] {  }, new string[] { "nac_NodesWithoutSites_var_validChildCount" },
				new GRGEN_LGSP.PatternNode[] { nac_NodesWithoutSites_node_src }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] { nac_NodesWithoutSites_var_validChildCount });
			nac_NodesWithoutSites_neg_0 = new GRGEN_LGSP.PatternGraph(
				"neg_0",
				"nac_NodesWithoutSites_",
				null, "neg_0",
				false, false,
				new GRGEN_LGSP.PatternNode[] { nac_NodesWithoutSites_node_src }, 
				new GRGEN_LGSP.PatternEdge[] {  }, 
				new GRGEN_LGSP.PatternVariable[] { nac_NodesWithoutSites_var_validChildCount }, 
				new GRGEN_LGSP.PatternGraphEmbedding[] {  }, 
				new GRGEN_LGSP.Alternative[] {  }, 
				new GRGEN_LGSP.Iterated[] {  }, 
				new GRGEN_LGSP.PatternGraph[] {  }, 
				new GRGEN_LGSP.PatternGraph[] {  }, 
				new GRGEN_LGSP.PatternCondition[] { nac_NodesWithoutSites_neg_0_cond_0,  }, 
				new GRGEN_LGSP.PatternYielding[] {  }, 
				new bool[1, 1] {
					{ true, },
				},
				new bool[0, 0] ,
				nac_NodesWithoutSites_neg_0_isNodeHomomorphicGlobal,
				nac_NodesWithoutSites_neg_0_isEdgeHomomorphicGlobal,
				nac_NodesWithoutSites_neg_0_isNodeTotallyHomomorphic,
				nac_NodesWithoutSites_neg_0_isEdgeTotallyHomomorphic
			);

			pat_nac_NodesWithoutSites = new GRGEN_LGSP.PatternGraph(
				"nac_NodesWithoutSites",
				"",
				null, "nac_NodesWithoutSites",
				false, false,
				new GRGEN_LGSP.PatternNode[] { nac_NodesWithoutSites_node_src }, 
				new GRGEN_LGSP.PatternEdge[] {  }, 
				new GRGEN_LGSP.PatternVariable[] { nac_NodesWithoutSites_var_validChildCount }, 
				new GRGEN_LGSP.PatternGraphEmbedding[] {  }, 
				new GRGEN_LGSP.Alternative[] {  }, 
				new GRGEN_LGSP.Iterated[] {  }, 
				new GRGEN_LGSP.PatternGraph[] { nac_NodesWithoutSites_neg_0,  }, 
				new GRGEN_LGSP.PatternGraph[] {  }, 
				new GRGEN_LGSP.PatternCondition[] {  }, 
				new GRGEN_LGSP.PatternYielding[] {  }, 
				new bool[1, 1] {
					{ true, },
				},
				new bool[0, 0] ,
				nac_NodesWithoutSites_isNodeHomomorphicGlobal,
				nac_NodesWithoutSites_isEdgeHomomorphicGlobal,
				nac_NodesWithoutSites_isNodeTotallyHomomorphic,
				nac_NodesWithoutSites_isEdgeTotallyHomomorphic
			);
			nac_NodesWithoutSites_neg_0.embeddingGraph = pat_nac_NodesWithoutSites;

			nac_NodesWithoutSites_var_validChildCount.pointOfDefinition = null;
			nac_NodesWithoutSites_node_src.pointOfDefinition = null;

			patternGraph = pat_nac_NodesWithoutSites;
		}


		public void nac_NodesWithoutSites_Delete(GRGEN_LGSP.LGSPActionExecutionEnvironment actionEnv, Match_nac_NodesWithoutSites curMatch)
		{
			GRGEN_LGSP.LGSPGraph graph = actionEnv.graph;
		}

		static Pattern_nac_NodesWithoutSites() {
		}

		public interface IMatch_nac_NodesWithoutSites : GRGEN_LIBGR.IMatch
		{
			//Nodes
			GRGEN_MODEL.IBNode node_src { get; set; }
			//Edges
			//Variables
			int @var_validChildCount { get; set; }
			//EmbeddedGraphs
			//Alternatives
			//Iterateds
			//Independents
			// further match object stuff
			void SetMatchOfEnclosingPattern(GRGEN_LIBGR.IMatch matchOfEnclosingPattern);
		}

		public interface IMatch_nac_NodesWithoutSites_neg_0 : GRGEN_LIBGR.IMatch
		{
			//Nodes
			GRGEN_MODEL.IBNode node_src { get; set; }
			//Edges
			//Variables
			int @var_validChildCount { get; set; }
			//EmbeddedGraphs
			//Alternatives
			//Iterateds
			//Independents
			// further match object stuff
			void SetMatchOfEnclosingPattern(GRGEN_LIBGR.IMatch matchOfEnclosingPattern);
		}

		public class Match_nac_NodesWithoutSites : GRGEN_LGSP.MatchListElement<Match_nac_NodesWithoutSites>, IMatch_nac_NodesWithoutSites
		{
			public GRGEN_MODEL.IBNode node_src { get { return (GRGEN_MODEL.IBNode)_node_src; } set { _node_src = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_LGSP.LGSPNode _node_src;
			public enum nac_NodesWithoutSites_NodeNums { @src, END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.INode> Nodes { get { return new GRGEN_LGSP.Nodes_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.INode> NodesEnumerator { get { return new GRGEN_LGSP.Nodes_Enumerator(this); } }
			public override int NumberOfNodes { get { return 1; } }
			public override GRGEN_LIBGR.INode getNodeAt(int index)
			{
				switch(index) {
				case (int)nac_NodesWithoutSites_NodeNums.@src: return _node_src;
				default: return null;
				}
			}
			public override GRGEN_LIBGR.INode getNode(string name)
			{
				switch(name) {
				case "src": return _node_src;
				default: return null;
				}
			}
			public override void SetNode(string name, GRGEN_LIBGR.INode value)
			{
				switch(name) {
				case "src": _node_src = (GRGEN_LGSP.LGSPNode)value; break;
				default: break;
				}
			}

			public enum nac_NodesWithoutSites_EdgeNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IEdge> Edges { get { return new GRGEN_LGSP.Edges_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IEdge> EdgesEnumerator { get { return new GRGEN_LGSP.Edges_Enumerator(this); } }
			public override int NumberOfEdges { get { return 0; } }
			public override GRGEN_LIBGR.IEdge getEdgeAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IEdge getEdge(string name)
			{
				switch(name) {
				default: return null;
				}
			}
			public override void SetEdge(string name, GRGEN_LIBGR.IEdge value)
			{
				switch(name) {
				default: break;
				}
			}

			public int var_validChildCount { get { return _var_validChildCount; } set { _var_validChildCount = value; } }
			public int _var_validChildCount;
			public enum nac_NodesWithoutSites_VariableNums { @validChildCount, END_OF_ENUM };
			public override IEnumerable<object> Variables { get { return new GRGEN_LGSP.Variables_Enumerable(this); } }
			public override IEnumerator<object> VariablesEnumerator { get { return new GRGEN_LGSP.Variables_Enumerator(this); } }
			public override int NumberOfVariables { get { return 1; } }
			public override object getVariableAt(int index)
			{
				switch(index) {
				case (int)nac_NodesWithoutSites_VariableNums.@validChildCount: return _var_validChildCount;
				default: return null;
				}
			}
			public override object getVariable(string name)
			{
				switch(name) {
				case "validChildCount": return _var_validChildCount;
				default: return null;
				}
			}
			public override void SetVariable(string name, object value)
			{
				switch(name) {
				case "validChildCount": _var_validChildCount = (int)value; break;
				default: break;
				}
			}

			public enum nac_NodesWithoutSites_SubNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> EmbeddedGraphs { get { return new GRGEN_LGSP.EmbeddedGraphs_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> EmbeddedGraphsEnumerator { get { return new GRGEN_LGSP.EmbeddedGraphs_Enumerator(this); } }
			public override int NumberOfEmbeddedGraphs { get { return 0; } }
			public override GRGEN_LIBGR.IMatch getEmbeddedGraphAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getEmbeddedGraph(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public enum nac_NodesWithoutSites_AltNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> Alternatives { get { return new GRGEN_LGSP.Alternatives_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> AlternativesEnumerator { get { return new GRGEN_LGSP.Alternatives_Enumerator(this); } }
			public override int NumberOfAlternatives { get { return 0; } }
			public override GRGEN_LIBGR.IMatch getAlternativeAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getAlternative(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public enum nac_NodesWithoutSites_IterNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatches> Iterateds { get { return new GRGEN_LGSP.Iterateds_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatches> IteratedsEnumerator { get { return new GRGEN_LGSP.Iterateds_Enumerator(this); } }
			public override int NumberOfIterateds { get { return 0; } }
			public override GRGEN_LIBGR.IMatches getIteratedAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatches getIterated(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public enum nac_NodesWithoutSites_IdptNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> Independents { get { return new GRGEN_LGSP.Independents_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> IndependentsEnumerator { get { return new GRGEN_LGSP.Independents_Enumerator(this); } }
			public override int NumberOfIndependents { get { return 0; } }
			public override GRGEN_LIBGR.IMatch getIndependentAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getIndependent(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public override GRGEN_LIBGR.IPatternGraph Pattern { get { return Pattern_nac_NodesWithoutSites.instance.pat_nac_NodesWithoutSites; } }
			public override GRGEN_LIBGR.IMatchClass MatchClass { get { return null; } }
			public override GRGEN_LIBGR.IMatch Clone() { return new Match_nac_NodesWithoutSites(this); }
			public override GRGEN_LIBGR.IMatch Clone(IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap) { return new Match_nac_NodesWithoutSites(this, oldToNewMap); }
			public void SetMatchOfEnclosingPattern(GRGEN_LIBGR.IMatch matchOfEnclosingPattern) { _matchOfEnclosingPattern = matchOfEnclosingPattern; }
			public Match_nac_NodesWithoutSites nextWithSameHash;
			public void CleanNextWithSameHash() {
				Match_nac_NodesWithoutSites cur = this;
				while(cur != null) {
					Match_nac_NodesWithoutSites next = cur.nextWithSameHash;
					cur.nextWithSameHash = null;
					cur = next;
				}
			}

			public void AssignContent(Match_nac_NodesWithoutSites that)
			{
				_node_src = that._node_src;
				_var_validChildCount = that._var_validChildCount;
			}

			public Match_nac_NodesWithoutSites(Match_nac_NodesWithoutSites that)
			{
				AssignContent(that);
			}
			public void AssignContent(Match_nac_NodesWithoutSites that, IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap)
			{
				_node_src = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_src];
				_var_validChildCount = that._var_validChildCount;
			}

			public Match_nac_NodesWithoutSites(Match_nac_NodesWithoutSites that, IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap)
			{
				AssignContent(that, oldToNewMap);
			}
			public Match_nac_NodesWithoutSites()
			{
			}

			public bool IsEqual(Match_nac_NodesWithoutSites that)
			{
				if(that==null) return false;
				if(_node_src != that._node_src) return false;
				if(_var_validChildCount != that._var_validChildCount) return false;
				return true;
			}
		}

		public class Match_nac_NodesWithoutSites_neg_0 : GRGEN_LGSP.MatchListElement<Match_nac_NodesWithoutSites_neg_0>, IMatch_nac_NodesWithoutSites_neg_0
		{
			public GRGEN_MODEL.IBNode node_src { get { return (GRGEN_MODEL.IBNode)_node_src; } set { _node_src = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_LGSP.LGSPNode _node_src;
			public enum nac_NodesWithoutSites_neg_0_NodeNums { @src, END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.INode> Nodes { get { return new GRGEN_LGSP.Nodes_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.INode> NodesEnumerator { get { return new GRGEN_LGSP.Nodes_Enumerator(this); } }
			public override int NumberOfNodes { get { return 1; } }
			public override GRGEN_LIBGR.INode getNodeAt(int index)
			{
				switch(index) {
				case (int)nac_NodesWithoutSites_neg_0_NodeNums.@src: return _node_src;
				default: return null;
				}
			}
			public override GRGEN_LIBGR.INode getNode(string name)
			{
				switch(name) {
				case "src": return _node_src;
				default: return null;
				}
			}
			public override void SetNode(string name, GRGEN_LIBGR.INode value)
			{
				switch(name) {
				case "src": _node_src = (GRGEN_LGSP.LGSPNode)value; break;
				default: break;
				}
			}

			public enum nac_NodesWithoutSites_neg_0_EdgeNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IEdge> Edges { get { return new GRGEN_LGSP.Edges_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IEdge> EdgesEnumerator { get { return new GRGEN_LGSP.Edges_Enumerator(this); } }
			public override int NumberOfEdges { get { return 0; } }
			public override GRGEN_LIBGR.IEdge getEdgeAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IEdge getEdge(string name)
			{
				switch(name) {
				default: return null;
				}
			}
			public override void SetEdge(string name, GRGEN_LIBGR.IEdge value)
			{
				switch(name) {
				default: break;
				}
			}

			public int var_validChildCount { get { return _var_validChildCount; } set { _var_validChildCount = value; } }
			public int _var_validChildCount;
			public enum nac_NodesWithoutSites_neg_0_VariableNums { @validChildCount, END_OF_ENUM };
			public override IEnumerable<object> Variables { get { return new GRGEN_LGSP.Variables_Enumerable(this); } }
			public override IEnumerator<object> VariablesEnumerator { get { return new GRGEN_LGSP.Variables_Enumerator(this); } }
			public override int NumberOfVariables { get { return 1; } }
			public override object getVariableAt(int index)
			{
				switch(index) {
				case (int)nac_NodesWithoutSites_neg_0_VariableNums.@validChildCount: return _var_validChildCount;
				default: return null;
				}
			}
			public override object getVariable(string name)
			{
				switch(name) {
				case "validChildCount": return _var_validChildCount;
				default: return null;
				}
			}
			public override void SetVariable(string name, object value)
			{
				switch(name) {
				case "validChildCount": _var_validChildCount = (int)value; break;
				default: break;
				}
			}

			public enum nac_NodesWithoutSites_neg_0_SubNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> EmbeddedGraphs { get { return new GRGEN_LGSP.EmbeddedGraphs_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> EmbeddedGraphsEnumerator { get { return new GRGEN_LGSP.EmbeddedGraphs_Enumerator(this); } }
			public override int NumberOfEmbeddedGraphs { get { return 0; } }
			public override GRGEN_LIBGR.IMatch getEmbeddedGraphAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getEmbeddedGraph(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public enum nac_NodesWithoutSites_neg_0_AltNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> Alternatives { get { return new GRGEN_LGSP.Alternatives_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> AlternativesEnumerator { get { return new GRGEN_LGSP.Alternatives_Enumerator(this); } }
			public override int NumberOfAlternatives { get { return 0; } }
			public override GRGEN_LIBGR.IMatch getAlternativeAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getAlternative(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public enum nac_NodesWithoutSites_neg_0_IterNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatches> Iterateds { get { return new GRGEN_LGSP.Iterateds_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatches> IteratedsEnumerator { get { return new GRGEN_LGSP.Iterateds_Enumerator(this); } }
			public override int NumberOfIterateds { get { return 0; } }
			public override GRGEN_LIBGR.IMatches getIteratedAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatches getIterated(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public enum nac_NodesWithoutSites_neg_0_IdptNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> Independents { get { return new GRGEN_LGSP.Independents_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> IndependentsEnumerator { get { return new GRGEN_LGSP.Independents_Enumerator(this); } }
			public override int NumberOfIndependents { get { return 0; } }
			public override GRGEN_LIBGR.IMatch getIndependentAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getIndependent(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public override GRGEN_LIBGR.IPatternGraph Pattern { get { return Pattern_nac_NodesWithoutSites.instance.nac_NodesWithoutSites_neg_0; } }
			public override GRGEN_LIBGR.IMatchClass MatchClass { get { return null; } }
			public override GRGEN_LIBGR.IMatch Clone() { return new Match_nac_NodesWithoutSites_neg_0(this); }
			public override GRGEN_LIBGR.IMatch Clone(IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap) { return new Match_nac_NodesWithoutSites_neg_0(this, oldToNewMap); }
			public void SetMatchOfEnclosingPattern(GRGEN_LIBGR.IMatch matchOfEnclosingPattern) { _matchOfEnclosingPattern = matchOfEnclosingPattern; }
			public Match_nac_NodesWithoutSites_neg_0 nextWithSameHash;
			public void CleanNextWithSameHash() {
				Match_nac_NodesWithoutSites_neg_0 cur = this;
				while(cur != null) {
					Match_nac_NodesWithoutSites_neg_0 next = cur.nextWithSameHash;
					cur.nextWithSameHash = null;
					cur = next;
				}
			}

			public void AssignContent(Match_nac_NodesWithoutSites_neg_0 that)
			{
				_node_src = that._node_src;
				_var_validChildCount = that._var_validChildCount;
			}

			public Match_nac_NodesWithoutSites_neg_0(Match_nac_NodesWithoutSites_neg_0 that)
			{
				AssignContent(that);
			}
			public void AssignContent(Match_nac_NodesWithoutSites_neg_0 that, IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap)
			{
				_node_src = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_src];
				_var_validChildCount = that._var_validChildCount;
			}

			public Match_nac_NodesWithoutSites_neg_0(Match_nac_NodesWithoutSites_neg_0 that, IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap)
			{
				AssignContent(that, oldToNewMap);
			}
			public Match_nac_NodesWithoutSites_neg_0()
			{
			}

			public bool IsEqual(Match_nac_NodesWithoutSites_neg_0 that)
			{
				if(that==null) return false;
				if(_node_src != that._node_src) return false;
				if(_var_validChildCount != that._var_validChildCount) return false;
				return true;
			}
		}

	}


	public class Rule_es_0_1 : GRGEN_LGSP.LGSPRulePattern
	{
		private static Rule_es_0_1 instance = null;
		public static Rule_es_0_1 Instance { get { if(instance==null) { instance = new Rule_es_0_1(); instance.initialize(); } return instance; } }

		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_r0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v9_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v0_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v1_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v2_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v9_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v10_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v1_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v3_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v11_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v3_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v4_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v6_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v8_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v11_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v12_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v14_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v16_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v5_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v7_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v13_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v15_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v7_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_v15_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_left_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_rn0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_e0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_right_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] es_0_1_node_rn1_AllowedTypes = null;
		public static bool[] es_0_1_node_v0_IsAllowedType = null;
		public static bool[] es_0_1_node_r0_IsAllowedType = null;
		public static bool[] es_0_1_node_v9_IsAllowedType = null;
		public static bool[] es_0_1_node_v0_p0_IsAllowedType = null;
		public static bool[] es_0_1_node_v1_IsAllowedType = null;
		public static bool[] es_0_1_node_v2_IsAllowedType = null;
		public static bool[] es_0_1_node_v9_p0_IsAllowedType = null;
		public static bool[] es_0_1_node_v10_IsAllowedType = null;
		public static bool[] es_0_1_node_v1_p0_IsAllowedType = null;
		public static bool[] es_0_1_node_v3_IsAllowedType = null;
		public static bool[] es_0_1_node_v11_IsAllowedType = null;
		public static bool[] es_0_1_node_v3_p0_IsAllowedType = null;
		public static bool[] es_0_1_node_v4_IsAllowedType = null;
		public static bool[] es_0_1_node_v6_IsAllowedType = null;
		public static bool[] es_0_1_node_v8_IsAllowedType = null;
		public static bool[] es_0_1_node_v11_p0_IsAllowedType = null;
		public static bool[] es_0_1_node_v12_IsAllowedType = null;
		public static bool[] es_0_1_node_v14_IsAllowedType = null;
		public static bool[] es_0_1_node_v16_IsAllowedType = null;
		public static bool[] es_0_1_node_v5_IsAllowedType = null;
		public static bool[] es_0_1_node_v7_IsAllowedType = null;
		public static bool[] es_0_1_node_v13_IsAllowedType = null;
		public static bool[] es_0_1_node_v15_IsAllowedType = null;
		public static bool[] es_0_1_node_v7_p0_IsAllowedType = null;
		public static bool[] es_0_1_node_v15_p0_IsAllowedType = null;
		public static bool[] es_0_1_node_left_IsAllowedType = null;
		public static bool[] es_0_1_node_rn0_IsAllowedType = null;
		public static bool[] es_0_1_node_e0_IsAllowedType = null;
		public static bool[] es_0_1_node_right_IsAllowedType = null;
		public static bool[] es_0_1_node_rn1_IsAllowedType = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c0_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c1_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c2_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c3_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c4_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c5_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c6_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c7_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c8_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c9_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c10_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c11_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c12_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c13_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c14_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c15_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c16_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c17_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c18_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c19_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c20_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c21_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c22_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge_c23_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge__edge0_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge__edge1_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge__edge2_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge__edge3_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge__edge4_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge__edge5_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] es_0_1_edge__edge6_AllowedTypes = null;
		public static bool[] es_0_1_edge_c0_IsAllowedType = null;
		public static bool[] es_0_1_edge_c1_IsAllowedType = null;
		public static bool[] es_0_1_edge_c2_IsAllowedType = null;
		public static bool[] es_0_1_edge_c3_IsAllowedType = null;
		public static bool[] es_0_1_edge_c4_IsAllowedType = null;
		public static bool[] es_0_1_edge_c5_IsAllowedType = null;
		public static bool[] es_0_1_edge_c6_IsAllowedType = null;
		public static bool[] es_0_1_edge_c7_IsAllowedType = null;
		public static bool[] es_0_1_edge_c8_IsAllowedType = null;
		public static bool[] es_0_1_edge_c9_IsAllowedType = null;
		public static bool[] es_0_1_edge_c10_IsAllowedType = null;
		public static bool[] es_0_1_edge_c11_IsAllowedType = null;
		public static bool[] es_0_1_edge_c12_IsAllowedType = null;
		public static bool[] es_0_1_edge_c13_IsAllowedType = null;
		public static bool[] es_0_1_edge_c14_IsAllowedType = null;
		public static bool[] es_0_1_edge_c15_IsAllowedType = null;
		public static bool[] es_0_1_edge_c16_IsAllowedType = null;
		public static bool[] es_0_1_edge_c17_IsAllowedType = null;
		public static bool[] es_0_1_edge_c18_IsAllowedType = null;
		public static bool[] es_0_1_edge_c19_IsAllowedType = null;
		public static bool[] es_0_1_edge_c20_IsAllowedType = null;
		public static bool[] es_0_1_edge_c21_IsAllowedType = null;
		public static bool[] es_0_1_edge_c22_IsAllowedType = null;
		public static bool[] es_0_1_edge_c23_IsAllowedType = null;
		public static bool[] es_0_1_edge__edge0_IsAllowedType = null;
		public static bool[] es_0_1_edge__edge1_IsAllowedType = null;
		public static bool[] es_0_1_edge__edge2_IsAllowedType = null;
		public static bool[] es_0_1_edge__edge3_IsAllowedType = null;
		public static bool[] es_0_1_edge__edge4_IsAllowedType = null;
		public static bool[] es_0_1_edge__edge5_IsAllowedType = null;
		public static bool[] es_0_1_edge__edge6_IsAllowedType = null;
		public enum es_0_1_NodeNums { @v0, @r0, @v9, @v0_p0, @v1, @v2, @v9_p0, @v10, @v1_p0, @v3, @v11, @v3_p0, @v4, @v6, @v8, @v11_p0, @v12, @v14, @v16, @v5, @v7, @v13, @v15, @v7_p0, @v15_p0, @left, @rn0, @e0, @right, @rn1, };
		public enum es_0_1_EdgeNums { @c0, @c1, @c2, @c3, @c4, @c5, @c6, @c7, @c8, @c9, @c10, @c11, @c12, @c13, @c14, @c15, @c16, @c17, @c18, @c19, @c20, @c21, @c22, @c23, @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, };
		public enum es_0_1_VariableNums { };
		public enum es_0_1_SubNums { @pat0, @pat1, @pat2, @pat3, @pat4, @pat5, @pat6, @pat7, @pat8, @pat9, @pat10, @pat11, @pat12, };
		public enum es_0_1_AltNums { };
		public enum es_0_1_IterNums { };





		public static Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> fill_anonymous_set_10545(GRGEN_LIBGR.INode item0, GRGEN_LIBGR.INode item1, GRGEN_LIBGR.INode item2, GRGEN_LIBGR.INode item3, GRGEN_LIBGR.INode item4, GRGEN_LIBGR.INode item5, GRGEN_LIBGR.INode item6, GRGEN_LIBGR.INode item7, GRGEN_LIBGR.INode item8, GRGEN_LIBGR.INode item9, GRGEN_LIBGR.INode item10, GRGEN_LIBGR.INode item11, GRGEN_LIBGR.INode item12, GRGEN_LIBGR.INode item13, GRGEN_LIBGR.INode item14, GRGEN_LIBGR.INode item15, GRGEN_LIBGR.INode item16, GRGEN_LIBGR.INode item17) {
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> anonymous_set_10545 = new Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType>();
			anonymous_set_10545[item0] = null;
			anonymous_set_10545[item1] = null;
			anonymous_set_10545[item2] = null;
			anonymous_set_10545[item3] = null;
			anonymous_set_10545[item4] = null;
			anonymous_set_10545[item5] = null;
			anonymous_set_10545[item6] = null;
			anonymous_set_10545[item7] = null;
			anonymous_set_10545[item8] = null;
			anonymous_set_10545[item9] = null;
			anonymous_set_10545[item10] = null;
			anonymous_set_10545[item11] = null;
			anonymous_set_10545[item12] = null;
			anonymous_set_10545[item13] = null;
			anonymous_set_10545[item14] = null;
			anonymous_set_10545[item15] = null;
			anonymous_set_10545[item16] = null;
			anonymous_set_10545[item17] = null;
			return anonymous_set_10545;
		}
		public static Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.INode> fill_anonymous_map_10570(GRGEN_LIBGR.INode itemkey0,GRGEN_LIBGR.INode itemvalue0, GRGEN_LIBGR.INode itemkey1,GRGEN_LIBGR.INode itemvalue1, GRGEN_LIBGR.INode itemkey2,GRGEN_LIBGR.INode itemvalue2, GRGEN_LIBGR.INode itemkey3,GRGEN_LIBGR.INode itemvalue3) {
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.INode> anonymous_map_10570 = new Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.INode>();
			anonymous_map_10570[itemkey0] = itemvalue0;
			anonymous_map_10570[itemkey1] = itemvalue1;
			anonymous_map_10570[itemkey2] = itemvalue2;
			anonymous_map_10570[itemkey3] = itemvalue3;
			return anonymous_map_10570;
		}
		public static Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.INode> fill_anonymous_map_10575() {
			Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.INode> anonymous_map_10575 = new Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.INode>();
			return anonymous_map_10575;
		}

		public GRGEN_LGSP.PatternGraph pat_es_0_1;


		private Rule_es_0_1()
			: base("es_0_1",
				new GRGEN_LIBGR.GrGenType[] { },
				new string[] { },
				new GRGEN_LIBGR.GrGenType[] { },
				new string[] { },
				new GRGEN_LIBGR.GrGenType[] { },
				new GRGEN_LGSP.LGSPFilter[] {
					new GRGEN_LGSP.LGSPFilterAutoSupplied("keepFirst", null, "keepFirst", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(int)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("keepLast", null, "keepLast", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(int)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("keepFirstFraction", null, "keepFirstFraction", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(double)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("keepLastFraction", null, "keepLastFraction", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(double)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("removeFirst", null, "removeFirst", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(int)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("removeLast", null, "removeLast", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(int)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("removeFirstFraction", null, "removeFirstFraction", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(double)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("removeLastFraction", null, "removeLastFraction", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(double)), }, new String[] {"param"}),
				},
				new GRGEN_LIBGR.MatchClassInfo[] { },
				"de.unika.ipd.grGen.Action_ruleset.Rule_es_0_1+IMatch_es_0_1",
				"de.unika.ipd.grGen.Action_ruleset.Rule_es_0_1+Match_es_0_1"
			)
		{
		}
		private void initialize()
		{
			bool[,] es_0_1_isNodeHomomorphicGlobal = new bool[30, 30] {
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
			};
			bool[,] es_0_1_isEdgeHomomorphicGlobal = new bool[31, 31] {
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
			};
			bool[] es_0_1_isNodeTotallyHomomorphic = new bool[30] { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,  };
			bool[] es_0_1_isEdgeTotallyHomomorphic = new bool[31] { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,  };
			GRGEN_LGSP.PatternNode es_0_1_node_v0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Locale, GRGEN_MODEL.NodeType_Locale.typeVar, "GRGEN_MODEL.ILocale", "es_0_1_node_v0", "v0", es_0_1_node_v0_AllowedTypes, es_0_1_node_v0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_r0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Node, GRGEN_MODEL.NodeType_Node.typeVar, "GRGEN_LIBGR.INode", "es_0_1_node_r0", "r0", es_0_1_node_r0_AllowedTypes, es_0_1_node_r0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v9 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Locale, GRGEN_MODEL.NodeType_Locale.typeVar, "GRGEN_MODEL.ILocale", "es_0_1_node_v9", "v9", es_0_1_node_v9_AllowedTypes, es_0_1_node_v9_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v0_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "es_0_1_node_v0_p0", "v0_p0", es_0_1_node_v0_p0_AllowedTypes, es_0_1_node_v0_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v1 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Route, GRGEN_MODEL.NodeType_Route.typeVar, "GRGEN_MODEL.IRoute", "es_0_1_node_v1", "v1", es_0_1_node_v1_AllowedTypes, es_0_1_node_v1_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v2 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@OccupiedBy, GRGEN_MODEL.NodeType_OccupiedBy.typeVar, "GRGEN_MODEL.IOccupiedBy", "es_0_1_node_v2", "v2", es_0_1_node_v2_AllowedTypes, es_0_1_node_v2_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v9_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "es_0_1_node_v9_p0", "v9_p0", es_0_1_node_v9_p0_AllowedTypes, es_0_1_node_v9_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v10 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@OccupiedBy, GRGEN_MODEL.NodeType_OccupiedBy.typeVar, "GRGEN_MODEL.IOccupiedBy", "es_0_1_node_v10", "v10", es_0_1_node_v10_AllowedTypes, es_0_1_node_v10_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v1_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "es_0_1_node_v1_p0", "v1_p0", es_0_1_node_v1_p0_AllowedTypes, es_0_1_node_v1_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v3 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Robot, GRGEN_MODEL.NodeType_Robot.typeVar, "GRGEN_MODEL.IRobot", "es_0_1_node_v3", "v3", es_0_1_node_v3_AllowedTypes, es_0_1_node_v3_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v11 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Robot, GRGEN_MODEL.NodeType_Robot.typeVar, "GRGEN_MODEL.IRobot", "es_0_1_node_v11", "v11", es_0_1_node_v11_AllowedTypes, es_0_1_node_v11_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v3_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "es_0_1_node_v3_p0", "v3_p0", es_0_1_node_v3_p0_AllowedTypes, es_0_1_node_v3_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v4 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@ID, GRGEN_MODEL.NodeType_ID.typeVar, "GRGEN_MODEL.IID", "es_0_1_node_v4", "v4", es_0_1_node_v4_AllowedTypes, es_0_1_node_v4_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v6 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@SLck, GRGEN_MODEL.NodeType_SLck.typeVar, "GRGEN_MODEL.ISLck", "es_0_1_node_v6", "v6", es_0_1_node_v6_AllowedTypes, es_0_1_node_v6_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v8 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Mvmt, GRGEN_MODEL.NodeType_Mvmt.typeVar, "GRGEN_MODEL.IMvmt", "es_0_1_node_v8", "v8", es_0_1_node_v8_AllowedTypes, es_0_1_node_v8_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v11_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "es_0_1_node_v11_p0", "v11_p0", es_0_1_node_v11_p0_AllowedTypes, es_0_1_node_v11_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v12 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@ID, GRGEN_MODEL.NodeType_ID.typeVar, "GRGEN_MODEL.IID", "es_0_1_node_v12", "v12", es_0_1_node_v12_AllowedTypes, es_0_1_node_v12_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v14 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@SLck, GRGEN_MODEL.NodeType_SLck.typeVar, "GRGEN_MODEL.ISLck", "es_0_1_node_v14", "v14", es_0_1_node_v14_AllowedTypes, es_0_1_node_v14_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v16 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Mvmt, GRGEN_MODEL.NodeType_Mvmt.typeVar, "GRGEN_MODEL.IMvmt", "es_0_1_node_v16", "v16", es_0_1_node_v16_AllowedTypes, es_0_1_node_v16_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v5 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@N0, GRGEN_MODEL.NodeType_N0.typeVar, "GRGEN_MODEL.IN0", "es_0_1_node_v5", "v5", es_0_1_node_v5_AllowedTypes, es_0_1_node_v5_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v7 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@SLckRef, GRGEN_MODEL.NodeType_SLckRef.typeVar, "GRGEN_MODEL.ISLckRef", "es_0_1_node_v7", "v7", es_0_1_node_v7_AllowedTypes, es_0_1_node_v7_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v13 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@N1, GRGEN_MODEL.NodeType_N1.typeVar, "GRGEN_MODEL.IN1", "es_0_1_node_v13", "v13", es_0_1_node_v13_AllowedTypes, es_0_1_node_v13_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v15 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@SLckRef, GRGEN_MODEL.NodeType_SLckRef.typeVar, "GRGEN_MODEL.ISLckRef", "es_0_1_node_v15", "v15", es_0_1_node_v15_AllowedTypes, es_0_1_node_v15_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v7_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "es_0_1_node_v7_p0", "v7_p0", es_0_1_node_v7_p0_AllowedTypes, es_0_1_node_v7_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_v15_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "es_0_1_node_v15_p0", "v15_p0", es_0_1_node_v15_p0_AllowedTypes, es_0_1_node_v15_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_left = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "es_0_1_node_left", "left", es_0_1_node_left_AllowedTypes, es_0_1_node_left_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_rn0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "es_0_1_node_rn0", "rn0", es_0_1_node_rn0_AllowedTypes, es_0_1_node_rn0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_e0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BEdge, GRGEN_MODEL.NodeType_BEdge.typeVar, "GRGEN_MODEL.IBEdge", "es_0_1_node_e0", "e0", es_0_1_node_e0_AllowedTypes, es_0_1_node_e0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_right = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "es_0_1_node_right", "right", es_0_1_node_right_AllowedTypes, es_0_1_node_right_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode es_0_1_node_rn1 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "es_0_1_node_rn1", "rn1", es_0_1_node_rn1_AllowedTypes, es_0_1_node_rn1_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c0 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "es_0_1_edge_c0", "c0", es_0_1_edge_c0_AllowedTypes, es_0_1_edge_c0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c1 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "es_0_1_edge_c1", "c1", es_0_1_edge_c1_AllowedTypes, es_0_1_edge_c1_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c2 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "es_0_1_edge_c2", "c2", es_0_1_edge_c2_AllowedTypes, es_0_1_edge_c2_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c3 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "es_0_1_edge_c3", "c3", es_0_1_edge_c3_AllowedTypes, es_0_1_edge_c3_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c4 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "es_0_1_edge_c4", "c4", es_0_1_edge_c4_AllowedTypes, es_0_1_edge_c4_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c5 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "es_0_1_edge_c5", "c5", es_0_1_edge_c5_AllowedTypes, es_0_1_edge_c5_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c6 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "es_0_1_edge_c6", "c6", es_0_1_edge_c6_AllowedTypes, es_0_1_edge_c6_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c7 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "es_0_1_edge_c7", "c7", es_0_1_edge_c7_AllowedTypes, es_0_1_edge_c7_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c8 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "es_0_1_edge_c8", "c8", es_0_1_edge_c8_AllowedTypes, es_0_1_edge_c8_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c9 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "es_0_1_edge_c9", "c9", es_0_1_edge_c9_AllowedTypes, es_0_1_edge_c9_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c10 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "es_0_1_edge_c10", "c10", es_0_1_edge_c10_AllowedTypes, es_0_1_edge_c10_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c11 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "es_0_1_edge_c11", "c11", es_0_1_edge_c11_AllowedTypes, es_0_1_edge_c11_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c12 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "es_0_1_edge_c12", "c12", es_0_1_edge_c12_AllowedTypes, es_0_1_edge_c12_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c13 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "es_0_1_edge_c13", "c13", es_0_1_edge_c13_AllowedTypes, es_0_1_edge_c13_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c14 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "es_0_1_edge_c14", "c14", es_0_1_edge_c14_AllowedTypes, es_0_1_edge_c14_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c15 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "es_0_1_edge_c15", "c15", es_0_1_edge_c15_AllowedTypes, es_0_1_edge_c15_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c16 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "es_0_1_edge_c16", "c16", es_0_1_edge_c16_AllowedTypes, es_0_1_edge_c16_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c17 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "es_0_1_edge_c17", "c17", es_0_1_edge_c17_AllowedTypes, es_0_1_edge_c17_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c18 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "es_0_1_edge_c18", "c18", es_0_1_edge_c18_AllowedTypes, es_0_1_edge_c18_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c19 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "es_0_1_edge_c19", "c19", es_0_1_edge_c19_AllowedTypes, es_0_1_edge_c19_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c20 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "es_0_1_edge_c20", "c20", es_0_1_edge_c20_AllowedTypes, es_0_1_edge_c20_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c21 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "es_0_1_edge_c21", "c21", es_0_1_edge_c21_AllowedTypes, es_0_1_edge_c21_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c22 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "es_0_1_edge_c22", "c22", es_0_1_edge_c22_AllowedTypes, es_0_1_edge_c22_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge_c23 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "es_0_1_edge_c23", "c23", es_0_1_edge_c23_AllowedTypes, es_0_1_edge_c23_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge__edge0 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "es_0_1_edge__edge0", "_edge0", es_0_1_edge__edge0_AllowedTypes, es_0_1_edge__edge0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge__edge1 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "es_0_1_edge__edge1", "_edge1", es_0_1_edge__edge1_AllowedTypes, es_0_1_edge__edge1_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge__edge2 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "es_0_1_edge__edge2", "_edge2", es_0_1_edge__edge2_AllowedTypes, es_0_1_edge__edge2_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge__edge3 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "es_0_1_edge__edge3", "_edge3", es_0_1_edge__edge3_AllowedTypes, es_0_1_edge__edge3_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge__edge4 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "es_0_1_edge__edge4", "_edge4", es_0_1_edge__edge4_AllowedTypes, es_0_1_edge__edge4_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge__edge5 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "es_0_1_edge__edge5", "_edge5", es_0_1_edge__edge5_AllowedTypes, es_0_1_edge__edge5_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge es_0_1_edge__edge6 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "es_0_1_edge__edge6", "_edge6", es_0_1_edge__edge6_AllowedTypes, es_0_1_edge__edge6_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternGraphEmbedding es_0_1_pat0 = new GRGEN_LGSP.PatternGraphEmbedding("pat0", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("es_0_1_node_v6"),
					new GRGEN_EXPR.Constant("1"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "es_0_1_node_v6" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v6 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding es_0_1_pat1 = new GRGEN_LGSP.PatternGraphEmbedding("pat1", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("es_0_1_node_v7"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "es_0_1_node_v7" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v7 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding es_0_1_pat2 = new GRGEN_LGSP.PatternGraphEmbedding("pat2", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("es_0_1_node_v8"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "es_0_1_node_v8" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v8 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding es_0_1_pat3 = new GRGEN_LGSP.PatternGraphEmbedding("pat3", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("es_0_1_node_v10"),
					new GRGEN_EXPR.Constant("1"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "es_0_1_node_v10" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v10 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding es_0_1_pat4 = new GRGEN_LGSP.PatternGraphEmbedding("pat4", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("es_0_1_node_v12"),
					new GRGEN_EXPR.Constant("1"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "es_0_1_node_v12" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v12 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding es_0_1_pat5 = new GRGEN_LGSP.PatternGraphEmbedding("pat5", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("es_0_1_node_v14"),
					new GRGEN_EXPR.Constant("1"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "es_0_1_node_v14" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v14 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding es_0_1_pat6 = new GRGEN_LGSP.PatternGraphEmbedding("pat6", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("es_0_1_node_v13"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "es_0_1_node_v13" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v13 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding es_0_1_pat7 = new GRGEN_LGSP.PatternGraphEmbedding("pat7", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("es_0_1_node_v16"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "es_0_1_node_v16" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v16 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding es_0_1_pat8 = new GRGEN_LGSP.PatternGraphEmbedding("pat8", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("es_0_1_node_v1"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "es_0_1_node_v1" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v1 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding es_0_1_pat9 = new GRGEN_LGSP.PatternGraphEmbedding("pat9", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("es_0_1_node_v15"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "es_0_1_node_v15" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v15 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding es_0_1_pat10 = new GRGEN_LGSP.PatternGraphEmbedding("pat10", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("es_0_1_node_v2"),
					new GRGEN_EXPR.Constant("1"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "es_0_1_node_v2" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v2 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding es_0_1_pat11 = new GRGEN_LGSP.PatternGraphEmbedding("pat11", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("es_0_1_node_v4"),
					new GRGEN_EXPR.Constant("1"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "es_0_1_node_v4" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v4 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding es_0_1_pat12 = new GRGEN_LGSP.PatternGraphEmbedding("pat12", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("es_0_1_node_v5"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "es_0_1_node_v5" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v5 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition es_0_1_cond_0 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "es_0_1_node_v7_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "es_0_1_node_v7_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v7_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition es_0_1_cond_1 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "es_0_1_node_v9_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "es_0_1_node_v9_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v9_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition es_0_1_cond_2 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "es_0_1_node_v11_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "es_0_1_node_v11_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v11_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition es_0_1_cond_3 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "es_0_1_node_v0_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "es_0_1_node_v0_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v0_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition es_0_1_cond_4 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "es_0_1_node_v1_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "es_0_1_node_v1_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v1_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition es_0_1_cond_5 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "es_0_1_node_v15_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "es_0_1_node_v15_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v15_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition es_0_1_cond_6 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "es_0_1_node_v3_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "es_0_1_node_v3_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v3_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			pat_es_0_1 = new GRGEN_LGSP.PatternGraph(
				"es_0_1",
				"",
				null, "es_0_1",
				false, false,
				new GRGEN_LGSP.PatternNode[] { es_0_1_node_v0, es_0_1_node_r0, es_0_1_node_v9, es_0_1_node_v0_p0, es_0_1_node_v1, es_0_1_node_v2, es_0_1_node_v9_p0, es_0_1_node_v10, es_0_1_node_v1_p0, es_0_1_node_v3, es_0_1_node_v11, es_0_1_node_v3_p0, es_0_1_node_v4, es_0_1_node_v6, es_0_1_node_v8, es_0_1_node_v11_p0, es_0_1_node_v12, es_0_1_node_v14, es_0_1_node_v16, es_0_1_node_v5, es_0_1_node_v7, es_0_1_node_v13, es_0_1_node_v15, es_0_1_node_v7_p0, es_0_1_node_v15_p0, es_0_1_node_left, es_0_1_node_rn0, es_0_1_node_e0, es_0_1_node_right, es_0_1_node_rn1 }, 
				new GRGEN_LGSP.PatternEdge[] { es_0_1_edge_c0, es_0_1_edge_c1, es_0_1_edge_c2, es_0_1_edge_c3, es_0_1_edge_c4, es_0_1_edge_c5, es_0_1_edge_c6, es_0_1_edge_c7, es_0_1_edge_c8, es_0_1_edge_c9, es_0_1_edge_c10, es_0_1_edge_c11, es_0_1_edge_c12, es_0_1_edge_c13, es_0_1_edge_c14, es_0_1_edge_c15, es_0_1_edge_c16, es_0_1_edge_c17, es_0_1_edge_c18, es_0_1_edge_c19, es_0_1_edge_c20, es_0_1_edge_c21, es_0_1_edge_c22, es_0_1_edge_c23, es_0_1_edge__edge0, es_0_1_edge__edge1, es_0_1_edge__edge2, es_0_1_edge__edge3, es_0_1_edge__edge4, es_0_1_edge__edge5, es_0_1_edge__edge6 }, 
				new GRGEN_LGSP.PatternVariable[] {  }, 
				new GRGEN_LGSP.PatternGraphEmbedding[] { es_0_1_pat0, es_0_1_pat1, es_0_1_pat2, es_0_1_pat3, es_0_1_pat4, es_0_1_pat5, es_0_1_pat6, es_0_1_pat7, es_0_1_pat8, es_0_1_pat9, es_0_1_pat10, es_0_1_pat11, es_0_1_pat12 }, 
				new GRGEN_LGSP.Alternative[] {  }, 
				new GRGEN_LGSP.Iterated[] {  }, 
				new GRGEN_LGSP.PatternGraph[] {  }, 
				new GRGEN_LGSP.PatternGraph[] {  }, 
				new GRGEN_LGSP.PatternCondition[] { es_0_1_cond_0, es_0_1_cond_1, es_0_1_cond_2, es_0_1_cond_3, es_0_1_cond_4, es_0_1_cond_5, es_0_1_cond_6,  }, 
				new GRGEN_LGSP.PatternYielding[] {  }, 
				new bool[30, 30] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				new bool[31, 31] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				es_0_1_isNodeHomomorphicGlobal,
				es_0_1_isEdgeHomomorphicGlobal,
				es_0_1_isNodeTotallyHomomorphic,
				es_0_1_isEdgeTotallyHomomorphic
			);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c0, es_0_1_node_v0);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c0, es_0_1_node_r0);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c1, es_0_1_node_v9);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c1, es_0_1_node_r0);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c2, es_0_1_node_v0_p0);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c2, es_0_1_node_v0);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c3, es_0_1_node_v1);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c3, es_0_1_node_v0);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c4, es_0_1_node_v2);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c4, es_0_1_node_v0);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c5, es_0_1_node_v9_p0);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c5, es_0_1_node_v9);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c6, es_0_1_node_v10);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c6, es_0_1_node_v9);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c7, es_0_1_node_v1_p0);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c7, es_0_1_node_v1);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c8, es_0_1_node_v3);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c8, es_0_1_node_v2);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c9, es_0_1_node_v11);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c9, es_0_1_node_v10);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c10, es_0_1_node_v3_p0);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c10, es_0_1_node_v3);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c11, es_0_1_node_v4);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c11, es_0_1_node_v3);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c12, es_0_1_node_v6);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c12, es_0_1_node_v3);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c13, es_0_1_node_v8);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c13, es_0_1_node_v3);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c14, es_0_1_node_v11_p0);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c14, es_0_1_node_v11);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c15, es_0_1_node_v12);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c15, es_0_1_node_v11);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c16, es_0_1_node_v14);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c16, es_0_1_node_v11);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c17, es_0_1_node_v16);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c17, es_0_1_node_v11);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c18, es_0_1_node_v5);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c18, es_0_1_node_v4);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c19, es_0_1_node_v7);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c19, es_0_1_node_v6);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c20, es_0_1_node_v13);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c20, es_0_1_node_v12);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c21, es_0_1_node_v15);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c21, es_0_1_node_v14);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c22, es_0_1_node_v7_p0);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c22, es_0_1_node_v7);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge_c23, es_0_1_node_v15_p0);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge_c23, es_0_1_node_v15);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge__edge0, es_0_1_node_v0_p0);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge__edge0, es_0_1_node_left);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge__edge1, es_0_1_node_v3_p0);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge__edge1, es_0_1_node_rn0);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge__edge2, es_0_1_node_v7_p0);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge__edge2, es_0_1_node_e0);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge__edge3, es_0_1_node_v15_p0);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge__edge3, es_0_1_node_e0);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge__edge4, es_0_1_node_v9_p0);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge__edge4, es_0_1_node_right);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge__edge5, es_0_1_node_v1_p0);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge__edge5, es_0_1_node_right);
			pat_es_0_1.edgeToSourceNode.Add(es_0_1_edge__edge6, es_0_1_node_v11_p0);
			pat_es_0_1.edgeToTargetNode.Add(es_0_1_edge__edge6, es_0_1_node_rn1);

			es_0_1_node_v0.pointOfDefinition = pat_es_0_1;
			es_0_1_node_r0.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v9.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v0_p0.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v1.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v2.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v9_p0.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v10.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v1_p0.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v3.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v11.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v3_p0.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v4.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v6.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v8.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v11_p0.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v12.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v14.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v16.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v5.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v7.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v13.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v15.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v7_p0.pointOfDefinition = pat_es_0_1;
			es_0_1_node_v15_p0.pointOfDefinition = pat_es_0_1;
			es_0_1_node_left.pointOfDefinition = pat_es_0_1;
			es_0_1_node_rn0.pointOfDefinition = pat_es_0_1;
			es_0_1_node_e0.pointOfDefinition = pat_es_0_1;
			es_0_1_node_right.pointOfDefinition = pat_es_0_1;
			es_0_1_node_rn1.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c0.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c1.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c2.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c3.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c4.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c5.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c6.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c7.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c8.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c9.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c10.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c11.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c12.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c13.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c14.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c15.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c16.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c17.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c18.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c19.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c20.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c21.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c22.pointOfDefinition = pat_es_0_1;
			es_0_1_edge_c23.pointOfDefinition = pat_es_0_1;
			es_0_1_edge__edge0.pointOfDefinition = pat_es_0_1;
			es_0_1_edge__edge1.pointOfDefinition = pat_es_0_1;
			es_0_1_edge__edge2.pointOfDefinition = pat_es_0_1;
			es_0_1_edge__edge3.pointOfDefinition = pat_es_0_1;
			es_0_1_edge__edge4.pointOfDefinition = pat_es_0_1;
			es_0_1_edge__edge5.pointOfDefinition = pat_es_0_1;
			es_0_1_edge__edge6.pointOfDefinition = pat_es_0_1;
			es_0_1_pat0.PointOfDefinition = pat_es_0_1;
			es_0_1_pat1.PointOfDefinition = pat_es_0_1;
			es_0_1_pat2.PointOfDefinition = pat_es_0_1;
			es_0_1_pat3.PointOfDefinition = pat_es_0_1;
			es_0_1_pat4.PointOfDefinition = pat_es_0_1;
			es_0_1_pat5.PointOfDefinition = pat_es_0_1;
			es_0_1_pat6.PointOfDefinition = pat_es_0_1;
			es_0_1_pat7.PointOfDefinition = pat_es_0_1;
			es_0_1_pat8.PointOfDefinition = pat_es_0_1;
			es_0_1_pat9.PointOfDefinition = pat_es_0_1;
			es_0_1_pat10.PointOfDefinition = pat_es_0_1;
			es_0_1_pat11.PointOfDefinition = pat_es_0_1;
			es_0_1_pat12.PointOfDefinition = pat_es_0_1;

			patternGraph = pat_es_0_1;
		}


		public void Modify(GRGEN_LGSP.LGSPActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatch _curMatch)
		{
			GRGEN_LGSP.LGSPGraph graph = actionEnv.graph;
			Match_es_0_1 curMatch = (Match_es_0_1)_curMatch;
			GRGEN_LGSP.LGSPNode node_v6 = curMatch._node_v6;
			GRGEN_LGSP.LGSPNode node_v7 = curMatch._node_v7;
			GRGEN_LGSP.LGSPNode node_v8 = curMatch._node_v8;
			GRGEN_LGSP.LGSPNode node_v9 = curMatch._node_v9;
			GRGEN_LGSP.LGSPNode node_v10 = curMatch._node_v10;
			GRGEN_LGSP.LGSPNode node_v12 = curMatch._node_v12;
			GRGEN_LGSP.LGSPNode node_v11 = curMatch._node_v11;
			GRGEN_LGSP.LGSPNode node_v14 = curMatch._node_v14;
			GRGEN_LGSP.LGSPNode node_v13 = curMatch._node_v13;
			GRGEN_LGSP.LGSPNode node_v0 = curMatch._node_v0;
			GRGEN_LGSP.LGSPNode node_v16 = curMatch._node_v16;
			GRGEN_LGSP.LGSPNode node_v1 = curMatch._node_v1;
			GRGEN_LGSP.LGSPNode node_v15 = curMatch._node_v15;
			GRGEN_LGSP.LGSPNode node_v2 = curMatch._node_v2;
			GRGEN_LGSP.LGSPNode node_v3 = curMatch._node_v3;
			GRGEN_LGSP.LGSPNode node_r0 = curMatch._node_r0;
			GRGEN_LGSP.LGSPNode node_v4 = curMatch._node_v4;
			GRGEN_LGSP.LGSPNode node_v5 = curMatch._node_v5;
			GRGEN_LGSP.LGSPNode node_v9_p0 = curMatch._node_v9_p0;
			GRGEN_LGSP.LGSPNode node_right = curMatch._node_right;
			GRGEN_LGSP.LGSPNode node_v1_p0 = curMatch._node_v1_p0;
			GRGEN_LGSP.LGSPNode node_v11_p0 = curMatch._node_v11_p0;
			GRGEN_LGSP.LGSPNode node_rn1 = curMatch._node_rn1;
			GRGEN_LGSP.LGSPNode node_v0_p0 = curMatch._node_v0_p0;
			GRGEN_LGSP.LGSPNode node_left = curMatch._node_left;
			GRGEN_LGSP.LGSPNode node_v3_p0 = curMatch._node_v3_p0;
			GRGEN_LGSP.LGSPNode node_rn0 = curMatch._node_rn0;
			GRGEN_LGSP.LGSPNode node_v7_p0 = curMatch._node_v7_p0;
			GRGEN_LGSP.LGSPNode node_v15_p0 = curMatch._node_v15_p0;
			GRGEN_LGSP.LGSPNode node_e0 = curMatch._node_e0;
			GRGEN_LGSP.LGSPEdge edge_c19 = curMatch._edge_c19;
			GRGEN_LGSP.LGSPEdge edge_c21 = curMatch._edge_c21;
			GRGEN_LGSP.LGSPEdge edge_c22 = curMatch._edge_c22;
			GRGEN_LGSP.LGSPEdge edge_c23 = curMatch._edge_c23;
			GRGEN_LGSP.LGSPEdge edge__edge0 = curMatch._edge__edge0;
			GRGEN_LGSP.LGSPEdge edge__edge1 = curMatch._edge__edge1;
			GRGEN_LGSP.LGSPEdge edge__edge2 = curMatch._edge__edge2;
			GRGEN_LGSP.LGSPEdge edge__edge3 = curMatch._edge__edge3;
			GRGEN_LGSP.LGSPEdge edge__edge4 = curMatch._edge__edge4;
			GRGEN_LGSP.LGSPEdge edge__edge5 = curMatch._edge__edge5;
			GRGEN_LGSP.LGSPEdge edge__edge6 = curMatch._edge__edge6;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat0 = curMatch.@_pat0;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat1 = curMatch.@_pat1;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat2 = curMatch.@_pat2;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat3 = curMatch.@_pat3;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat4 = curMatch.@_pat4;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat5 = curMatch.@_pat5;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat6 = curMatch.@_pat6;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat7 = curMatch.@_pat7;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat8 = curMatch.@_pat8;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat9 = curMatch.@_pat9;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat10 = curMatch.@_pat10;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat11 = curMatch.@_pat11;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat12 = curMatch.@_pat12;
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> var_allMatchedNodes = fill_anonymous_set_10545(((GRGEN_LIBGR.INode) node_v6), ((GRGEN_LIBGR.INode) node_v7), ((GRGEN_LIBGR.INode) node_v8), ((GRGEN_LIBGR.INode) node_v9), ((GRGEN_LIBGR.INode) node_v10), ((GRGEN_LIBGR.INode) node_v12), ((GRGEN_LIBGR.INode) node_v11), ((GRGEN_LIBGR.INode) node_v14), ((GRGEN_LIBGR.INode) node_v13), ((GRGEN_LIBGR.INode) node_v0), ((GRGEN_LIBGR.INode) node_v16), ((GRGEN_LIBGR.INode) node_v1), ((GRGEN_LIBGR.INode) node_v15), ((GRGEN_LIBGR.INode) node_v2), ((GRGEN_LIBGR.INode) node_v3), (GRGEN_LIBGR.INode)(node_r0), ((GRGEN_LIBGR.INode) node_v4), ((GRGEN_LIBGR.INode) node_v5));
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.INode> var_indexMap = fill_anonymous_map_10570(((GRGEN_LIBGR.INode) node_v9), ((GRGEN_LIBGR.INode) node_v9), ((GRGEN_LIBGR.INode) node_v11), ((GRGEN_LIBGR.INode) node_v11), ((GRGEN_LIBGR.INode) node_v0), ((GRGEN_LIBGR.INode) node_v0), ((GRGEN_LIBGR.INode) node_v3), ((GRGEN_LIBGR.INode) node_v3));
			Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.INode> var_tasks = fill_anonymous_map_10575();
			graph.SettingAddedNodeNames( es_0_1_addedNodeNames );
			graph.SettingAddedEdgeNames( es_0_1_addedEdgeNames );
			GRGEN_MODEL.@bLink edge__edge7 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v9_p0, node_right);
			GRGEN_MODEL.@bLink edge__edge8 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v1_p0, node_right);
			GRGEN_MODEL.@bLink edge__edge9 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v11_p0, node_rn1);
			GRGEN_MODEL.@bLink edge__edge10 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v0_p0, node_left);
			GRGEN_MODEL.@bLink edge__edge11 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v3_p0, node_rn0);
			{ // eval_0
				Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> var_nodesWithSites = (Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType>)(GRGEN_LIBGR.ContainerHelper.Domain(var_indexMap));
				foreach(KeyValuePair<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> entry_0 in var_nodesWithSites)
				{
					GRGEN_LIBGR.INode var_cur = (GRGEN_LIBGR.INode)entry_0.Key;
					object emit_value_1;
					emit_value_1 = var_cur;
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = "->";
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = (var_indexMap[var_cur]);
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = " ";
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = GRGEN_LIBGR.GraphHelper.CountAdjacentIncoming(graph, var_cur, GRGEN_MODEL.EdgeType_AEdge.typeVar, GRGEN_MODEL.NodeType_Node.typeVar);
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = "\n";
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					if(((var_indexMap[var_cur]) == null)) {
						object emit_value_2;
						emit_value_2 = "Remove everything because there is no site mapping for the reactum";
						if(emit_value_2 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_2, graph, false, null, null, null));
						emit_value_2 = GRGEN_LIBGR.GraphHelper.AdjacentIncoming(var_cur, GRGEN_MODEL.EdgeType_AEdge.typeVar, GRGEN_MODEL.NodeType_Node.typeVar);
						if(emit_value_2 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_2, graph, false, null, null, null));
						emit_value_2 = "\n";
						if(emit_value_2 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_2, graph, false, null, null, null));
						GRGEN_LIBGR.INode node_3 = var_cur;
						foreach(GRGEN_LIBGR.IEdge edge_3 in node_3.GetCompatibleIncoming(GRGEN_MODEL.EdgeType_AEdge.typeVar))
						{
							if(!edge_3.Source.InstanceOf(GRGEN_MODEL.NodeType_Node.typeVar))
								continue;
							GRGEN_LIBGR.INode var_x__INTERN = (GRGEN_LIBGR.INode)edge_3.Source;
							if((((GRGEN_LGSP.LGSPNode)var_x__INTERN).lgspType != GRGEN_MODEL.NodeType_BPort.typeVar)) {
								graph.RemoveEdges((GRGEN_LIBGR.INode)var_x__INTERN);
								graph.Remove((GRGEN_LIBGR.INode)var_x__INTERN);
							}
						}
						continue;
					}
					if((var_cur != (var_indexMap[var_cur]))) {
						object emit_value_4;
						emit_value_4 = "Site mappings are different! Size of children: ";
						if(emit_value_4 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_4, graph, false, null, null, null));
						emit_value_4 = (GRGEN_LIBGR.GraphHelper.AdjacentIncoming(var_cur, GRGEN_MODEL.EdgeType_AEdge.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count;
						if(emit_value_4 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_4, graph, false, null, null, null));
						emit_value_4 = "\n";
						if(emit_value_4 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_4, graph, false, null, null, null));
						GRGEN_LIBGR.INode node_5 = var_cur;
						foreach(GRGEN_LIBGR.IEdge edge_5 in node_5.GetCompatibleIncoming(GRGEN_MODEL.EdgeType_AEdge.typeVar))
						{
							if(!edge_5.Source.InstanceOf(GRGEN_MODEL.NodeType_Node.typeVar))
								continue;
							GRGEN_LIBGR.INode var_x__INTERN = (GRGEN_LIBGR.INode)edge_5.Source;
							if(((((GRGEN_LGSP.LGSPNode)var_x__INTERN).lgspType != GRGEN_MODEL.NodeType_BPort.typeVar) && (! var_allMatchedNodes.ContainsKey(var_x__INTERN)))) {
								object emit_value_6;
								emit_value_6 = "\tchild = ";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = var_x__INTERN;
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = " ";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = ((GRGEN_LGSP.LGSPNode)var_x__INTERN).lgspType;
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = " ";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = (var_indexMap[var_cur]);
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = " ";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = GRGEN_LIBGR.GraphHelper.Outgoing(var_x__INTERN, GRGEN_MODEL.EdgeType_AEdge.typeVar, GRGEN_MODEL.NodeType_Node.typeVar);
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = "\n";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								GRGEN_LIBGR.INode node_7 = var_x__INTERN;
								foreach(GRGEN_LIBGR.IEdge edge_7 in node_7.GetCompatibleOutgoing(GRGEN_MODEL.EdgeType_AEdge.typeVar))
								{
									if(!edge_7.Target.InstanceOf(GRGEN_MODEL.NodeType_Node.typeVar))
										continue;
									GRGEN_LIBGR.IDEdge var_y = (GRGEN_LIBGR.IDEdge)edge_7;
									if((((GRGEN_LGSP.LGSPEdge)var_y).lgspType == GRGEN_MODEL.EdgeType_bPrnt.typeVar)) {
										object emit_value_8;
										emit_value_8 = "\ty";
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = var_y;
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = " ";
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = ((GRGEN_LGSP.LGSPEdge)var_y).lgspType;
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = " ";
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = GRGEN_LIBGR.GraphHelper.Nameof(var_y, graph);
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = "\n";
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										var_tasks[var_y] = (var_indexMap[var_cur]);
									}
								}
							}
						}
					}
				}
				Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.SetValueType> var_keyset = (Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.SetValueType>)(GRGEN_LIBGR.ContainerHelper.Domain(var_tasks));
				foreach(KeyValuePair<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.SetValueType> entry_9 in var_keyset)
				{
					GRGEN_LIBGR.IDEdge var_k = (GRGEN_LIBGR.IDEdge)entry_9.Key;
					((GRGEN_LGSP.LGSPNamedGraph)graph).RedirectTarget((GRGEN_LIBGR.IEdge)var_k, (GRGEN_LIBGR.INode)(var_tasks[var_k]));
				}
			}
			graph.Remove(edge_c19);
			graph.Remove(edge_c21);
			graph.Remove(edge_c22);
			graph.Remove(edge_c23);
			graph.Remove(edge__edge0);
			graph.Remove(edge__edge1);
			graph.Remove(edge__edge2);
			graph.Remove(edge__edge3);
			graph.Remove(edge__edge4);
			graph.Remove(edge__edge5);
			graph.Remove(edge__edge6);
			graph.RemoveEdges(node_v7);
			graph.Remove(node_v7);
			graph.RemoveEdges(node_v15);
			graph.Remove(node_v15);
			graph.RemoveEdges(node_v7_p0);
			graph.Remove(node_v7_p0);
			graph.RemoveEdges(node_v15_p0);
			graph.Remove(node_v15_p0);
			graph.RemoveEdges(node_e0);
			graph.Remove(node_e0);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat0);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat1);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat2);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat3);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat4);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat5);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat6);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat7);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat8);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat9);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat10);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat11);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat12);
			actionEnv.SelectedMatchRewritten();
			return;
		}
		private static string[] es_0_1_addedNodeNames = new string[] {  };
		private static string[] es_0_1_addedEdgeNames = new string[] { "_edge7", "_edge8", "_edge9", "_edge10", "_edge11" };

		static Rule_es_0_1() {
		}

		public interface IMatch_es_0_1 : GRGEN_LIBGR.IMatch
		{
			//Nodes
			GRGEN_MODEL.ILocale node_v0 { get; set; }
			GRGEN_LIBGR.INode node_r0 { get; set; }
			GRGEN_MODEL.ILocale node_v9 { get; set; }
			GRGEN_MODEL.IBPort node_v0_p0 { get; set; }
			GRGEN_MODEL.IRoute node_v1 { get; set; }
			GRGEN_MODEL.IOccupiedBy node_v2 { get; set; }
			GRGEN_MODEL.IBPort node_v9_p0 { get; set; }
			GRGEN_MODEL.IOccupiedBy node_v10 { get; set; }
			GRGEN_MODEL.IBPort node_v1_p0 { get; set; }
			GRGEN_MODEL.IRobot node_v3 { get; set; }
			GRGEN_MODEL.IRobot node_v11 { get; set; }
			GRGEN_MODEL.IBPort node_v3_p0 { get; set; }
			GRGEN_MODEL.IID node_v4 { get; set; }
			GRGEN_MODEL.ISLck node_v6 { get; set; }
			GRGEN_MODEL.IMvmt node_v8 { get; set; }
			GRGEN_MODEL.IBPort node_v11_p0 { get; set; }
			GRGEN_MODEL.IID node_v12 { get; set; }
			GRGEN_MODEL.ISLck node_v14 { get; set; }
			GRGEN_MODEL.IMvmt node_v16 { get; set; }
			GRGEN_MODEL.IN0 node_v5 { get; set; }
			GRGEN_MODEL.ISLckRef node_v7 { get; set; }
			GRGEN_MODEL.IN1 node_v13 { get; set; }
			GRGEN_MODEL.ISLckRef node_v15 { get; set; }
			GRGEN_MODEL.IBPort node_v7_p0 { get; set; }
			GRGEN_MODEL.IBPort node_v15_p0 { get; set; }
			GRGEN_MODEL.IBLink node_left { get; set; }
			GRGEN_MODEL.IBLink node_rn0 { get; set; }
			GRGEN_MODEL.IBEdge node_e0 { get; set; }
			GRGEN_MODEL.IBLink node_right { get; set; }
			GRGEN_MODEL.IBLink node_rn1 { get; set; }
			//Edges
			GRGEN_MODEL.IbPrnt edge_c0 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c1 { get; set; }
			GRGEN_MODEL.IbNode edge_c2 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c3 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c4 { get; set; }
			GRGEN_MODEL.IbNode edge_c5 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c6 { get; set; }
			GRGEN_MODEL.IbNode edge_c7 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c8 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c9 { get; set; }
			GRGEN_MODEL.IbNode edge_c10 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c11 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c12 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c13 { get; set; }
			GRGEN_MODEL.IbNode edge_c14 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c15 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c16 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c17 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c18 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c19 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c20 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c21 { get; set; }
			GRGEN_MODEL.IbNode edge_c22 { get; set; }
			GRGEN_MODEL.IbNode edge_c23 { get; set; }
			GRGEN_MODEL.IbLink edge__edge0 { get; set; }
			GRGEN_MODEL.IbLink edge__edge1 { get; set; }
			GRGEN_MODEL.IbLink edge__edge2 { get; set; }
			GRGEN_MODEL.IbLink edge__edge3 { get; set; }
			GRGEN_MODEL.IbLink edge__edge4 { get; set; }
			GRGEN_MODEL.IbLink edge__edge5 { get; set; }
			GRGEN_MODEL.IbLink edge__edge6 { get; set; }
			//Variables
			//EmbeddedGraphs
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat0 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat1 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat2 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat3 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat4 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat5 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat6 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat7 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat8 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat9 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat10 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat11 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat12 { get; }
			//Alternatives
			//Iterateds
			//Independents
			// further match object stuff
			void SetMatchOfEnclosingPattern(GRGEN_LIBGR.IMatch matchOfEnclosingPattern);
		}

		public class Match_es_0_1 : GRGEN_LGSP.MatchListElement<Match_es_0_1>, IMatch_es_0_1
		{
			public GRGEN_MODEL.ILocale node_v0 { get { return (GRGEN_MODEL.ILocale)_node_v0; } set { _node_v0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_LIBGR.INode node_r0 { get { return (GRGEN_LIBGR.INode)_node_r0; } set { _node_r0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ILocale node_v9 { get { return (GRGEN_MODEL.ILocale)_node_v9; } set { _node_v9 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v0_p0 { get { return (GRGEN_MODEL.IBPort)_node_v0_p0; } set { _node_v0_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IRoute node_v1 { get { return (GRGEN_MODEL.IRoute)_node_v1; } set { _node_v1 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IOccupiedBy node_v2 { get { return (GRGEN_MODEL.IOccupiedBy)_node_v2; } set { _node_v2 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v9_p0 { get { return (GRGEN_MODEL.IBPort)_node_v9_p0; } set { _node_v9_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IOccupiedBy node_v10 { get { return (GRGEN_MODEL.IOccupiedBy)_node_v10; } set { _node_v10 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v1_p0 { get { return (GRGEN_MODEL.IBPort)_node_v1_p0; } set { _node_v1_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IRobot node_v3 { get { return (GRGEN_MODEL.IRobot)_node_v3; } set { _node_v3 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IRobot node_v11 { get { return (GRGEN_MODEL.IRobot)_node_v11; } set { _node_v11 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v3_p0 { get { return (GRGEN_MODEL.IBPort)_node_v3_p0; } set { _node_v3_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IID node_v4 { get { return (GRGEN_MODEL.IID)_node_v4; } set { _node_v4 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ISLck node_v6 { get { return (GRGEN_MODEL.ISLck)_node_v6; } set { _node_v6 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IMvmt node_v8 { get { return (GRGEN_MODEL.IMvmt)_node_v8; } set { _node_v8 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v11_p0 { get { return (GRGEN_MODEL.IBPort)_node_v11_p0; } set { _node_v11_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IID node_v12 { get { return (GRGEN_MODEL.IID)_node_v12; } set { _node_v12 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ISLck node_v14 { get { return (GRGEN_MODEL.ISLck)_node_v14; } set { _node_v14 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IMvmt node_v16 { get { return (GRGEN_MODEL.IMvmt)_node_v16; } set { _node_v16 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IN0 node_v5 { get { return (GRGEN_MODEL.IN0)_node_v5; } set { _node_v5 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ISLckRef node_v7 { get { return (GRGEN_MODEL.ISLckRef)_node_v7; } set { _node_v7 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IN1 node_v13 { get { return (GRGEN_MODEL.IN1)_node_v13; } set { _node_v13 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ISLckRef node_v15 { get { return (GRGEN_MODEL.ISLckRef)_node_v15; } set { _node_v15 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v7_p0 { get { return (GRGEN_MODEL.IBPort)_node_v7_p0; } set { _node_v7_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v15_p0 { get { return (GRGEN_MODEL.IBPort)_node_v15_p0; } set { _node_v15_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_left { get { return (GRGEN_MODEL.IBLink)_node_left; } set { _node_left = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_rn0 { get { return (GRGEN_MODEL.IBLink)_node_rn0; } set { _node_rn0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBEdge node_e0 { get { return (GRGEN_MODEL.IBEdge)_node_e0; } set { _node_e0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_right { get { return (GRGEN_MODEL.IBLink)_node_right; } set { _node_right = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_rn1 { get { return (GRGEN_MODEL.IBLink)_node_rn1; } set { _node_rn1 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_LGSP.LGSPNode _node_v0;
			public GRGEN_LGSP.LGSPNode _node_r0;
			public GRGEN_LGSP.LGSPNode _node_v9;
			public GRGEN_LGSP.LGSPNode _node_v0_p0;
			public GRGEN_LGSP.LGSPNode _node_v1;
			public GRGEN_LGSP.LGSPNode _node_v2;
			public GRGEN_LGSP.LGSPNode _node_v9_p0;
			public GRGEN_LGSP.LGSPNode _node_v10;
			public GRGEN_LGSP.LGSPNode _node_v1_p0;
			public GRGEN_LGSP.LGSPNode _node_v3;
			public GRGEN_LGSP.LGSPNode _node_v11;
			public GRGEN_LGSP.LGSPNode _node_v3_p0;
			public GRGEN_LGSP.LGSPNode _node_v4;
			public GRGEN_LGSP.LGSPNode _node_v6;
			public GRGEN_LGSP.LGSPNode _node_v8;
			public GRGEN_LGSP.LGSPNode _node_v11_p0;
			public GRGEN_LGSP.LGSPNode _node_v12;
			public GRGEN_LGSP.LGSPNode _node_v14;
			public GRGEN_LGSP.LGSPNode _node_v16;
			public GRGEN_LGSP.LGSPNode _node_v5;
			public GRGEN_LGSP.LGSPNode _node_v7;
			public GRGEN_LGSP.LGSPNode _node_v13;
			public GRGEN_LGSP.LGSPNode _node_v15;
			public GRGEN_LGSP.LGSPNode _node_v7_p0;
			public GRGEN_LGSP.LGSPNode _node_v15_p0;
			public GRGEN_LGSP.LGSPNode _node_left;
			public GRGEN_LGSP.LGSPNode _node_rn0;
			public GRGEN_LGSP.LGSPNode _node_e0;
			public GRGEN_LGSP.LGSPNode _node_right;
			public GRGEN_LGSP.LGSPNode _node_rn1;
			public enum es_0_1_NodeNums { @v0, @r0, @v9, @v0_p0, @v1, @v2, @v9_p0, @v10, @v1_p0, @v3, @v11, @v3_p0, @v4, @v6, @v8, @v11_p0, @v12, @v14, @v16, @v5, @v7, @v13, @v15, @v7_p0, @v15_p0, @left, @rn0, @e0, @right, @rn1, END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.INode> Nodes { get { return new GRGEN_LGSP.Nodes_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.INode> NodesEnumerator { get { return new GRGEN_LGSP.Nodes_Enumerator(this); } }
			public override int NumberOfNodes { get { return 30; } }
			public override GRGEN_LIBGR.INode getNodeAt(int index)
			{
				switch(index) {
				case (int)es_0_1_NodeNums.@v0: return _node_v0;
				case (int)es_0_1_NodeNums.@r0: return _node_r0;
				case (int)es_0_1_NodeNums.@v9: return _node_v9;
				case (int)es_0_1_NodeNums.@v0_p0: return _node_v0_p0;
				case (int)es_0_1_NodeNums.@v1: return _node_v1;
				case (int)es_0_1_NodeNums.@v2: return _node_v2;
				case (int)es_0_1_NodeNums.@v9_p0: return _node_v9_p0;
				case (int)es_0_1_NodeNums.@v10: return _node_v10;
				case (int)es_0_1_NodeNums.@v1_p0: return _node_v1_p0;
				case (int)es_0_1_NodeNums.@v3: return _node_v3;
				case (int)es_0_1_NodeNums.@v11: return _node_v11;
				case (int)es_0_1_NodeNums.@v3_p0: return _node_v3_p0;
				case (int)es_0_1_NodeNums.@v4: return _node_v4;
				case (int)es_0_1_NodeNums.@v6: return _node_v6;
				case (int)es_0_1_NodeNums.@v8: return _node_v8;
				case (int)es_0_1_NodeNums.@v11_p0: return _node_v11_p0;
				case (int)es_0_1_NodeNums.@v12: return _node_v12;
				case (int)es_0_1_NodeNums.@v14: return _node_v14;
				case (int)es_0_1_NodeNums.@v16: return _node_v16;
				case (int)es_0_1_NodeNums.@v5: return _node_v5;
				case (int)es_0_1_NodeNums.@v7: return _node_v7;
				case (int)es_0_1_NodeNums.@v13: return _node_v13;
				case (int)es_0_1_NodeNums.@v15: return _node_v15;
				case (int)es_0_1_NodeNums.@v7_p0: return _node_v7_p0;
				case (int)es_0_1_NodeNums.@v15_p0: return _node_v15_p0;
				case (int)es_0_1_NodeNums.@left: return _node_left;
				case (int)es_0_1_NodeNums.@rn0: return _node_rn0;
				case (int)es_0_1_NodeNums.@e0: return _node_e0;
				case (int)es_0_1_NodeNums.@right: return _node_right;
				case (int)es_0_1_NodeNums.@rn1: return _node_rn1;
				default: return null;
				}
			}
			public override GRGEN_LIBGR.INode getNode(string name)
			{
				switch(name) {
				case "v0": return _node_v0;
				case "r0": return _node_r0;
				case "v9": return _node_v9;
				case "v0_p0": return _node_v0_p0;
				case "v1": return _node_v1;
				case "v2": return _node_v2;
				case "v9_p0": return _node_v9_p0;
				case "v10": return _node_v10;
				case "v1_p0": return _node_v1_p0;
				case "v3": return _node_v3;
				case "v11": return _node_v11;
				case "v3_p0": return _node_v3_p0;
				case "v4": return _node_v4;
				case "v6": return _node_v6;
				case "v8": return _node_v8;
				case "v11_p0": return _node_v11_p0;
				case "v12": return _node_v12;
				case "v14": return _node_v14;
				case "v16": return _node_v16;
				case "v5": return _node_v5;
				case "v7": return _node_v7;
				case "v13": return _node_v13;
				case "v15": return _node_v15;
				case "v7_p0": return _node_v7_p0;
				case "v15_p0": return _node_v15_p0;
				case "left": return _node_left;
				case "rn0": return _node_rn0;
				case "e0": return _node_e0;
				case "right": return _node_right;
				case "rn1": return _node_rn1;
				default: return null;
				}
			}
			public override void SetNode(string name, GRGEN_LIBGR.INode value)
			{
				switch(name) {
				case "v0": _node_v0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "r0": _node_r0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v9": _node_v9 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v0_p0": _node_v0_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v1": _node_v1 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v2": _node_v2 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v9_p0": _node_v9_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v10": _node_v10 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v1_p0": _node_v1_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v3": _node_v3 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v11": _node_v11 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v3_p0": _node_v3_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v4": _node_v4 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v6": _node_v6 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v8": _node_v8 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v11_p0": _node_v11_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v12": _node_v12 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v14": _node_v14 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v16": _node_v16 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v5": _node_v5 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v7": _node_v7 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v13": _node_v13 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v15": _node_v15 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v7_p0": _node_v7_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v15_p0": _node_v15_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "left": _node_left = (GRGEN_LGSP.LGSPNode)value; break;
				case "rn0": _node_rn0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "e0": _node_e0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "right": _node_right = (GRGEN_LGSP.LGSPNode)value; break;
				case "rn1": _node_rn1 = (GRGEN_LGSP.LGSPNode)value; break;
				default: break;
				}
			}

			public GRGEN_MODEL.IbPrnt edge_c0 { get { return (GRGEN_MODEL.IbPrnt)_edge_c0; } set { _edge_c0 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c1 { get { return (GRGEN_MODEL.IbPrnt)_edge_c1; } set { _edge_c1 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c2 { get { return (GRGEN_MODEL.IbNode)_edge_c2; } set { _edge_c2 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c3 { get { return (GRGEN_MODEL.IbPrnt)_edge_c3; } set { _edge_c3 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c4 { get { return (GRGEN_MODEL.IbPrnt)_edge_c4; } set { _edge_c4 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c5 { get { return (GRGEN_MODEL.IbNode)_edge_c5; } set { _edge_c5 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c6 { get { return (GRGEN_MODEL.IbPrnt)_edge_c6; } set { _edge_c6 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c7 { get { return (GRGEN_MODEL.IbNode)_edge_c7; } set { _edge_c7 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c8 { get { return (GRGEN_MODEL.IbPrnt)_edge_c8; } set { _edge_c8 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c9 { get { return (GRGEN_MODEL.IbPrnt)_edge_c9; } set { _edge_c9 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c10 { get { return (GRGEN_MODEL.IbNode)_edge_c10; } set { _edge_c10 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c11 { get { return (GRGEN_MODEL.IbPrnt)_edge_c11; } set { _edge_c11 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c12 { get { return (GRGEN_MODEL.IbPrnt)_edge_c12; } set { _edge_c12 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c13 { get { return (GRGEN_MODEL.IbPrnt)_edge_c13; } set { _edge_c13 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c14 { get { return (GRGEN_MODEL.IbNode)_edge_c14; } set { _edge_c14 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c15 { get { return (GRGEN_MODEL.IbPrnt)_edge_c15; } set { _edge_c15 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c16 { get { return (GRGEN_MODEL.IbPrnt)_edge_c16; } set { _edge_c16 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c17 { get { return (GRGEN_MODEL.IbPrnt)_edge_c17; } set { _edge_c17 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c18 { get { return (GRGEN_MODEL.IbPrnt)_edge_c18; } set { _edge_c18 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c19 { get { return (GRGEN_MODEL.IbPrnt)_edge_c19; } set { _edge_c19 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c20 { get { return (GRGEN_MODEL.IbPrnt)_edge_c20; } set { _edge_c20 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c21 { get { return (GRGEN_MODEL.IbPrnt)_edge_c21; } set { _edge_c21 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c22 { get { return (GRGEN_MODEL.IbNode)_edge_c22; } set { _edge_c22 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c23 { get { return (GRGEN_MODEL.IbNode)_edge_c23; } set { _edge_c23 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge0 { get { return (GRGEN_MODEL.IbLink)_edge__edge0; } set { _edge__edge0 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge1 { get { return (GRGEN_MODEL.IbLink)_edge__edge1; } set { _edge__edge1 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge2 { get { return (GRGEN_MODEL.IbLink)_edge__edge2; } set { _edge__edge2 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge3 { get { return (GRGEN_MODEL.IbLink)_edge__edge3; } set { _edge__edge3 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge4 { get { return (GRGEN_MODEL.IbLink)_edge__edge4; } set { _edge__edge4 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge5 { get { return (GRGEN_MODEL.IbLink)_edge__edge5; } set { _edge__edge5 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge6 { get { return (GRGEN_MODEL.IbLink)_edge__edge6; } set { _edge__edge6 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_LGSP.LGSPEdge _edge_c0;
			public GRGEN_LGSP.LGSPEdge _edge_c1;
			public GRGEN_LGSP.LGSPEdge _edge_c2;
			public GRGEN_LGSP.LGSPEdge _edge_c3;
			public GRGEN_LGSP.LGSPEdge _edge_c4;
			public GRGEN_LGSP.LGSPEdge _edge_c5;
			public GRGEN_LGSP.LGSPEdge _edge_c6;
			public GRGEN_LGSP.LGSPEdge _edge_c7;
			public GRGEN_LGSP.LGSPEdge _edge_c8;
			public GRGEN_LGSP.LGSPEdge _edge_c9;
			public GRGEN_LGSP.LGSPEdge _edge_c10;
			public GRGEN_LGSP.LGSPEdge _edge_c11;
			public GRGEN_LGSP.LGSPEdge _edge_c12;
			public GRGEN_LGSP.LGSPEdge _edge_c13;
			public GRGEN_LGSP.LGSPEdge _edge_c14;
			public GRGEN_LGSP.LGSPEdge _edge_c15;
			public GRGEN_LGSP.LGSPEdge _edge_c16;
			public GRGEN_LGSP.LGSPEdge _edge_c17;
			public GRGEN_LGSP.LGSPEdge _edge_c18;
			public GRGEN_LGSP.LGSPEdge _edge_c19;
			public GRGEN_LGSP.LGSPEdge _edge_c20;
			public GRGEN_LGSP.LGSPEdge _edge_c21;
			public GRGEN_LGSP.LGSPEdge _edge_c22;
			public GRGEN_LGSP.LGSPEdge _edge_c23;
			public GRGEN_LGSP.LGSPEdge _edge__edge0;
			public GRGEN_LGSP.LGSPEdge _edge__edge1;
			public GRGEN_LGSP.LGSPEdge _edge__edge2;
			public GRGEN_LGSP.LGSPEdge _edge__edge3;
			public GRGEN_LGSP.LGSPEdge _edge__edge4;
			public GRGEN_LGSP.LGSPEdge _edge__edge5;
			public GRGEN_LGSP.LGSPEdge _edge__edge6;
			public enum es_0_1_EdgeNums { @c0, @c1, @c2, @c3, @c4, @c5, @c6, @c7, @c8, @c9, @c10, @c11, @c12, @c13, @c14, @c15, @c16, @c17, @c18, @c19, @c20, @c21, @c22, @c23, @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IEdge> Edges { get { return new GRGEN_LGSP.Edges_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IEdge> EdgesEnumerator { get { return new GRGEN_LGSP.Edges_Enumerator(this); } }
			public override int NumberOfEdges { get { return 31; } }
			public override GRGEN_LIBGR.IEdge getEdgeAt(int index)
			{
				switch(index) {
				case (int)es_0_1_EdgeNums.@c0: return _edge_c0;
				case (int)es_0_1_EdgeNums.@c1: return _edge_c1;
				case (int)es_0_1_EdgeNums.@c2: return _edge_c2;
				case (int)es_0_1_EdgeNums.@c3: return _edge_c3;
				case (int)es_0_1_EdgeNums.@c4: return _edge_c4;
				case (int)es_0_1_EdgeNums.@c5: return _edge_c5;
				case (int)es_0_1_EdgeNums.@c6: return _edge_c6;
				case (int)es_0_1_EdgeNums.@c7: return _edge_c7;
				case (int)es_0_1_EdgeNums.@c8: return _edge_c8;
				case (int)es_0_1_EdgeNums.@c9: return _edge_c9;
				case (int)es_0_1_EdgeNums.@c10: return _edge_c10;
				case (int)es_0_1_EdgeNums.@c11: return _edge_c11;
				case (int)es_0_1_EdgeNums.@c12: return _edge_c12;
				case (int)es_0_1_EdgeNums.@c13: return _edge_c13;
				case (int)es_0_1_EdgeNums.@c14: return _edge_c14;
				case (int)es_0_1_EdgeNums.@c15: return _edge_c15;
				case (int)es_0_1_EdgeNums.@c16: return _edge_c16;
				case (int)es_0_1_EdgeNums.@c17: return _edge_c17;
				case (int)es_0_1_EdgeNums.@c18: return _edge_c18;
				case (int)es_0_1_EdgeNums.@c19: return _edge_c19;
				case (int)es_0_1_EdgeNums.@c20: return _edge_c20;
				case (int)es_0_1_EdgeNums.@c21: return _edge_c21;
				case (int)es_0_1_EdgeNums.@c22: return _edge_c22;
				case (int)es_0_1_EdgeNums.@c23: return _edge_c23;
				case (int)es_0_1_EdgeNums.@_edge0: return _edge__edge0;
				case (int)es_0_1_EdgeNums.@_edge1: return _edge__edge1;
				case (int)es_0_1_EdgeNums.@_edge2: return _edge__edge2;
				case (int)es_0_1_EdgeNums.@_edge3: return _edge__edge3;
				case (int)es_0_1_EdgeNums.@_edge4: return _edge__edge4;
				case (int)es_0_1_EdgeNums.@_edge5: return _edge__edge5;
				case (int)es_0_1_EdgeNums.@_edge6: return _edge__edge6;
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IEdge getEdge(string name)
			{
				switch(name) {
				case "c0": return _edge_c0;
				case "c1": return _edge_c1;
				case "c2": return _edge_c2;
				case "c3": return _edge_c3;
				case "c4": return _edge_c4;
				case "c5": return _edge_c5;
				case "c6": return _edge_c6;
				case "c7": return _edge_c7;
				case "c8": return _edge_c8;
				case "c9": return _edge_c9;
				case "c10": return _edge_c10;
				case "c11": return _edge_c11;
				case "c12": return _edge_c12;
				case "c13": return _edge_c13;
				case "c14": return _edge_c14;
				case "c15": return _edge_c15;
				case "c16": return _edge_c16;
				case "c17": return _edge_c17;
				case "c18": return _edge_c18;
				case "c19": return _edge_c19;
				case "c20": return _edge_c20;
				case "c21": return _edge_c21;
				case "c22": return _edge_c22;
				case "c23": return _edge_c23;
				case "_edge0": return _edge__edge0;
				case "_edge1": return _edge__edge1;
				case "_edge2": return _edge__edge2;
				case "_edge3": return _edge__edge3;
				case "_edge4": return _edge__edge4;
				case "_edge5": return _edge__edge5;
				case "_edge6": return _edge__edge6;
				default: return null;
				}
			}
			public override void SetEdge(string name, GRGEN_LIBGR.IEdge value)
			{
				switch(name) {
				case "c0": _edge_c0 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c1": _edge_c1 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c2": _edge_c2 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c3": _edge_c3 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c4": _edge_c4 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c5": _edge_c5 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c6": _edge_c6 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c7": _edge_c7 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c8": _edge_c8 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c9": _edge_c9 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c10": _edge_c10 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c11": _edge_c11 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c12": _edge_c12 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c13": _edge_c13 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c14": _edge_c14 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c15": _edge_c15 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c16": _edge_c16 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c17": _edge_c17 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c18": _edge_c18 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c19": _edge_c19 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c20": _edge_c20 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c21": _edge_c21 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c22": _edge_c22 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c23": _edge_c23 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge0": _edge__edge0 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge1": _edge__edge1 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge2": _edge__edge2 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge3": _edge__edge3 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge4": _edge__edge4 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge5": _edge__edge5 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge6": _edge__edge6 = (GRGEN_LGSP.LGSPEdge)value; break;
				default: break;
				}
			}

			public enum es_0_1_VariableNums { END_OF_ENUM };
			public override IEnumerable<object> Variables { get { return new GRGEN_LGSP.Variables_Enumerable(this); } }
			public override IEnumerator<object> VariablesEnumerator { get { return new GRGEN_LGSP.Variables_Enumerator(this); } }
			public override int NumberOfVariables { get { return 0; } }
			public override object getVariableAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override object getVariable(string name)
			{
				switch(name) {
				default: return null;
				}
			}
			public override void SetVariable(string name, object value)
			{
				switch(name) {
				default: break;
				}
			}

			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat0 { get { return @_pat0; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat1 { get { return @_pat1; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat2 { get { return @_pat2; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat3 { get { return @_pat3; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat4 { get { return @_pat4; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat5 { get { return @_pat5; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat6 { get { return @_pat6; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat7 { get { return @_pat7; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat8 { get { return @_pat8; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat9 { get { return @_pat9; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat10 { get { return @_pat10; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat11 { get { return @_pat11; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat12 { get { return @_pat12; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat0;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat1;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat2;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat3;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat4;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat5;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat6;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat7;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat8;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat9;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat10;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat11;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat12;
			public enum es_0_1_SubNums { @pat0, @pat1, @pat2, @pat3, @pat4, @pat5, @pat6, @pat7, @pat8, @pat9, @pat10, @pat11, @pat12, END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> EmbeddedGraphs { get { return new GRGEN_LGSP.EmbeddedGraphs_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> EmbeddedGraphsEnumerator { get { return new GRGEN_LGSP.EmbeddedGraphs_Enumerator(this); } }
			public override int NumberOfEmbeddedGraphs { get { return 13; } }
			public override GRGEN_LIBGR.IMatch getEmbeddedGraphAt(int index)
			{
				switch(index) {
				case (int)es_0_1_SubNums.@pat0: return _pat0;
				case (int)es_0_1_SubNums.@pat1: return _pat1;
				case (int)es_0_1_SubNums.@pat2: return _pat2;
				case (int)es_0_1_SubNums.@pat3: return _pat3;
				case (int)es_0_1_SubNums.@pat4: return _pat4;
				case (int)es_0_1_SubNums.@pat5: return _pat5;
				case (int)es_0_1_SubNums.@pat6: return _pat6;
				case (int)es_0_1_SubNums.@pat7: return _pat7;
				case (int)es_0_1_SubNums.@pat8: return _pat8;
				case (int)es_0_1_SubNums.@pat9: return _pat9;
				case (int)es_0_1_SubNums.@pat10: return _pat10;
				case (int)es_0_1_SubNums.@pat11: return _pat11;
				case (int)es_0_1_SubNums.@pat12: return _pat12;
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getEmbeddedGraph(string name)
			{
				switch(name) {
				case "pat0": return _pat0;
				case "pat1": return _pat1;
				case "pat2": return _pat2;
				case "pat3": return _pat3;
				case "pat4": return _pat4;
				case "pat5": return _pat5;
				case "pat6": return _pat6;
				case "pat7": return _pat7;
				case "pat8": return _pat8;
				case "pat9": return _pat9;
				case "pat10": return _pat10;
				case "pat11": return _pat11;
				case "pat12": return _pat12;
				default: return null;
				}
			}

			public enum es_0_1_AltNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> Alternatives { get { return new GRGEN_LGSP.Alternatives_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> AlternativesEnumerator { get { return new GRGEN_LGSP.Alternatives_Enumerator(this); } }
			public override int NumberOfAlternatives { get { return 0; } }
			public override GRGEN_LIBGR.IMatch getAlternativeAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getAlternative(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public enum es_0_1_IterNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatches> Iterateds { get { return new GRGEN_LGSP.Iterateds_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatches> IteratedsEnumerator { get { return new GRGEN_LGSP.Iterateds_Enumerator(this); } }
			public override int NumberOfIterateds { get { return 0; } }
			public override GRGEN_LIBGR.IMatches getIteratedAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatches getIterated(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public enum es_0_1_IdptNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> Independents { get { return new GRGEN_LGSP.Independents_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> IndependentsEnumerator { get { return new GRGEN_LGSP.Independents_Enumerator(this); } }
			public override int NumberOfIndependents { get { return 0; } }
			public override GRGEN_LIBGR.IMatch getIndependentAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getIndependent(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public override GRGEN_LIBGR.IPatternGraph Pattern { get { return Rule_es_0_1.instance.pat_es_0_1; } }
			public override GRGEN_LIBGR.IMatchClass MatchClass { get { return null; } }
			public override GRGEN_LIBGR.IMatch Clone() { return new Match_es_0_1(this); }
			public override GRGEN_LIBGR.IMatch Clone(IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap) { return new Match_es_0_1(this, oldToNewMap); }
			public void SetMatchOfEnclosingPattern(GRGEN_LIBGR.IMatch matchOfEnclosingPattern) { _matchOfEnclosingPattern = matchOfEnclosingPattern; }
			public Match_es_0_1 nextWithSameHash;
			public void CleanNextWithSameHash() {
				Match_es_0_1 cur = this;
				while(cur != null) {
					Match_es_0_1 next = cur.nextWithSameHash;
					cur.nextWithSameHash = null;
					cur = next;
				}
			}

			public void AssignContent(Match_es_0_1 that)
			{
				_node_v0 = that._node_v0;
				_node_r0 = that._node_r0;
				_node_v9 = that._node_v9;
				_node_v0_p0 = that._node_v0_p0;
				_node_v1 = that._node_v1;
				_node_v2 = that._node_v2;
				_node_v9_p0 = that._node_v9_p0;
				_node_v10 = that._node_v10;
				_node_v1_p0 = that._node_v1_p0;
				_node_v3 = that._node_v3;
				_node_v11 = that._node_v11;
				_node_v3_p0 = that._node_v3_p0;
				_node_v4 = that._node_v4;
				_node_v6 = that._node_v6;
				_node_v8 = that._node_v8;
				_node_v11_p0 = that._node_v11_p0;
				_node_v12 = that._node_v12;
				_node_v14 = that._node_v14;
				_node_v16 = that._node_v16;
				_node_v5 = that._node_v5;
				_node_v7 = that._node_v7;
				_node_v13 = that._node_v13;
				_node_v15 = that._node_v15;
				_node_v7_p0 = that._node_v7_p0;
				_node_v15_p0 = that._node_v15_p0;
				_node_left = that._node_left;
				_node_rn0 = that._node_rn0;
				_node_e0 = that._node_e0;
				_node_right = that._node_right;
				_node_rn1 = that._node_rn1;
				_edge_c0 = that._edge_c0;
				_edge_c1 = that._edge_c1;
				_edge_c2 = that._edge_c2;
				_edge_c3 = that._edge_c3;
				_edge_c4 = that._edge_c4;
				_edge_c5 = that._edge_c5;
				_edge_c6 = that._edge_c6;
				_edge_c7 = that._edge_c7;
				_edge_c8 = that._edge_c8;
				_edge_c9 = that._edge_c9;
				_edge_c10 = that._edge_c10;
				_edge_c11 = that._edge_c11;
				_edge_c12 = that._edge_c12;
				_edge_c13 = that._edge_c13;
				_edge_c14 = that._edge_c14;
				_edge_c15 = that._edge_c15;
				_edge_c16 = that._edge_c16;
				_edge_c17 = that._edge_c17;
				_edge_c18 = that._edge_c18;
				_edge_c19 = that._edge_c19;
				_edge_c20 = that._edge_c20;
				_edge_c21 = that._edge_c21;
				_edge_c22 = that._edge_c22;
				_edge_c23 = that._edge_c23;
				_edge__edge0 = that._edge__edge0;
				_edge__edge1 = that._edge__edge1;
				_edge__edge2 = that._edge__edge2;
				_edge__edge3 = that._edge__edge3;
				_edge__edge4 = that._edge__edge4;
				_edge__edge5 = that._edge__edge5;
				_edge__edge6 = that._edge__edge6;
				@_pat0 = that.@_pat0;
				@_pat1 = that.@_pat1;
				@_pat2 = that.@_pat2;
				@_pat3 = that.@_pat3;
				@_pat4 = that.@_pat4;
				@_pat5 = that.@_pat5;
				@_pat6 = that.@_pat6;
				@_pat7 = that.@_pat7;
				@_pat8 = that.@_pat8;
				@_pat9 = that.@_pat9;
				@_pat10 = that.@_pat10;
				@_pat11 = that.@_pat11;
				@_pat12 = that.@_pat12;
			}

			public Match_es_0_1(Match_es_0_1 that)
			{
				AssignContent(that);
			}
			public void AssignContent(Match_es_0_1 that, IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap)
			{
				_node_v0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v0];
				_node_r0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_r0];
				_node_v9 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v9];
				_node_v0_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v0_p0];
				_node_v1 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v1];
				_node_v2 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v2];
				_node_v9_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v9_p0];
				_node_v10 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v10];
				_node_v1_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v1_p0];
				_node_v3 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v3];
				_node_v11 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v11];
				_node_v3_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v3_p0];
				_node_v4 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v4];
				_node_v6 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v6];
				_node_v8 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v8];
				_node_v11_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v11_p0];
				_node_v12 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v12];
				_node_v14 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v14];
				_node_v16 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v16];
				_node_v5 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v5];
				_node_v7 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v7];
				_node_v13 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v13];
				_node_v15 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v15];
				_node_v7_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v7_p0];
				_node_v15_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v15_p0];
				_node_left = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_left];
				_node_rn0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_rn0];
				_node_e0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_e0];
				_node_right = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_right];
				_node_rn1 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_rn1];
				_edge_c0 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c0];
				_edge_c1 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c1];
				_edge_c2 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c2];
				_edge_c3 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c3];
				_edge_c4 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c4];
				_edge_c5 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c5];
				_edge_c6 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c6];
				_edge_c7 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c7];
				_edge_c8 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c8];
				_edge_c9 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c9];
				_edge_c10 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c10];
				_edge_c11 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c11];
				_edge_c12 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c12];
				_edge_c13 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c13];
				_edge_c14 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c14];
				_edge_c15 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c15];
				_edge_c16 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c16];
				_edge_c17 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c17];
				_edge_c18 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c18];
				_edge_c19 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c19];
				_edge_c20 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c20];
				_edge_c21 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c21];
				_edge_c22 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c22];
				_edge_c23 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c23];
				_edge__edge0 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge0];
				_edge__edge1 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge1];
				_edge__edge2 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge2];
				_edge__edge3 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge3];
				_edge__edge4 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge4];
				_edge__edge5 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge5];
				_edge__edge6 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge6];
				@_pat0 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat0, oldToNewMap);
				@_pat1 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat1, oldToNewMap);
				@_pat2 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat2, oldToNewMap);
				@_pat3 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat3, oldToNewMap);
				@_pat4 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat4, oldToNewMap);
				@_pat5 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat5, oldToNewMap);
				@_pat6 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat6, oldToNewMap);
				@_pat7 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat7, oldToNewMap);
				@_pat8 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat8, oldToNewMap);
				@_pat9 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat9, oldToNewMap);
				@_pat10 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat10, oldToNewMap);
				@_pat11 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat11, oldToNewMap);
				@_pat12 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat12, oldToNewMap);
			}

			public Match_es_0_1(Match_es_0_1 that, IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap)
			{
				AssignContent(that, oldToNewMap);
			}
			public Match_es_0_1()
			{
			}

			public bool IsEqual(Match_es_0_1 that)
			{
				if(that==null) return false;
				if(_node_v0 != that._node_v0) return false;
				if(_node_r0 != that._node_r0) return false;
				if(_node_v9 != that._node_v9) return false;
				if(_node_v0_p0 != that._node_v0_p0) return false;
				if(_node_v1 != that._node_v1) return false;
				if(_node_v2 != that._node_v2) return false;
				if(_node_v9_p0 != that._node_v9_p0) return false;
				if(_node_v10 != that._node_v10) return false;
				if(_node_v1_p0 != that._node_v1_p0) return false;
				if(_node_v3 != that._node_v3) return false;
				if(_node_v11 != that._node_v11) return false;
				if(_node_v3_p0 != that._node_v3_p0) return false;
				if(_node_v4 != that._node_v4) return false;
				if(_node_v6 != that._node_v6) return false;
				if(_node_v8 != that._node_v8) return false;
				if(_node_v11_p0 != that._node_v11_p0) return false;
				if(_node_v12 != that._node_v12) return false;
				if(_node_v14 != that._node_v14) return false;
				if(_node_v16 != that._node_v16) return false;
				if(_node_v5 != that._node_v5) return false;
				if(_node_v7 != that._node_v7) return false;
				if(_node_v13 != that._node_v13) return false;
				if(_node_v15 != that._node_v15) return false;
				if(_node_v7_p0 != that._node_v7_p0) return false;
				if(_node_v15_p0 != that._node_v15_p0) return false;
				if(_node_left != that._node_left) return false;
				if(_node_rn0 != that._node_rn0) return false;
				if(_node_e0 != that._node_e0) return false;
				if(_node_right != that._node_right) return false;
				if(_node_rn1 != that._node_rn1) return false;
				if(_edge_c0 != that._edge_c0) return false;
				if(_edge_c1 != that._edge_c1) return false;
				if(_edge_c2 != that._edge_c2) return false;
				if(_edge_c3 != that._edge_c3) return false;
				if(_edge_c4 != that._edge_c4) return false;
				if(_edge_c5 != that._edge_c5) return false;
				if(_edge_c6 != that._edge_c6) return false;
				if(_edge_c7 != that._edge_c7) return false;
				if(_edge_c8 != that._edge_c8) return false;
				if(_edge_c9 != that._edge_c9) return false;
				if(_edge_c10 != that._edge_c10) return false;
				if(_edge_c11 != that._edge_c11) return false;
				if(_edge_c12 != that._edge_c12) return false;
				if(_edge_c13 != that._edge_c13) return false;
				if(_edge_c14 != that._edge_c14) return false;
				if(_edge_c15 != that._edge_c15) return false;
				if(_edge_c16 != that._edge_c16) return false;
				if(_edge_c17 != that._edge_c17) return false;
				if(_edge_c18 != that._edge_c18) return false;
				if(_edge_c19 != that._edge_c19) return false;
				if(_edge_c20 != that._edge_c20) return false;
				if(_edge_c21 != that._edge_c21) return false;
				if(_edge_c22 != that._edge_c22) return false;
				if(_edge_c23 != that._edge_c23) return false;
				if(_edge__edge0 != that._edge__edge0) return false;
				if(_edge__edge1 != that._edge__edge1) return false;
				if(_edge__edge2 != that._edge__edge2) return false;
				if(_edge__edge3 != that._edge__edge3) return false;
				if(_edge__edge4 != that._edge__edge4) return false;
				if(_edge__edge5 != that._edge__edge5) return false;
				if(_edge__edge6 != that._edge__edge6) return false;
				if(!@_pat0.IsEqual(that.@_pat0)) return false;
				if(!@_pat1.IsEqual(that.@_pat1)) return false;
				if(!@_pat2.IsEqual(that.@_pat2)) return false;
				if(!@_pat3.IsEqual(that.@_pat3)) return false;
				if(!@_pat4.IsEqual(that.@_pat4)) return false;
				if(!@_pat5.IsEqual(that.@_pat5)) return false;
				if(!@_pat6.IsEqual(that.@_pat6)) return false;
				if(!@_pat7.IsEqual(that.@_pat7)) return false;
				if(!@_pat8.IsEqual(that.@_pat8)) return false;
				if(!@_pat9.IsEqual(that.@_pat9)) return false;
				if(!@_pat10.IsEqual(that.@_pat10)) return false;
				if(!@_pat11.IsEqual(that.@_pat11)) return false;
				if(!@_pat12.IsEqual(that.@_pat12)) return false;
				return true;
			}
		}


		public class Extractor
		{
			public static List<GRGEN_MODEL.ILocale> Extract_v0(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.ILocale> resultList = new List<GRGEN_MODEL.ILocale>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v0);
				return resultList;
			}
			public static List<GRGEN_LIBGR.INode> Extract_r0(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_LIBGR.INode> resultList = new List<GRGEN_LIBGR.INode>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_r0);
				return resultList;
			}
			public static List<GRGEN_MODEL.ILocale> Extract_v9(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.ILocale> resultList = new List<GRGEN_MODEL.ILocale>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v9);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v0_p0(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v0_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IRoute> Extract_v1(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IRoute> resultList = new List<GRGEN_MODEL.IRoute>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v1);
				return resultList;
			}
			public static List<GRGEN_MODEL.IOccupiedBy> Extract_v2(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IOccupiedBy> resultList = new List<GRGEN_MODEL.IOccupiedBy>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v2);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v9_p0(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v9_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IOccupiedBy> Extract_v10(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IOccupiedBy> resultList = new List<GRGEN_MODEL.IOccupiedBy>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v10);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v1_p0(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v1_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IRobot> Extract_v3(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IRobot> resultList = new List<GRGEN_MODEL.IRobot>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v3);
				return resultList;
			}
			public static List<GRGEN_MODEL.IRobot> Extract_v11(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IRobot> resultList = new List<GRGEN_MODEL.IRobot>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v11);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v3_p0(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v3_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IID> Extract_v4(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IID> resultList = new List<GRGEN_MODEL.IID>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v4);
				return resultList;
			}
			public static List<GRGEN_MODEL.ISLck> Extract_v6(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.ISLck> resultList = new List<GRGEN_MODEL.ISLck>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v6);
				return resultList;
			}
			public static List<GRGEN_MODEL.IMvmt> Extract_v8(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IMvmt> resultList = new List<GRGEN_MODEL.IMvmt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v8);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v11_p0(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v11_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IID> Extract_v12(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IID> resultList = new List<GRGEN_MODEL.IID>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v12);
				return resultList;
			}
			public static List<GRGEN_MODEL.ISLck> Extract_v14(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.ISLck> resultList = new List<GRGEN_MODEL.ISLck>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v14);
				return resultList;
			}
			public static List<GRGEN_MODEL.IMvmt> Extract_v16(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IMvmt> resultList = new List<GRGEN_MODEL.IMvmt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v16);
				return resultList;
			}
			public static List<GRGEN_MODEL.IN0> Extract_v5(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IN0> resultList = new List<GRGEN_MODEL.IN0>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v5);
				return resultList;
			}
			public static List<GRGEN_MODEL.ISLckRef> Extract_v7(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.ISLckRef> resultList = new List<GRGEN_MODEL.ISLckRef>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v7);
				return resultList;
			}
			public static List<GRGEN_MODEL.IN1> Extract_v13(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IN1> resultList = new List<GRGEN_MODEL.IN1>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v13);
				return resultList;
			}
			public static List<GRGEN_MODEL.ISLckRef> Extract_v15(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.ISLckRef> resultList = new List<GRGEN_MODEL.ISLckRef>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v15);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v7_p0(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v7_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v15_p0(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_v15_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_left(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_left);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_rn0(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_rn0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBEdge> Extract_e0(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IBEdge> resultList = new List<GRGEN_MODEL.IBEdge>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_e0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_right(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_right);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_rn1(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.node_rn1);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c0(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c1(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c1);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c2(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c2);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c3(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c3);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c4(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c4);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c5(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c5);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c6(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c6);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c7(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c7);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c8(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c8);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c9(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c9);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c10(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c10);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c11(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c11);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c12(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c12);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c13(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c13);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c14(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c14);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c15(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c15);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c16(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c16);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c17(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c17);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c18(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c18);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c19(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c19);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c20(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c20);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c21(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c21);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c22(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c22);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c23(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge_c23);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge0(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge__edge0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge1(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge__edge1);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge2(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge__edge2);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge3(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge__edge3);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge4(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge__edge4);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge5(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge__edge5);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge6(List<IMatch_es_0_1> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_es_0_1 match in matchList)
					resultList.Add(match.edge__edge6);
				return resultList;
			}
		}


		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> ConvertAsNeeded(object parameter)
		{
			if(parameter is List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>)
				return ((List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>)parameter);
			else
				return GRGEN_LIBGR.MatchListHelper.ToList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>((IList<GRGEN_LIBGR.IMatch>)parameter);
		}
	}

	
	public partial class ArrayHelper
	{
		private static GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 instanceBearingAttributeForSearch_es_0_1 = new GRGEN_ACTIONS.Rule_es_0_1.Match_es_0_1();
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v0)) {
					seenValues[list[pos].@node_v0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v0, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_r0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_LIBGR.INode, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_LIBGR.INode, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_r0)) {
					seenValues[list[pos].@node_r0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_r0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_r0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_r0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_r0, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_r0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_LIBGR.INode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_r0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_r0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_LIBGR.INode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_r0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_r0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_LIBGR.INode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_r0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_r0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_LIBGR.INode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_r0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v9(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v9)) {
					seenValues[list[pos].@node_v9].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v9, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v9(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v9)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v9, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v9(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v9(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v9(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v9(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v9.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v0_p0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v0_p0)) {
					seenValues[list[pos].@node_v0_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v0_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v0_p0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v0_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v0_p0, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v0_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v0_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v0_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v0_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v0_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v0_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v0_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v0_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v1(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IRoute, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IRoute, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v1)) {
					seenValues[list[pos].@node_v1].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v1, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v1(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IRoute, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IRoute, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v1)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v1, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v1(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IRoute entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v1(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IRoute entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v1(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IRoute entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v1(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IRoute entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v1.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v2(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v2)) {
					seenValues[list[pos].@node_v2].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v2, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v2(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v2)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v2, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v2(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v2(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v2(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v2(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v2.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v9_p0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v9_p0)) {
					seenValues[list[pos].@node_v9_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v9_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v9_p0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v9_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v9_p0, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v9_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v9_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v9_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v9_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v9_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v9_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v9_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v9_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v10(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v10)) {
					seenValues[list[pos].@node_v10].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v10, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v10(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v10)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v10, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v10(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v10(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v10(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v10(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v10.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v1_p0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v1_p0)) {
					seenValues[list[pos].@node_v1_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v1_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v1_p0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v1_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v1_p0, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v1_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v1_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v1_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v1_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v1_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v1_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v1_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v1_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v3(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IRobot, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IRobot, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v3)) {
					seenValues[list[pos].@node_v3].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v3, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v3(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IRobot, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IRobot, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v3)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v3, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v3(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IRobot entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v3(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IRobot entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v3(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IRobot entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v3(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IRobot entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v3.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v11(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IRobot, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IRobot, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v11)) {
					seenValues[list[pos].@node_v11].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v11, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v11(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IRobot, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IRobot, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v11)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v11, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v11(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IRobot entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v11(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IRobot entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v11(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IRobot entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v11(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IRobot entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v11.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v3_p0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v3_p0)) {
					seenValues[list[pos].@node_v3_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v3_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v3_p0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v3_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v3_p0, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v3_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v3_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v3_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v3_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v3_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v3_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v3_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v3_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v4(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IID, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IID, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v4)) {
					seenValues[list[pos].@node_v4].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v4, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v4(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IID, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IID, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v4)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v4, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v4(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IID entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v4(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IID entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v4(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IID entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v4(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IID entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v4.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v6(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.ISLck, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.ISLck, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v6)) {
					seenValues[list[pos].@node_v6].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v6, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v6(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.ISLck, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ISLck, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v6)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v6, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v6(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ISLck entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v6(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ISLck entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v6(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ISLck entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v6(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ISLck entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v6.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v8(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IMvmt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IMvmt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v8)) {
					seenValues[list[pos].@node_v8].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v8, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v8(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IMvmt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IMvmt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v8)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v8, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v8(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IMvmt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v8(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IMvmt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v8(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IMvmt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v8(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IMvmt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v8.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v11_p0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v11_p0)) {
					seenValues[list[pos].@node_v11_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v11_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v11_p0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v11_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v11_p0, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v11_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v11_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v11_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v11_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v11_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v11_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v11_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v11_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v12(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IID, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IID, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v12)) {
					seenValues[list[pos].@node_v12].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v12, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v12(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IID, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IID, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v12)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v12, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v12(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IID entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v12(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IID entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v12(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IID entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v12(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IID entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v12.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v14(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.ISLck, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.ISLck, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v14)) {
					seenValues[list[pos].@node_v14].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v14, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v14(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.ISLck, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ISLck, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v14)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v14, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v14(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ISLck entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v14(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ISLck entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v14(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ISLck entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v14(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ISLck entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v14.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v16(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IMvmt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IMvmt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v16)) {
					seenValues[list[pos].@node_v16].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v16, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v16(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IMvmt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IMvmt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v16)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v16, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v16(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IMvmt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v16(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IMvmt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v16(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IMvmt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v16(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IMvmt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v16.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v5(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IN0, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IN0, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v5)) {
					seenValues[list[pos].@node_v5].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v5, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v5(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IN0, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IN0, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v5)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v5, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v5(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IN0 entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v5(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IN0 entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v5(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IN0 entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v5(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IN0 entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v5.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v7(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.ISLckRef, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.ISLckRef, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v7)) {
					seenValues[list[pos].@node_v7].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v7, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v7(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.ISLckRef, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ISLckRef, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v7)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v7, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v7(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ISLckRef entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v7(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ISLckRef entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v7(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ISLckRef entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v7(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ISLckRef entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v7.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v13(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IN1, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IN1, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v13)) {
					seenValues[list[pos].@node_v13].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v13, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v13(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IN1, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IN1, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v13)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v13, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v13(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IN1 entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v13(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IN1 entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v13(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IN1 entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v13(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IN1 entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v13.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v15(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.ISLckRef, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.ISLckRef, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v15)) {
					seenValues[list[pos].@node_v15].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v15, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v15(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.ISLckRef, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ISLckRef, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v15)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v15, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v15(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ISLckRef entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v15(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ISLckRef entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v15(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ISLckRef entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v15(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.ISLckRef entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v15.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v7_p0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v7_p0)) {
					seenValues[list[pos].@node_v7_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v7_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v7_p0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v7_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v7_p0, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v7_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v7_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v7_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v7_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v7_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v7_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v7_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v7_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_v15_p0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v15_p0)) {
					seenValues[list[pos].@node_v15_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v15_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_v15_p0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v15_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v15_p0, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_v15_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v15_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_v15_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v15_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v15_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v15_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_v15_p0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v15_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_left(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_left)) {
					seenValues[list[pos].@node_left].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_left, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_left(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_left)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_left, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_left(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_left.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_left(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_left.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_left(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_left.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_left(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_left.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_rn0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_rn0)) {
					seenValues[list[pos].@node_rn0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_rn0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_rn0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_rn0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_rn0, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_rn0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_rn0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_rn0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_rn0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_rn0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_rn0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_rn0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_rn0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_e0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IBEdge, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IBEdge, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_e0)) {
					seenValues[list[pos].@node_e0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_e0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_e0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IBEdge, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBEdge, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_e0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_e0, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_e0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBEdge entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_e0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_e0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBEdge entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_e0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_e0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBEdge entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_e0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_e0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBEdge entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_e0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_right(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_right)) {
					seenValues[list[pos].@node_right].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_right, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_right(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_right)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_right, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_right(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_right.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_right(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_right.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_right(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_right.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_right(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_right.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_rn1(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_rn1)) {
					seenValues[list[pos].@node_rn1].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_rn1, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_rn1(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_rn1)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_rn1, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_rn1(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_rn1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_rn1(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_rn1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_rn1(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_rn1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_rn1(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_rn1.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c0)) {
					seenValues[list[pos].@edge_c0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c0, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c1(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c1)) {
					seenValues[list[pos].@edge_c1].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c1, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c1(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c1)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c1, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c1(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c1(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c1(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c1(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c1.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c2(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c2)) {
					seenValues[list[pos].@edge_c2].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c2, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c2(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c2)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c2, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c2(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c2(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c2(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c2(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c2.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c3(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c3)) {
					seenValues[list[pos].@edge_c3].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c3, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c3(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c3)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c3, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c3(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c3(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c3(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c3(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c3.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c4(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c4)) {
					seenValues[list[pos].@edge_c4].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c4, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c4(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c4)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c4, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c4(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c4(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c4(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c4(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c4.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c5(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c5)) {
					seenValues[list[pos].@edge_c5].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c5, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c5(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c5)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c5, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c5(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c5(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c5(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c5(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c5.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c6(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c6)) {
					seenValues[list[pos].@edge_c6].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c6, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c6(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c6)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c6, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c6(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c6(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c6(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c6(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c6.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c7(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c7)) {
					seenValues[list[pos].@edge_c7].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c7, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c7(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c7)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c7, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c7(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c7(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c7(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c7(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c7.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c8(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c8)) {
					seenValues[list[pos].@edge_c8].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c8, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c8(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c8)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c8, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c8(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c8(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c8(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c8(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c8.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c9(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c9)) {
					seenValues[list[pos].@edge_c9].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c9, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c9(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c9)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c9, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c9(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c9(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c9(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c9(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c9.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c10(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c10)) {
					seenValues[list[pos].@edge_c10].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c10, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c10(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c10)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c10, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c10(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c10(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c10(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c10(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c10.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c11(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c11)) {
					seenValues[list[pos].@edge_c11].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c11, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c11(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c11)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c11, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c11(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c11(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c11(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c11(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c11.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c12(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c12)) {
					seenValues[list[pos].@edge_c12].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c12, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c12(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c12)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c12, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c12(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c12(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c12(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c12(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c12.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c13(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c13)) {
					seenValues[list[pos].@edge_c13].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c13, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c13(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c13)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c13, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c13(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c13(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c13(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c13(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c13.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c14(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c14)) {
					seenValues[list[pos].@edge_c14].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c14, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c14(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c14)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c14, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c14(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c14(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c14(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c14(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c14.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c15(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c15)) {
					seenValues[list[pos].@edge_c15].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c15, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c15(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c15)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c15, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c15(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c15(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c15(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c15(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c15.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c16(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c16)) {
					seenValues[list[pos].@edge_c16].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c16, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c16(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c16)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c16, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c16(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c16(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c16(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c16(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c16.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c17(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c17)) {
					seenValues[list[pos].@edge_c17].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c17, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c17(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c17)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c17, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c17(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c17.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c17(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c17.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c17(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c17.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c17(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c17.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c18(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c18)) {
					seenValues[list[pos].@edge_c18].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c18, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c18(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c18)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c18, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c18(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c18.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c18(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c18.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c18(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c18.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c18(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c18.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c19(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c19)) {
					seenValues[list[pos].@edge_c19].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c19, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c19(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c19)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c19, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c19(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c19.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c19(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c19.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c19(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c19.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c19(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c19.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c20(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c20)) {
					seenValues[list[pos].@edge_c20].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c20, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c20(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c20)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c20, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c20(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c20.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c20(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c20.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c20(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c20.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c20(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c20.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c21(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c21)) {
					seenValues[list[pos].@edge_c21].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c21, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c21(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c21)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c21, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c21(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c21.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c21(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c21.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c21(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c21.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c21(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c21.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c22(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c22)) {
					seenValues[list[pos].@edge_c22].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c22, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c22(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c22)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c22, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c22(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c22.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c22(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c22.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c22(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c22.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c22(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c22.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy_c23(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c23)) {
					seenValues[list[pos].@edge_c23].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c23, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy_c23(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c23)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c23, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy_c23(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c23.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy_c23(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c23.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c23(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c23.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy_c23(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c23.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy__edge0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge0)) {
					seenValues[list[pos].@edge__edge0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy__edge0(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge0, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy__edge0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy__edge0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy__edge0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy__edge0(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy__edge1(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge1)) {
					seenValues[list[pos].@edge__edge1].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge1, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy__edge1(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge1)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge1, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy__edge1(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy__edge1(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy__edge1(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy__edge1(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge1.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy__edge2(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge2)) {
					seenValues[list[pos].@edge__edge2].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge2, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy__edge2(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge2)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge2, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy__edge2(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy__edge2(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy__edge2(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy__edge2(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge2.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy__edge3(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge3)) {
					seenValues[list[pos].@edge__edge3].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge3, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy__edge3(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge3)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge3, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy__edge3(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy__edge3(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy__edge3(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy__edge3(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge3.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy__edge4(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge4)) {
					seenValues[list[pos].@edge__edge4].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge4, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy__edge4(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge4)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge4, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy__edge4(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy__edge4(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy__edge4(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy__edge4(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge4.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy__edge5(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge5)) {
					seenValues[list[pos].@edge__edge5].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge5, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy__edge5(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge5)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge5, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy__edge5(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy__edge5(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy__edge5(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy__edge5(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge5.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_groupBy__edge6(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge6)) {
					seenValues[list[pos].@edge__edge6].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> tempList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge6, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			foreach(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> Array_es_0_1_keepOneForEachBy__edge6(List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list)
		{
			List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> newList = new List<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge6)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge6, null);
				}
			}
			return newList;
		}
		public static int Array_es_0_1_indexOfBy__edge6(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_indexOfBy__edge6(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy__edge6(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_es_0_1_lastIndexOfBy__edge6(IList<GRGEN_ACTIONS.Rule_es_0_1.IMatch_es_0_1> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge6.Equals(entry))
					return i;
			return -1;
		}
	}

	public class Rule_ss_1_0 : GRGEN_LGSP.LGSPRulePattern
	{
		private static Rule_ss_1_0 instance = null;
		public static Rule_ss_1_0 Instance { get { if(instance==null) { instance = new Rule_ss_1_0(); instance.initialize(); } return instance; } }

		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_r0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v8_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v0_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v1_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v2_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v8_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v9_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v1_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v3_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v10_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v3_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v4_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v6_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v7_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v10_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v11_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v13_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v14_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v5_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_v12_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_rn0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_right_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_rn1_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] ss_1_0_node_left_AllowedTypes = null;
		public static bool[] ss_1_0_node_v0_IsAllowedType = null;
		public static bool[] ss_1_0_node_r0_IsAllowedType = null;
		public static bool[] ss_1_0_node_v8_IsAllowedType = null;
		public static bool[] ss_1_0_node_v0_p0_IsAllowedType = null;
		public static bool[] ss_1_0_node_v1_IsAllowedType = null;
		public static bool[] ss_1_0_node_v2_IsAllowedType = null;
		public static bool[] ss_1_0_node_v8_p0_IsAllowedType = null;
		public static bool[] ss_1_0_node_v9_IsAllowedType = null;
		public static bool[] ss_1_0_node_v1_p0_IsAllowedType = null;
		public static bool[] ss_1_0_node_v3_IsAllowedType = null;
		public static bool[] ss_1_0_node_v10_IsAllowedType = null;
		public static bool[] ss_1_0_node_v3_p0_IsAllowedType = null;
		public static bool[] ss_1_0_node_v4_IsAllowedType = null;
		public static bool[] ss_1_0_node_v6_IsAllowedType = null;
		public static bool[] ss_1_0_node_v7_IsAllowedType = null;
		public static bool[] ss_1_0_node_v10_p0_IsAllowedType = null;
		public static bool[] ss_1_0_node_v11_IsAllowedType = null;
		public static bool[] ss_1_0_node_v13_IsAllowedType = null;
		public static bool[] ss_1_0_node_v14_IsAllowedType = null;
		public static bool[] ss_1_0_node_v5_IsAllowedType = null;
		public static bool[] ss_1_0_node_v12_IsAllowedType = null;
		public static bool[] ss_1_0_node_rn0_IsAllowedType = null;
		public static bool[] ss_1_0_node_right_IsAllowedType = null;
		public static bool[] ss_1_0_node_rn1_IsAllowedType = null;
		public static bool[] ss_1_0_node_left_IsAllowedType = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c0_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c1_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c2_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c3_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c4_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c5_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c6_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c7_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c8_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c9_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c10_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c11_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c12_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c13_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c14_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c15_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c16_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c17_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c18_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge_c19_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge__edge0_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge__edge1_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge__edge2_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge__edge3_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] ss_1_0_edge__edge4_AllowedTypes = null;
		public static bool[] ss_1_0_edge_c0_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c1_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c2_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c3_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c4_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c5_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c6_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c7_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c8_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c9_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c10_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c11_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c12_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c13_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c14_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c15_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c16_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c17_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c18_IsAllowedType = null;
		public static bool[] ss_1_0_edge_c19_IsAllowedType = null;
		public static bool[] ss_1_0_edge__edge0_IsAllowedType = null;
		public static bool[] ss_1_0_edge__edge1_IsAllowedType = null;
		public static bool[] ss_1_0_edge__edge2_IsAllowedType = null;
		public static bool[] ss_1_0_edge__edge3_IsAllowedType = null;
		public static bool[] ss_1_0_edge__edge4_IsAllowedType = null;
		public enum ss_1_0_NodeNums { @v0, @r0, @v8, @v0_p0, @v1, @v2, @v8_p0, @v9, @v1_p0, @v3, @v10, @v3_p0, @v4, @v6, @v7, @v10_p0, @v11, @v13, @v14, @v5, @v12, @rn0, @right, @rn1, @left, };
		public enum ss_1_0_EdgeNums { @c0, @c1, @c2, @c3, @c4, @c5, @c6, @c7, @c8, @c9, @c10, @c11, @c12, @c13, @c14, @c15, @c16, @c17, @c18, @c19, @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, };
		public enum ss_1_0_VariableNums { };
		public enum ss_1_0_SubNums { @pat0, @pat1, @pat2, @pat3, @pat4, @pat5, @pat6, @pat7, @pat8, @pat9, @pat10, };
		public enum ss_1_0_AltNums { };
		public enum ss_1_0_IterNums { };





		public static Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> fill_anonymous_set_11080(GRGEN_LIBGR.INode item0, GRGEN_LIBGR.INode item1, GRGEN_LIBGR.INode item2, GRGEN_LIBGR.INode item3, GRGEN_LIBGR.INode item4, GRGEN_LIBGR.INode item5, GRGEN_LIBGR.INode item6, GRGEN_LIBGR.INode item7, GRGEN_LIBGR.INode item8, GRGEN_LIBGR.INode item9, GRGEN_LIBGR.INode item10, GRGEN_LIBGR.INode item11, GRGEN_LIBGR.INode item12, GRGEN_LIBGR.INode item13, GRGEN_LIBGR.INode item14, GRGEN_LIBGR.INode item15) {
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> anonymous_set_11080 = new Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType>();
			anonymous_set_11080[item0] = null;
			anonymous_set_11080[item1] = null;
			anonymous_set_11080[item2] = null;
			anonymous_set_11080[item3] = null;
			anonymous_set_11080[item4] = null;
			anonymous_set_11080[item5] = null;
			anonymous_set_11080[item6] = null;
			anonymous_set_11080[item7] = null;
			anonymous_set_11080[item8] = null;
			anonymous_set_11080[item9] = null;
			anonymous_set_11080[item10] = null;
			anonymous_set_11080[item11] = null;
			anonymous_set_11080[item12] = null;
			anonymous_set_11080[item13] = null;
			anonymous_set_11080[item14] = null;
			anonymous_set_11080[item15] = null;
			return anonymous_set_11080;
		}
		public static Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.INode> fill_anonymous_map_11105(GRGEN_LIBGR.INode itemkey0,GRGEN_LIBGR.INode itemvalue0, GRGEN_LIBGR.INode itemkey1,GRGEN_LIBGR.INode itemvalue1, GRGEN_LIBGR.INode itemkey2,GRGEN_LIBGR.INode itemvalue2, GRGEN_LIBGR.INode itemkey3,GRGEN_LIBGR.INode itemvalue3) {
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.INode> anonymous_map_11105 = new Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.INode>();
			anonymous_map_11105[itemkey0] = itemvalue0;
			anonymous_map_11105[itemkey1] = itemvalue1;
			anonymous_map_11105[itemkey2] = itemvalue2;
			anonymous_map_11105[itemkey3] = itemvalue3;
			return anonymous_map_11105;
		}
		public static Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.INode> fill_anonymous_map_11110() {
			Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.INode> anonymous_map_11110 = new Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.INode>();
			return anonymous_map_11110;
		}

		public GRGEN_LGSP.PatternGraph pat_ss_1_0;


		private Rule_ss_1_0()
			: base("ss_1_0",
				new GRGEN_LIBGR.GrGenType[] { },
				new string[] { },
				new GRGEN_LIBGR.GrGenType[] { },
				new string[] { },
				new GRGEN_LIBGR.GrGenType[] { },
				new GRGEN_LGSP.LGSPFilter[] {
					new GRGEN_LGSP.LGSPFilterAutoSupplied("keepFirst", null, "keepFirst", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(int)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("keepLast", null, "keepLast", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(int)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("keepFirstFraction", null, "keepFirstFraction", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(double)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("keepLastFraction", null, "keepLastFraction", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(double)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("removeFirst", null, "removeFirst", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(int)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("removeLast", null, "removeLast", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(int)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("removeFirstFraction", null, "removeFirstFraction", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(double)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("removeLastFraction", null, "removeLastFraction", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(double)), }, new String[] {"param"}),
				},
				new GRGEN_LIBGR.MatchClassInfo[] { },
				"de.unika.ipd.grGen.Action_ruleset.Rule_ss_1_0+IMatch_ss_1_0",
				"de.unika.ipd.grGen.Action_ruleset.Rule_ss_1_0+Match_ss_1_0"
			)
		{
		}
		private void initialize()
		{
			bool[,] ss_1_0_isNodeHomomorphicGlobal = new bool[25, 25] {
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
			};
			bool[,] ss_1_0_isEdgeHomomorphicGlobal = new bool[25, 25] {
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
			};
			bool[] ss_1_0_isNodeTotallyHomomorphic = new bool[25] { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,  };
			bool[] ss_1_0_isEdgeTotallyHomomorphic = new bool[25] { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,  };
			GRGEN_LGSP.PatternNode ss_1_0_node_v0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Locale, GRGEN_MODEL.NodeType_Locale.typeVar, "GRGEN_MODEL.ILocale", "ss_1_0_node_v0", "v0", ss_1_0_node_v0_AllowedTypes, ss_1_0_node_v0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_r0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Node, GRGEN_MODEL.NodeType_Node.typeVar, "GRGEN_LIBGR.INode", "ss_1_0_node_r0", "r0", ss_1_0_node_r0_AllowedTypes, ss_1_0_node_r0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v8 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Locale, GRGEN_MODEL.NodeType_Locale.typeVar, "GRGEN_MODEL.ILocale", "ss_1_0_node_v8", "v8", ss_1_0_node_v8_AllowedTypes, ss_1_0_node_v8_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v0_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "ss_1_0_node_v0_p0", "v0_p0", ss_1_0_node_v0_p0_AllowedTypes, ss_1_0_node_v0_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v1 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Route, GRGEN_MODEL.NodeType_Route.typeVar, "GRGEN_MODEL.IRoute", "ss_1_0_node_v1", "v1", ss_1_0_node_v1_AllowedTypes, ss_1_0_node_v1_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v2 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@OccupiedBy, GRGEN_MODEL.NodeType_OccupiedBy.typeVar, "GRGEN_MODEL.IOccupiedBy", "ss_1_0_node_v2", "v2", ss_1_0_node_v2_AllowedTypes, ss_1_0_node_v2_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v8_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "ss_1_0_node_v8_p0", "v8_p0", ss_1_0_node_v8_p0_AllowedTypes, ss_1_0_node_v8_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v9 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@OccupiedBy, GRGEN_MODEL.NodeType_OccupiedBy.typeVar, "GRGEN_MODEL.IOccupiedBy", "ss_1_0_node_v9", "v9", ss_1_0_node_v9_AllowedTypes, ss_1_0_node_v9_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v1_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "ss_1_0_node_v1_p0", "v1_p0", ss_1_0_node_v1_p0_AllowedTypes, ss_1_0_node_v1_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v3 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Robot, GRGEN_MODEL.NodeType_Robot.typeVar, "GRGEN_MODEL.IRobot", "ss_1_0_node_v3", "v3", ss_1_0_node_v3_AllowedTypes, ss_1_0_node_v3_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v10 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Robot, GRGEN_MODEL.NodeType_Robot.typeVar, "GRGEN_MODEL.IRobot", "ss_1_0_node_v10", "v10", ss_1_0_node_v10_AllowedTypes, ss_1_0_node_v10_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v3_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "ss_1_0_node_v3_p0", "v3_p0", ss_1_0_node_v3_p0_AllowedTypes, ss_1_0_node_v3_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v4 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@ID, GRGEN_MODEL.NodeType_ID.typeVar, "GRGEN_MODEL.IID", "ss_1_0_node_v4", "v4", ss_1_0_node_v4_AllowedTypes, ss_1_0_node_v4_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v6 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@SLck, GRGEN_MODEL.NodeType_SLck.typeVar, "GRGEN_MODEL.ISLck", "ss_1_0_node_v6", "v6", ss_1_0_node_v6_AllowedTypes, ss_1_0_node_v6_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v7 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Mvmt, GRGEN_MODEL.NodeType_Mvmt.typeVar, "GRGEN_MODEL.IMvmt", "ss_1_0_node_v7", "v7", ss_1_0_node_v7_AllowedTypes, ss_1_0_node_v7_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v10_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "ss_1_0_node_v10_p0", "v10_p0", ss_1_0_node_v10_p0_AllowedTypes, ss_1_0_node_v10_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v11 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@ID, GRGEN_MODEL.NodeType_ID.typeVar, "GRGEN_MODEL.IID", "ss_1_0_node_v11", "v11", ss_1_0_node_v11_AllowedTypes, ss_1_0_node_v11_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v13 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@SLck, GRGEN_MODEL.NodeType_SLck.typeVar, "GRGEN_MODEL.ISLck", "ss_1_0_node_v13", "v13", ss_1_0_node_v13_AllowedTypes, ss_1_0_node_v13_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v14 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Mvmt, GRGEN_MODEL.NodeType_Mvmt.typeVar, "GRGEN_MODEL.IMvmt", "ss_1_0_node_v14", "v14", ss_1_0_node_v14_AllowedTypes, ss_1_0_node_v14_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v5 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@N1, GRGEN_MODEL.NodeType_N1.typeVar, "GRGEN_MODEL.IN1", "ss_1_0_node_v5", "v5", ss_1_0_node_v5_AllowedTypes, ss_1_0_node_v5_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_v12 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@N0, GRGEN_MODEL.NodeType_N0.typeVar, "GRGEN_MODEL.IN0", "ss_1_0_node_v12", "v12", ss_1_0_node_v12_AllowedTypes, ss_1_0_node_v12_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_rn0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "ss_1_0_node_rn0", "rn0", ss_1_0_node_rn0_AllowedTypes, ss_1_0_node_rn0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_right = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "ss_1_0_node_right", "right", ss_1_0_node_right_AllowedTypes, ss_1_0_node_right_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_rn1 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "ss_1_0_node_rn1", "rn1", ss_1_0_node_rn1_AllowedTypes, ss_1_0_node_rn1_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode ss_1_0_node_left = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "ss_1_0_node_left", "left", ss_1_0_node_left_AllowedTypes, ss_1_0_node_left_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c0 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "ss_1_0_edge_c0", "c0", ss_1_0_edge_c0_AllowedTypes, ss_1_0_edge_c0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c1 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "ss_1_0_edge_c1", "c1", ss_1_0_edge_c1_AllowedTypes, ss_1_0_edge_c1_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c2 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "ss_1_0_edge_c2", "c2", ss_1_0_edge_c2_AllowedTypes, ss_1_0_edge_c2_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c3 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "ss_1_0_edge_c3", "c3", ss_1_0_edge_c3_AllowedTypes, ss_1_0_edge_c3_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c4 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "ss_1_0_edge_c4", "c4", ss_1_0_edge_c4_AllowedTypes, ss_1_0_edge_c4_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c5 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "ss_1_0_edge_c5", "c5", ss_1_0_edge_c5_AllowedTypes, ss_1_0_edge_c5_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c6 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "ss_1_0_edge_c6", "c6", ss_1_0_edge_c6_AllowedTypes, ss_1_0_edge_c6_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c7 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "ss_1_0_edge_c7", "c7", ss_1_0_edge_c7_AllowedTypes, ss_1_0_edge_c7_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c8 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "ss_1_0_edge_c8", "c8", ss_1_0_edge_c8_AllowedTypes, ss_1_0_edge_c8_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c9 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "ss_1_0_edge_c9", "c9", ss_1_0_edge_c9_AllowedTypes, ss_1_0_edge_c9_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c10 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "ss_1_0_edge_c10", "c10", ss_1_0_edge_c10_AllowedTypes, ss_1_0_edge_c10_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c11 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "ss_1_0_edge_c11", "c11", ss_1_0_edge_c11_AllowedTypes, ss_1_0_edge_c11_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c12 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "ss_1_0_edge_c12", "c12", ss_1_0_edge_c12_AllowedTypes, ss_1_0_edge_c12_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c13 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "ss_1_0_edge_c13", "c13", ss_1_0_edge_c13_AllowedTypes, ss_1_0_edge_c13_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c14 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "ss_1_0_edge_c14", "c14", ss_1_0_edge_c14_AllowedTypes, ss_1_0_edge_c14_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c15 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "ss_1_0_edge_c15", "c15", ss_1_0_edge_c15_AllowedTypes, ss_1_0_edge_c15_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c16 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "ss_1_0_edge_c16", "c16", ss_1_0_edge_c16_AllowedTypes, ss_1_0_edge_c16_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c17 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "ss_1_0_edge_c17", "c17", ss_1_0_edge_c17_AllowedTypes, ss_1_0_edge_c17_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c18 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "ss_1_0_edge_c18", "c18", ss_1_0_edge_c18_AllowedTypes, ss_1_0_edge_c18_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge_c19 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "ss_1_0_edge_c19", "c19", ss_1_0_edge_c19_AllowedTypes, ss_1_0_edge_c19_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge__edge0 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "ss_1_0_edge__edge0", "_edge0", ss_1_0_edge__edge0_AllowedTypes, ss_1_0_edge__edge0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge__edge1 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "ss_1_0_edge__edge1", "_edge1", ss_1_0_edge__edge1_AllowedTypes, ss_1_0_edge__edge1_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge__edge2 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "ss_1_0_edge__edge2", "_edge2", ss_1_0_edge__edge2_AllowedTypes, ss_1_0_edge__edge2_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge__edge3 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "ss_1_0_edge__edge3", "_edge3", ss_1_0_edge__edge3_AllowedTypes, ss_1_0_edge__edge3_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge ss_1_0_edge__edge4 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "ss_1_0_edge__edge4", "_edge4", ss_1_0_edge__edge4_AllowedTypes, ss_1_0_edge__edge4_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternGraphEmbedding ss_1_0_pat0 = new GRGEN_LGSP.PatternGraphEmbedding("pat0", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("ss_1_0_node_v6"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "ss_1_0_node_v6" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { ss_1_0_node_v6 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding ss_1_0_pat1 = new GRGEN_LGSP.PatternGraphEmbedding("pat1", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("ss_1_0_node_v7"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "ss_1_0_node_v7" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { ss_1_0_node_v7 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding ss_1_0_pat2 = new GRGEN_LGSP.PatternGraphEmbedding("pat2", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("ss_1_0_node_v9"),
					new GRGEN_EXPR.Constant("1"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "ss_1_0_node_v9" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { ss_1_0_node_v9 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding ss_1_0_pat3 = new GRGEN_LGSP.PatternGraphEmbedding("pat3", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("ss_1_0_node_v12"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "ss_1_0_node_v12" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { ss_1_0_node_v12 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding ss_1_0_pat4 = new GRGEN_LGSP.PatternGraphEmbedding("pat4", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("ss_1_0_node_v11"),
					new GRGEN_EXPR.Constant("1"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "ss_1_0_node_v11" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { ss_1_0_node_v11 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding ss_1_0_pat5 = new GRGEN_LGSP.PatternGraphEmbedding("pat5", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("ss_1_0_node_v14"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "ss_1_0_node_v14" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { ss_1_0_node_v14 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding ss_1_0_pat6 = new GRGEN_LGSP.PatternGraphEmbedding("pat6", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("ss_1_0_node_v13"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "ss_1_0_node_v13" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { ss_1_0_node_v13 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding ss_1_0_pat7 = new GRGEN_LGSP.PatternGraphEmbedding("pat7", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("ss_1_0_node_v1"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "ss_1_0_node_v1" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { ss_1_0_node_v1 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding ss_1_0_pat8 = new GRGEN_LGSP.PatternGraphEmbedding("pat8", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("ss_1_0_node_v2"),
					new GRGEN_EXPR.Constant("1"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "ss_1_0_node_v2" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { ss_1_0_node_v2 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding ss_1_0_pat9 = new GRGEN_LGSP.PatternGraphEmbedding("pat9", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("ss_1_0_node_v4"),
					new GRGEN_EXPR.Constant("1"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "ss_1_0_node_v4" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { ss_1_0_node_v4 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding ss_1_0_pat10 = new GRGEN_LGSP.PatternGraphEmbedding("pat10", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("ss_1_0_node_v5"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "ss_1_0_node_v5" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { ss_1_0_node_v5 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition ss_1_0_cond_0 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "ss_1_0_node_v8_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "ss_1_0_node_v8_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { ss_1_0_node_v8_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition ss_1_0_cond_1 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "ss_1_0_node_v10_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "ss_1_0_node_v10_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { ss_1_0_node_v10_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition ss_1_0_cond_2 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "ss_1_0_node_v0_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "ss_1_0_node_v0_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { ss_1_0_node_v0_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition ss_1_0_cond_3 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "ss_1_0_node_v1_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "ss_1_0_node_v1_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { ss_1_0_node_v1_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition ss_1_0_cond_4 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "ss_1_0_node_v3_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "ss_1_0_node_v3_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { ss_1_0_node_v3_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			pat_ss_1_0 = new GRGEN_LGSP.PatternGraph(
				"ss_1_0",
				"",
				null, "ss_1_0",
				false, false,
				new GRGEN_LGSP.PatternNode[] { ss_1_0_node_v0, ss_1_0_node_r0, ss_1_0_node_v8, ss_1_0_node_v0_p0, ss_1_0_node_v1, ss_1_0_node_v2, ss_1_0_node_v8_p0, ss_1_0_node_v9, ss_1_0_node_v1_p0, ss_1_0_node_v3, ss_1_0_node_v10, ss_1_0_node_v3_p0, ss_1_0_node_v4, ss_1_0_node_v6, ss_1_0_node_v7, ss_1_0_node_v10_p0, ss_1_0_node_v11, ss_1_0_node_v13, ss_1_0_node_v14, ss_1_0_node_v5, ss_1_0_node_v12, ss_1_0_node_rn0, ss_1_0_node_right, ss_1_0_node_rn1, ss_1_0_node_left }, 
				new GRGEN_LGSP.PatternEdge[] { ss_1_0_edge_c0, ss_1_0_edge_c1, ss_1_0_edge_c2, ss_1_0_edge_c3, ss_1_0_edge_c4, ss_1_0_edge_c5, ss_1_0_edge_c6, ss_1_0_edge_c7, ss_1_0_edge_c8, ss_1_0_edge_c9, ss_1_0_edge_c10, ss_1_0_edge_c11, ss_1_0_edge_c12, ss_1_0_edge_c13, ss_1_0_edge_c14, ss_1_0_edge_c15, ss_1_0_edge_c16, ss_1_0_edge_c17, ss_1_0_edge_c18, ss_1_0_edge_c19, ss_1_0_edge__edge0, ss_1_0_edge__edge1, ss_1_0_edge__edge2, ss_1_0_edge__edge3, ss_1_0_edge__edge4 }, 
				new GRGEN_LGSP.PatternVariable[] {  }, 
				new GRGEN_LGSP.PatternGraphEmbedding[] { ss_1_0_pat0, ss_1_0_pat1, ss_1_0_pat2, ss_1_0_pat3, ss_1_0_pat4, ss_1_0_pat5, ss_1_0_pat6, ss_1_0_pat7, ss_1_0_pat8, ss_1_0_pat9, ss_1_0_pat10 }, 
				new GRGEN_LGSP.Alternative[] {  }, 
				new GRGEN_LGSP.Iterated[] {  }, 
				new GRGEN_LGSP.PatternGraph[] {  }, 
				new GRGEN_LGSP.PatternGraph[] {  }, 
				new GRGEN_LGSP.PatternCondition[] { ss_1_0_cond_0, ss_1_0_cond_1, ss_1_0_cond_2, ss_1_0_cond_3, ss_1_0_cond_4,  }, 
				new GRGEN_LGSP.PatternYielding[] {  }, 
				new bool[25, 25] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				new bool[25, 25] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				ss_1_0_isNodeHomomorphicGlobal,
				ss_1_0_isEdgeHomomorphicGlobal,
				ss_1_0_isNodeTotallyHomomorphic,
				ss_1_0_isEdgeTotallyHomomorphic
			);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c0, ss_1_0_node_v0);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c0, ss_1_0_node_r0);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c1, ss_1_0_node_v8);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c1, ss_1_0_node_r0);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c2, ss_1_0_node_v0_p0);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c2, ss_1_0_node_v0);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c3, ss_1_0_node_v1);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c3, ss_1_0_node_v0);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c4, ss_1_0_node_v2);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c4, ss_1_0_node_v0);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c5, ss_1_0_node_v8_p0);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c5, ss_1_0_node_v8);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c6, ss_1_0_node_v9);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c6, ss_1_0_node_v8);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c7, ss_1_0_node_v1_p0);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c7, ss_1_0_node_v1);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c8, ss_1_0_node_v3);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c8, ss_1_0_node_v2);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c9, ss_1_0_node_v10);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c9, ss_1_0_node_v9);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c10, ss_1_0_node_v3_p0);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c10, ss_1_0_node_v3);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c11, ss_1_0_node_v4);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c11, ss_1_0_node_v3);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c12, ss_1_0_node_v6);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c12, ss_1_0_node_v3);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c13, ss_1_0_node_v7);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c13, ss_1_0_node_v3);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c14, ss_1_0_node_v10_p0);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c14, ss_1_0_node_v10);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c15, ss_1_0_node_v11);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c15, ss_1_0_node_v10);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c16, ss_1_0_node_v13);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c16, ss_1_0_node_v10);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c17, ss_1_0_node_v14);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c17, ss_1_0_node_v10);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c18, ss_1_0_node_v5);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c18, ss_1_0_node_v4);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge_c19, ss_1_0_node_v12);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge_c19, ss_1_0_node_v11);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge__edge0, ss_1_0_node_v10_p0);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge__edge0, ss_1_0_node_rn0);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge__edge1, ss_1_0_node_v8_p0);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge__edge1, ss_1_0_node_right);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge__edge2, ss_1_0_node_v1_p0);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge__edge2, ss_1_0_node_right);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge__edge3, ss_1_0_node_v3_p0);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge__edge3, ss_1_0_node_rn1);
			pat_ss_1_0.edgeToSourceNode.Add(ss_1_0_edge__edge4, ss_1_0_node_v0_p0);
			pat_ss_1_0.edgeToTargetNode.Add(ss_1_0_edge__edge4, ss_1_0_node_left);

			ss_1_0_node_v0.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_r0.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v8.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v0_p0.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v1.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v2.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v8_p0.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v9.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v1_p0.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v3.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v10.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v3_p0.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v4.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v6.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v7.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v10_p0.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v11.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v13.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v14.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v5.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_v12.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_rn0.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_right.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_rn1.pointOfDefinition = pat_ss_1_0;
			ss_1_0_node_left.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c0.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c1.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c2.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c3.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c4.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c5.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c6.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c7.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c8.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c9.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c10.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c11.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c12.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c13.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c14.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c15.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c16.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c17.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c18.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge_c19.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge__edge0.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge__edge1.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge__edge2.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge__edge3.pointOfDefinition = pat_ss_1_0;
			ss_1_0_edge__edge4.pointOfDefinition = pat_ss_1_0;
			ss_1_0_pat0.PointOfDefinition = pat_ss_1_0;
			ss_1_0_pat1.PointOfDefinition = pat_ss_1_0;
			ss_1_0_pat2.PointOfDefinition = pat_ss_1_0;
			ss_1_0_pat3.PointOfDefinition = pat_ss_1_0;
			ss_1_0_pat4.PointOfDefinition = pat_ss_1_0;
			ss_1_0_pat5.PointOfDefinition = pat_ss_1_0;
			ss_1_0_pat6.PointOfDefinition = pat_ss_1_0;
			ss_1_0_pat7.PointOfDefinition = pat_ss_1_0;
			ss_1_0_pat8.PointOfDefinition = pat_ss_1_0;
			ss_1_0_pat9.PointOfDefinition = pat_ss_1_0;
			ss_1_0_pat10.PointOfDefinition = pat_ss_1_0;

			patternGraph = pat_ss_1_0;
		}


		public void Modify(GRGEN_LGSP.LGSPActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatch _curMatch)
		{
			GRGEN_LGSP.LGSPGraph graph = actionEnv.graph;
			Match_ss_1_0 curMatch = (Match_ss_1_0)_curMatch;
			GRGEN_LGSP.LGSPNode node_v6 = curMatch._node_v6;
			GRGEN_LGSP.LGSPNode node_v7 = curMatch._node_v7;
			GRGEN_LGSP.LGSPNode node_v8 = curMatch._node_v8;
			GRGEN_LGSP.LGSPNode node_v9 = curMatch._node_v9;
			GRGEN_LGSP.LGSPNode node_v10 = curMatch._node_v10;
			GRGEN_LGSP.LGSPNode node_v12 = curMatch._node_v12;
			GRGEN_LGSP.LGSPNode node_v11 = curMatch._node_v11;
			GRGEN_LGSP.LGSPNode node_v14 = curMatch._node_v14;
			GRGEN_LGSP.LGSPNode node_v13 = curMatch._node_v13;
			GRGEN_LGSP.LGSPNode node_v0 = curMatch._node_v0;
			GRGEN_LGSP.LGSPNode node_v1 = curMatch._node_v1;
			GRGEN_LGSP.LGSPNode node_v2 = curMatch._node_v2;
			GRGEN_LGSP.LGSPNode node_v3 = curMatch._node_v3;
			GRGEN_LGSP.LGSPNode node_r0 = curMatch._node_r0;
			GRGEN_LGSP.LGSPNode node_v4 = curMatch._node_v4;
			GRGEN_LGSP.LGSPNode node_v5 = curMatch._node_v5;
			GRGEN_LGSP.LGSPNode node_v10_p0 = curMatch._node_v10_p0;
			GRGEN_LGSP.LGSPNode node_rn0 = curMatch._node_rn0;
			GRGEN_LGSP.LGSPNode node_v0_p0 = curMatch._node_v0_p0;
			GRGEN_LGSP.LGSPNode node_left = curMatch._node_left;
			GRGEN_LGSP.LGSPNode node_v3_p0 = curMatch._node_v3_p0;
			GRGEN_LGSP.LGSPNode node_rn1 = curMatch._node_rn1;
			GRGEN_LGSP.LGSPNode node_v8_p0 = curMatch._node_v8_p0;
			GRGEN_LGSP.LGSPNode node_right = curMatch._node_right;
			GRGEN_LGSP.LGSPNode node_v1_p0 = curMatch._node_v1_p0;
			GRGEN_LGSP.LGSPEdge edge__edge0 = curMatch._edge__edge0;
			GRGEN_LGSP.LGSPEdge edge__edge1 = curMatch._edge__edge1;
			GRGEN_LGSP.LGSPEdge edge__edge2 = curMatch._edge__edge2;
			GRGEN_LGSP.LGSPEdge edge__edge3 = curMatch._edge__edge3;
			GRGEN_LGSP.LGSPEdge edge__edge4 = curMatch._edge__edge4;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat0 = curMatch.@_pat0;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat1 = curMatch.@_pat1;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat2 = curMatch.@_pat2;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat3 = curMatch.@_pat3;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat4 = curMatch.@_pat4;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat5 = curMatch.@_pat5;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat6 = curMatch.@_pat6;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat7 = curMatch.@_pat7;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat8 = curMatch.@_pat8;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat9 = curMatch.@_pat9;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat10 = curMatch.@_pat10;
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> var_allMatchedNodes = fill_anonymous_set_11080(((GRGEN_LIBGR.INode) node_v6), ((GRGEN_LIBGR.INode) node_v7), ((GRGEN_LIBGR.INode) node_v8), ((GRGEN_LIBGR.INode) node_v9), ((GRGEN_LIBGR.INode) node_v10), ((GRGEN_LIBGR.INode) node_v12), ((GRGEN_LIBGR.INode) node_v11), ((GRGEN_LIBGR.INode) node_v14), ((GRGEN_LIBGR.INode) node_v13), ((GRGEN_LIBGR.INode) node_v0), ((GRGEN_LIBGR.INode) node_v1), ((GRGEN_LIBGR.INode) node_v2), ((GRGEN_LIBGR.INode) node_v3), (GRGEN_LIBGR.INode)(node_r0), ((GRGEN_LIBGR.INode) node_v4), ((GRGEN_LIBGR.INode) node_v5));
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.INode> var_indexMap = fill_anonymous_map_11105(((GRGEN_LIBGR.INode) node_v8), ((GRGEN_LIBGR.INode) node_v8), ((GRGEN_LIBGR.INode) node_v10), ((GRGEN_LIBGR.INode) node_v10), ((GRGEN_LIBGR.INode) node_v0), ((GRGEN_LIBGR.INode) node_v0), ((GRGEN_LIBGR.INode) node_v3), ((GRGEN_LIBGR.INode) node_v3));
			Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.INode> var_tasks = fill_anonymous_map_11110();
			graph.SettingAddedNodeNames( ss_1_0_addedNodeNames );
			GRGEN_MODEL.@SLckRef node_v7_f795852 = GRGEN_MODEL.@SLckRef.CreateNode(graph);
			GRGEN_MODEL.@BPort node_v7_f795852_p0 = GRGEN_MODEL.@BPort.CreateNode(graph);
			GRGEN_MODEL.@SLckRef node_v15_db30856 = GRGEN_MODEL.@SLckRef.CreateNode(graph);
			GRGEN_MODEL.@BPort node_v15_db30856_p0 = GRGEN_MODEL.@BPort.CreateNode(graph);
			GRGEN_MODEL.@BEdge node_e0_5ae1155 = GRGEN_MODEL.@BEdge.CreateNode(graph);
			graph.SettingAddedEdgeNames( ss_1_0_addedEdgeNames );
			GRGEN_MODEL.@bPrnt edge__edge5 = GRGEN_MODEL.@bPrnt.CreateEdge(graph, node_v7_f795852, node_v6);
			GRGEN_MODEL.@bNode edge_c20 = GRGEN_MODEL.@bNode.CreateEdge(graph, node_v7_f795852_p0, node_v7_f795852);
			GRGEN_MODEL.@bPrnt edge__edge6 = GRGEN_MODEL.@bPrnt.CreateEdge(graph, node_v15_db30856, node_v13);
			GRGEN_MODEL.@bNode edge_c21 = GRGEN_MODEL.@bNode.CreateEdge(graph, node_v15_db30856_p0, node_v15_db30856);
			GRGEN_MODEL.@bLink edge__edge7 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v10_p0, node_rn0);
			GRGEN_MODEL.@bLink edge__edge8 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v7_f795852_p0, node_e0_5ae1155);
			GRGEN_MODEL.@bLink edge__edge9 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v15_db30856_p0, node_e0_5ae1155);
			GRGEN_MODEL.@bLink edge__edge10 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v0_p0, node_left);
			GRGEN_MODEL.@bLink edge__edge11 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v3_p0, node_rn1);
			GRGEN_MODEL.@bLink edge__edge12 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v8_p0, node_right);
			GRGEN_MODEL.@bLink edge__edge13 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v1_p0, node_right);
			{ // eval_0
				Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> var_nodesWithSites = (Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType>)(GRGEN_LIBGR.ContainerHelper.Domain(var_indexMap));
				foreach(KeyValuePair<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> entry_0 in var_nodesWithSites)
				{
					GRGEN_LIBGR.INode var_cur = (GRGEN_LIBGR.INode)entry_0.Key;
					object emit_value_1;
					emit_value_1 = var_cur;
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = "->";
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = (var_indexMap[var_cur]);
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = " ";
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = GRGEN_LIBGR.GraphHelper.CountAdjacentIncoming(graph, var_cur, GRGEN_MODEL.EdgeType_AEdge.typeVar, GRGEN_MODEL.NodeType_Node.typeVar);
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = "\n";
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					if(((var_indexMap[var_cur]) == null)) {
						object emit_value_2;
						emit_value_2 = "Remove everything because there is no site mapping for the reactum";
						if(emit_value_2 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_2, graph, false, null, null, null));
						emit_value_2 = GRGEN_LIBGR.GraphHelper.AdjacentIncoming(var_cur, GRGEN_MODEL.EdgeType_AEdge.typeVar, GRGEN_MODEL.NodeType_Node.typeVar);
						if(emit_value_2 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_2, graph, false, null, null, null));
						emit_value_2 = "\n";
						if(emit_value_2 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_2, graph, false, null, null, null));
						GRGEN_LIBGR.INode node_3 = var_cur;
						foreach(GRGEN_LIBGR.IEdge edge_3 in node_3.GetCompatibleIncoming(GRGEN_MODEL.EdgeType_AEdge.typeVar))
						{
							if(!edge_3.Source.InstanceOf(GRGEN_MODEL.NodeType_Node.typeVar))
								continue;
							GRGEN_LIBGR.INode var_x__INTERN = (GRGEN_LIBGR.INode)edge_3.Source;
							if((((GRGEN_LGSP.LGSPNode)var_x__INTERN).lgspType != GRGEN_MODEL.NodeType_BPort.typeVar)) {
								graph.RemoveEdges((GRGEN_LIBGR.INode)var_x__INTERN);
								graph.Remove((GRGEN_LIBGR.INode)var_x__INTERN);
							}
						}
						continue;
					}
					if((var_cur != (var_indexMap[var_cur]))) {
						object emit_value_4;
						emit_value_4 = "Site mappings are different! Size of children: ";
						if(emit_value_4 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_4, graph, false, null, null, null));
						emit_value_4 = (GRGEN_LIBGR.GraphHelper.AdjacentIncoming(var_cur, GRGEN_MODEL.EdgeType_AEdge.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count;
						if(emit_value_4 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_4, graph, false, null, null, null));
						emit_value_4 = "\n";
						if(emit_value_4 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_4, graph, false, null, null, null));
						GRGEN_LIBGR.INode node_5 = var_cur;
						foreach(GRGEN_LIBGR.IEdge edge_5 in node_5.GetCompatibleIncoming(GRGEN_MODEL.EdgeType_AEdge.typeVar))
						{
							if(!edge_5.Source.InstanceOf(GRGEN_MODEL.NodeType_Node.typeVar))
								continue;
							GRGEN_LIBGR.INode var_x__INTERN = (GRGEN_LIBGR.INode)edge_5.Source;
							if(((((GRGEN_LGSP.LGSPNode)var_x__INTERN).lgspType != GRGEN_MODEL.NodeType_BPort.typeVar) && (! var_allMatchedNodes.ContainsKey(var_x__INTERN)))) {
								object emit_value_6;
								emit_value_6 = "\tchild = ";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = var_x__INTERN;
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = " ";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = ((GRGEN_LGSP.LGSPNode)var_x__INTERN).lgspType;
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = " ";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = (var_indexMap[var_cur]);
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = " ";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = GRGEN_LIBGR.GraphHelper.Outgoing(var_x__INTERN, GRGEN_MODEL.EdgeType_AEdge.typeVar, GRGEN_MODEL.NodeType_Node.typeVar);
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = "\n";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								GRGEN_LIBGR.INode node_7 = var_x__INTERN;
								foreach(GRGEN_LIBGR.IEdge edge_7 in node_7.GetCompatibleOutgoing(GRGEN_MODEL.EdgeType_AEdge.typeVar))
								{
									if(!edge_7.Target.InstanceOf(GRGEN_MODEL.NodeType_Node.typeVar))
										continue;
									GRGEN_LIBGR.IDEdge var_y = (GRGEN_LIBGR.IDEdge)edge_7;
									if((((GRGEN_LGSP.LGSPEdge)var_y).lgspType == GRGEN_MODEL.EdgeType_bPrnt.typeVar)) {
										object emit_value_8;
										emit_value_8 = "\ty";
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = var_y;
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = " ";
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = ((GRGEN_LGSP.LGSPEdge)var_y).lgspType;
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = " ";
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = GRGEN_LIBGR.GraphHelper.Nameof(var_y, graph);
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = "\n";
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										var_tasks[var_y] = (var_indexMap[var_cur]);
									}
								}
							}
						}
					}
				}
				Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.SetValueType> var_keyset = (Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.SetValueType>)(GRGEN_LIBGR.ContainerHelper.Domain(var_tasks));
				foreach(KeyValuePair<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.SetValueType> entry_9 in var_keyset)
				{
					GRGEN_LIBGR.IDEdge var_k = (GRGEN_LIBGR.IDEdge)entry_9.Key;
					((GRGEN_LGSP.LGSPNamedGraph)graph).RedirectTarget((GRGEN_LIBGR.IEdge)var_k, (GRGEN_LIBGR.INode)(var_tasks[var_k]));
				}
			}
			graph.Remove(edge__edge0);
			graph.Remove(edge__edge1);
			graph.Remove(edge__edge2);
			graph.Remove(edge__edge3);
			graph.Remove(edge__edge4);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat0);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat1);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat2);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat3);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat4);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat5);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat6);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat7);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat8);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat9);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat10);
			actionEnv.SelectedMatchRewritten();
			return;
		}
		private static string[] ss_1_0_addedNodeNames = new string[] { "v7_f795852", "v7_f795852_p0", "v15_db30856", "v15_db30856_p0", "e0_5ae1155" };
		private static string[] ss_1_0_addedEdgeNames = new string[] { "_edge5", "c20", "_edge6", "c21", "_edge7", "_edge8", "_edge9", "_edge10", "_edge11", "_edge12", "_edge13" };

		static Rule_ss_1_0() {
		}

		public interface IMatch_ss_1_0 : GRGEN_LIBGR.IMatch
		{
			//Nodes
			GRGEN_MODEL.ILocale node_v0 { get; set; }
			GRGEN_LIBGR.INode node_r0 { get; set; }
			GRGEN_MODEL.ILocale node_v8 { get; set; }
			GRGEN_MODEL.IBPort node_v0_p0 { get; set; }
			GRGEN_MODEL.IRoute node_v1 { get; set; }
			GRGEN_MODEL.IOccupiedBy node_v2 { get; set; }
			GRGEN_MODEL.IBPort node_v8_p0 { get; set; }
			GRGEN_MODEL.IOccupiedBy node_v9 { get; set; }
			GRGEN_MODEL.IBPort node_v1_p0 { get; set; }
			GRGEN_MODEL.IRobot node_v3 { get; set; }
			GRGEN_MODEL.IRobot node_v10 { get; set; }
			GRGEN_MODEL.IBPort node_v3_p0 { get; set; }
			GRGEN_MODEL.IID node_v4 { get; set; }
			GRGEN_MODEL.ISLck node_v6 { get; set; }
			GRGEN_MODEL.IMvmt node_v7 { get; set; }
			GRGEN_MODEL.IBPort node_v10_p0 { get; set; }
			GRGEN_MODEL.IID node_v11 { get; set; }
			GRGEN_MODEL.ISLck node_v13 { get; set; }
			GRGEN_MODEL.IMvmt node_v14 { get; set; }
			GRGEN_MODEL.IN1 node_v5 { get; set; }
			GRGEN_MODEL.IN0 node_v12 { get; set; }
			GRGEN_MODEL.IBLink node_rn0 { get; set; }
			GRGEN_MODEL.IBLink node_right { get; set; }
			GRGEN_MODEL.IBLink node_rn1 { get; set; }
			GRGEN_MODEL.IBLink node_left { get; set; }
			//Edges
			GRGEN_MODEL.IbPrnt edge_c0 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c1 { get; set; }
			GRGEN_MODEL.IbNode edge_c2 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c3 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c4 { get; set; }
			GRGEN_MODEL.IbNode edge_c5 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c6 { get; set; }
			GRGEN_MODEL.IbNode edge_c7 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c8 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c9 { get; set; }
			GRGEN_MODEL.IbNode edge_c10 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c11 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c12 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c13 { get; set; }
			GRGEN_MODEL.IbNode edge_c14 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c15 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c16 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c17 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c18 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c19 { get; set; }
			GRGEN_MODEL.IbLink edge__edge0 { get; set; }
			GRGEN_MODEL.IbLink edge__edge1 { get; set; }
			GRGEN_MODEL.IbLink edge__edge2 { get; set; }
			GRGEN_MODEL.IbLink edge__edge3 { get; set; }
			GRGEN_MODEL.IbLink edge__edge4 { get; set; }
			//Variables
			//EmbeddedGraphs
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat0 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat1 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat2 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat3 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat4 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat5 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat6 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat7 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat8 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat9 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat10 { get; }
			//Alternatives
			//Iterateds
			//Independents
			// further match object stuff
			void SetMatchOfEnclosingPattern(GRGEN_LIBGR.IMatch matchOfEnclosingPattern);
		}

		public class Match_ss_1_0 : GRGEN_LGSP.MatchListElement<Match_ss_1_0>, IMatch_ss_1_0
		{
			public GRGEN_MODEL.ILocale node_v0 { get { return (GRGEN_MODEL.ILocale)_node_v0; } set { _node_v0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_LIBGR.INode node_r0 { get { return (GRGEN_LIBGR.INode)_node_r0; } set { _node_r0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ILocale node_v8 { get { return (GRGEN_MODEL.ILocale)_node_v8; } set { _node_v8 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v0_p0 { get { return (GRGEN_MODEL.IBPort)_node_v0_p0; } set { _node_v0_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IRoute node_v1 { get { return (GRGEN_MODEL.IRoute)_node_v1; } set { _node_v1 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IOccupiedBy node_v2 { get { return (GRGEN_MODEL.IOccupiedBy)_node_v2; } set { _node_v2 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v8_p0 { get { return (GRGEN_MODEL.IBPort)_node_v8_p0; } set { _node_v8_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IOccupiedBy node_v9 { get { return (GRGEN_MODEL.IOccupiedBy)_node_v9; } set { _node_v9 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v1_p0 { get { return (GRGEN_MODEL.IBPort)_node_v1_p0; } set { _node_v1_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IRobot node_v3 { get { return (GRGEN_MODEL.IRobot)_node_v3; } set { _node_v3 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IRobot node_v10 { get { return (GRGEN_MODEL.IRobot)_node_v10; } set { _node_v10 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v3_p0 { get { return (GRGEN_MODEL.IBPort)_node_v3_p0; } set { _node_v3_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IID node_v4 { get { return (GRGEN_MODEL.IID)_node_v4; } set { _node_v4 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ISLck node_v6 { get { return (GRGEN_MODEL.ISLck)_node_v6; } set { _node_v6 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IMvmt node_v7 { get { return (GRGEN_MODEL.IMvmt)_node_v7; } set { _node_v7 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v10_p0 { get { return (GRGEN_MODEL.IBPort)_node_v10_p0; } set { _node_v10_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IID node_v11 { get { return (GRGEN_MODEL.IID)_node_v11; } set { _node_v11 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ISLck node_v13 { get { return (GRGEN_MODEL.ISLck)_node_v13; } set { _node_v13 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IMvmt node_v14 { get { return (GRGEN_MODEL.IMvmt)_node_v14; } set { _node_v14 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IN1 node_v5 { get { return (GRGEN_MODEL.IN1)_node_v5; } set { _node_v5 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IN0 node_v12 { get { return (GRGEN_MODEL.IN0)_node_v12; } set { _node_v12 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_rn0 { get { return (GRGEN_MODEL.IBLink)_node_rn0; } set { _node_rn0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_right { get { return (GRGEN_MODEL.IBLink)_node_right; } set { _node_right = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_rn1 { get { return (GRGEN_MODEL.IBLink)_node_rn1; } set { _node_rn1 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_left { get { return (GRGEN_MODEL.IBLink)_node_left; } set { _node_left = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_LGSP.LGSPNode _node_v0;
			public GRGEN_LGSP.LGSPNode _node_r0;
			public GRGEN_LGSP.LGSPNode _node_v8;
			public GRGEN_LGSP.LGSPNode _node_v0_p0;
			public GRGEN_LGSP.LGSPNode _node_v1;
			public GRGEN_LGSP.LGSPNode _node_v2;
			public GRGEN_LGSP.LGSPNode _node_v8_p0;
			public GRGEN_LGSP.LGSPNode _node_v9;
			public GRGEN_LGSP.LGSPNode _node_v1_p0;
			public GRGEN_LGSP.LGSPNode _node_v3;
			public GRGEN_LGSP.LGSPNode _node_v10;
			public GRGEN_LGSP.LGSPNode _node_v3_p0;
			public GRGEN_LGSP.LGSPNode _node_v4;
			public GRGEN_LGSP.LGSPNode _node_v6;
			public GRGEN_LGSP.LGSPNode _node_v7;
			public GRGEN_LGSP.LGSPNode _node_v10_p0;
			public GRGEN_LGSP.LGSPNode _node_v11;
			public GRGEN_LGSP.LGSPNode _node_v13;
			public GRGEN_LGSP.LGSPNode _node_v14;
			public GRGEN_LGSP.LGSPNode _node_v5;
			public GRGEN_LGSP.LGSPNode _node_v12;
			public GRGEN_LGSP.LGSPNode _node_rn0;
			public GRGEN_LGSP.LGSPNode _node_right;
			public GRGEN_LGSP.LGSPNode _node_rn1;
			public GRGEN_LGSP.LGSPNode _node_left;
			public enum ss_1_0_NodeNums { @v0, @r0, @v8, @v0_p0, @v1, @v2, @v8_p0, @v9, @v1_p0, @v3, @v10, @v3_p0, @v4, @v6, @v7, @v10_p0, @v11, @v13, @v14, @v5, @v12, @rn0, @right, @rn1, @left, END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.INode> Nodes { get { return new GRGEN_LGSP.Nodes_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.INode> NodesEnumerator { get { return new GRGEN_LGSP.Nodes_Enumerator(this); } }
			public override int NumberOfNodes { get { return 25; } }
			public override GRGEN_LIBGR.INode getNodeAt(int index)
			{
				switch(index) {
				case (int)ss_1_0_NodeNums.@v0: return _node_v0;
				case (int)ss_1_0_NodeNums.@r0: return _node_r0;
				case (int)ss_1_0_NodeNums.@v8: return _node_v8;
				case (int)ss_1_0_NodeNums.@v0_p0: return _node_v0_p0;
				case (int)ss_1_0_NodeNums.@v1: return _node_v1;
				case (int)ss_1_0_NodeNums.@v2: return _node_v2;
				case (int)ss_1_0_NodeNums.@v8_p0: return _node_v8_p0;
				case (int)ss_1_0_NodeNums.@v9: return _node_v9;
				case (int)ss_1_0_NodeNums.@v1_p0: return _node_v1_p0;
				case (int)ss_1_0_NodeNums.@v3: return _node_v3;
				case (int)ss_1_0_NodeNums.@v10: return _node_v10;
				case (int)ss_1_0_NodeNums.@v3_p0: return _node_v3_p0;
				case (int)ss_1_0_NodeNums.@v4: return _node_v4;
				case (int)ss_1_0_NodeNums.@v6: return _node_v6;
				case (int)ss_1_0_NodeNums.@v7: return _node_v7;
				case (int)ss_1_0_NodeNums.@v10_p0: return _node_v10_p0;
				case (int)ss_1_0_NodeNums.@v11: return _node_v11;
				case (int)ss_1_0_NodeNums.@v13: return _node_v13;
				case (int)ss_1_0_NodeNums.@v14: return _node_v14;
				case (int)ss_1_0_NodeNums.@v5: return _node_v5;
				case (int)ss_1_0_NodeNums.@v12: return _node_v12;
				case (int)ss_1_0_NodeNums.@rn0: return _node_rn0;
				case (int)ss_1_0_NodeNums.@right: return _node_right;
				case (int)ss_1_0_NodeNums.@rn1: return _node_rn1;
				case (int)ss_1_0_NodeNums.@left: return _node_left;
				default: return null;
				}
			}
			public override GRGEN_LIBGR.INode getNode(string name)
			{
				switch(name) {
				case "v0": return _node_v0;
				case "r0": return _node_r0;
				case "v8": return _node_v8;
				case "v0_p0": return _node_v0_p0;
				case "v1": return _node_v1;
				case "v2": return _node_v2;
				case "v8_p0": return _node_v8_p0;
				case "v9": return _node_v9;
				case "v1_p0": return _node_v1_p0;
				case "v3": return _node_v3;
				case "v10": return _node_v10;
				case "v3_p0": return _node_v3_p0;
				case "v4": return _node_v4;
				case "v6": return _node_v6;
				case "v7": return _node_v7;
				case "v10_p0": return _node_v10_p0;
				case "v11": return _node_v11;
				case "v13": return _node_v13;
				case "v14": return _node_v14;
				case "v5": return _node_v5;
				case "v12": return _node_v12;
				case "rn0": return _node_rn0;
				case "right": return _node_right;
				case "rn1": return _node_rn1;
				case "left": return _node_left;
				default: return null;
				}
			}
			public override void SetNode(string name, GRGEN_LIBGR.INode value)
			{
				switch(name) {
				case "v0": _node_v0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "r0": _node_r0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v8": _node_v8 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v0_p0": _node_v0_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v1": _node_v1 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v2": _node_v2 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v8_p0": _node_v8_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v9": _node_v9 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v1_p0": _node_v1_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v3": _node_v3 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v10": _node_v10 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v3_p0": _node_v3_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v4": _node_v4 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v6": _node_v6 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v7": _node_v7 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v10_p0": _node_v10_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v11": _node_v11 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v13": _node_v13 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v14": _node_v14 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v5": _node_v5 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v12": _node_v12 = (GRGEN_LGSP.LGSPNode)value; break;
				case "rn0": _node_rn0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "right": _node_right = (GRGEN_LGSP.LGSPNode)value; break;
				case "rn1": _node_rn1 = (GRGEN_LGSP.LGSPNode)value; break;
				case "left": _node_left = (GRGEN_LGSP.LGSPNode)value; break;
				default: break;
				}
			}

			public GRGEN_MODEL.IbPrnt edge_c0 { get { return (GRGEN_MODEL.IbPrnt)_edge_c0; } set { _edge_c0 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c1 { get { return (GRGEN_MODEL.IbPrnt)_edge_c1; } set { _edge_c1 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c2 { get { return (GRGEN_MODEL.IbNode)_edge_c2; } set { _edge_c2 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c3 { get { return (GRGEN_MODEL.IbPrnt)_edge_c3; } set { _edge_c3 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c4 { get { return (GRGEN_MODEL.IbPrnt)_edge_c4; } set { _edge_c4 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c5 { get { return (GRGEN_MODEL.IbNode)_edge_c5; } set { _edge_c5 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c6 { get { return (GRGEN_MODEL.IbPrnt)_edge_c6; } set { _edge_c6 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c7 { get { return (GRGEN_MODEL.IbNode)_edge_c7; } set { _edge_c7 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c8 { get { return (GRGEN_MODEL.IbPrnt)_edge_c8; } set { _edge_c8 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c9 { get { return (GRGEN_MODEL.IbPrnt)_edge_c9; } set { _edge_c9 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c10 { get { return (GRGEN_MODEL.IbNode)_edge_c10; } set { _edge_c10 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c11 { get { return (GRGEN_MODEL.IbPrnt)_edge_c11; } set { _edge_c11 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c12 { get { return (GRGEN_MODEL.IbPrnt)_edge_c12; } set { _edge_c12 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c13 { get { return (GRGEN_MODEL.IbPrnt)_edge_c13; } set { _edge_c13 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c14 { get { return (GRGEN_MODEL.IbNode)_edge_c14; } set { _edge_c14 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c15 { get { return (GRGEN_MODEL.IbPrnt)_edge_c15; } set { _edge_c15 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c16 { get { return (GRGEN_MODEL.IbPrnt)_edge_c16; } set { _edge_c16 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c17 { get { return (GRGEN_MODEL.IbPrnt)_edge_c17; } set { _edge_c17 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c18 { get { return (GRGEN_MODEL.IbPrnt)_edge_c18; } set { _edge_c18 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c19 { get { return (GRGEN_MODEL.IbPrnt)_edge_c19; } set { _edge_c19 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge0 { get { return (GRGEN_MODEL.IbLink)_edge__edge0; } set { _edge__edge0 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge1 { get { return (GRGEN_MODEL.IbLink)_edge__edge1; } set { _edge__edge1 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge2 { get { return (GRGEN_MODEL.IbLink)_edge__edge2; } set { _edge__edge2 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge3 { get { return (GRGEN_MODEL.IbLink)_edge__edge3; } set { _edge__edge3 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge4 { get { return (GRGEN_MODEL.IbLink)_edge__edge4; } set { _edge__edge4 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_LGSP.LGSPEdge _edge_c0;
			public GRGEN_LGSP.LGSPEdge _edge_c1;
			public GRGEN_LGSP.LGSPEdge _edge_c2;
			public GRGEN_LGSP.LGSPEdge _edge_c3;
			public GRGEN_LGSP.LGSPEdge _edge_c4;
			public GRGEN_LGSP.LGSPEdge _edge_c5;
			public GRGEN_LGSP.LGSPEdge _edge_c6;
			public GRGEN_LGSP.LGSPEdge _edge_c7;
			public GRGEN_LGSP.LGSPEdge _edge_c8;
			public GRGEN_LGSP.LGSPEdge _edge_c9;
			public GRGEN_LGSP.LGSPEdge _edge_c10;
			public GRGEN_LGSP.LGSPEdge _edge_c11;
			public GRGEN_LGSP.LGSPEdge _edge_c12;
			public GRGEN_LGSP.LGSPEdge _edge_c13;
			public GRGEN_LGSP.LGSPEdge _edge_c14;
			public GRGEN_LGSP.LGSPEdge _edge_c15;
			public GRGEN_LGSP.LGSPEdge _edge_c16;
			public GRGEN_LGSP.LGSPEdge _edge_c17;
			public GRGEN_LGSP.LGSPEdge _edge_c18;
			public GRGEN_LGSP.LGSPEdge _edge_c19;
			public GRGEN_LGSP.LGSPEdge _edge__edge0;
			public GRGEN_LGSP.LGSPEdge _edge__edge1;
			public GRGEN_LGSP.LGSPEdge _edge__edge2;
			public GRGEN_LGSP.LGSPEdge _edge__edge3;
			public GRGEN_LGSP.LGSPEdge _edge__edge4;
			public enum ss_1_0_EdgeNums { @c0, @c1, @c2, @c3, @c4, @c5, @c6, @c7, @c8, @c9, @c10, @c11, @c12, @c13, @c14, @c15, @c16, @c17, @c18, @c19, @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IEdge> Edges { get { return new GRGEN_LGSP.Edges_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IEdge> EdgesEnumerator { get { return new GRGEN_LGSP.Edges_Enumerator(this); } }
			public override int NumberOfEdges { get { return 25; } }
			public override GRGEN_LIBGR.IEdge getEdgeAt(int index)
			{
				switch(index) {
				case (int)ss_1_0_EdgeNums.@c0: return _edge_c0;
				case (int)ss_1_0_EdgeNums.@c1: return _edge_c1;
				case (int)ss_1_0_EdgeNums.@c2: return _edge_c2;
				case (int)ss_1_0_EdgeNums.@c3: return _edge_c3;
				case (int)ss_1_0_EdgeNums.@c4: return _edge_c4;
				case (int)ss_1_0_EdgeNums.@c5: return _edge_c5;
				case (int)ss_1_0_EdgeNums.@c6: return _edge_c6;
				case (int)ss_1_0_EdgeNums.@c7: return _edge_c7;
				case (int)ss_1_0_EdgeNums.@c8: return _edge_c8;
				case (int)ss_1_0_EdgeNums.@c9: return _edge_c9;
				case (int)ss_1_0_EdgeNums.@c10: return _edge_c10;
				case (int)ss_1_0_EdgeNums.@c11: return _edge_c11;
				case (int)ss_1_0_EdgeNums.@c12: return _edge_c12;
				case (int)ss_1_0_EdgeNums.@c13: return _edge_c13;
				case (int)ss_1_0_EdgeNums.@c14: return _edge_c14;
				case (int)ss_1_0_EdgeNums.@c15: return _edge_c15;
				case (int)ss_1_0_EdgeNums.@c16: return _edge_c16;
				case (int)ss_1_0_EdgeNums.@c17: return _edge_c17;
				case (int)ss_1_0_EdgeNums.@c18: return _edge_c18;
				case (int)ss_1_0_EdgeNums.@c19: return _edge_c19;
				case (int)ss_1_0_EdgeNums.@_edge0: return _edge__edge0;
				case (int)ss_1_0_EdgeNums.@_edge1: return _edge__edge1;
				case (int)ss_1_0_EdgeNums.@_edge2: return _edge__edge2;
				case (int)ss_1_0_EdgeNums.@_edge3: return _edge__edge3;
				case (int)ss_1_0_EdgeNums.@_edge4: return _edge__edge4;
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IEdge getEdge(string name)
			{
				switch(name) {
				case "c0": return _edge_c0;
				case "c1": return _edge_c1;
				case "c2": return _edge_c2;
				case "c3": return _edge_c3;
				case "c4": return _edge_c4;
				case "c5": return _edge_c5;
				case "c6": return _edge_c6;
				case "c7": return _edge_c7;
				case "c8": return _edge_c8;
				case "c9": return _edge_c9;
				case "c10": return _edge_c10;
				case "c11": return _edge_c11;
				case "c12": return _edge_c12;
				case "c13": return _edge_c13;
				case "c14": return _edge_c14;
				case "c15": return _edge_c15;
				case "c16": return _edge_c16;
				case "c17": return _edge_c17;
				case "c18": return _edge_c18;
				case "c19": return _edge_c19;
				case "_edge0": return _edge__edge0;
				case "_edge1": return _edge__edge1;
				case "_edge2": return _edge__edge2;
				case "_edge3": return _edge__edge3;
				case "_edge4": return _edge__edge4;
				default: return null;
				}
			}
			public override void SetEdge(string name, GRGEN_LIBGR.IEdge value)
			{
				switch(name) {
				case "c0": _edge_c0 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c1": _edge_c1 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c2": _edge_c2 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c3": _edge_c3 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c4": _edge_c4 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c5": _edge_c5 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c6": _edge_c6 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c7": _edge_c7 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c8": _edge_c8 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c9": _edge_c9 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c10": _edge_c10 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c11": _edge_c11 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c12": _edge_c12 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c13": _edge_c13 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c14": _edge_c14 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c15": _edge_c15 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c16": _edge_c16 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c17": _edge_c17 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c18": _edge_c18 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c19": _edge_c19 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge0": _edge__edge0 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge1": _edge__edge1 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge2": _edge__edge2 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge3": _edge__edge3 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge4": _edge__edge4 = (GRGEN_LGSP.LGSPEdge)value; break;
				default: break;
				}
			}

			public enum ss_1_0_VariableNums { END_OF_ENUM };
			public override IEnumerable<object> Variables { get { return new GRGEN_LGSP.Variables_Enumerable(this); } }
			public override IEnumerator<object> VariablesEnumerator { get { return new GRGEN_LGSP.Variables_Enumerator(this); } }
			public override int NumberOfVariables { get { return 0; } }
			public override object getVariableAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override object getVariable(string name)
			{
				switch(name) {
				default: return null;
				}
			}
			public override void SetVariable(string name, object value)
			{
				switch(name) {
				default: break;
				}
			}

			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat0 { get { return @_pat0; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat1 { get { return @_pat1; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat2 { get { return @_pat2; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat3 { get { return @_pat3; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat4 { get { return @_pat4; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat5 { get { return @_pat5; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat6 { get { return @_pat6; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat7 { get { return @_pat7; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat8 { get { return @_pat8; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat9 { get { return @_pat9; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat10 { get { return @_pat10; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat0;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat1;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat2;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat3;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat4;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat5;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat6;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat7;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat8;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat9;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat10;
			public enum ss_1_0_SubNums { @pat0, @pat1, @pat2, @pat3, @pat4, @pat5, @pat6, @pat7, @pat8, @pat9, @pat10, END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> EmbeddedGraphs { get { return new GRGEN_LGSP.EmbeddedGraphs_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> EmbeddedGraphsEnumerator { get { return new GRGEN_LGSP.EmbeddedGraphs_Enumerator(this); } }
			public override int NumberOfEmbeddedGraphs { get { return 11; } }
			public override GRGEN_LIBGR.IMatch getEmbeddedGraphAt(int index)
			{
				switch(index) {
				case (int)ss_1_0_SubNums.@pat0: return _pat0;
				case (int)ss_1_0_SubNums.@pat1: return _pat1;
				case (int)ss_1_0_SubNums.@pat2: return _pat2;
				case (int)ss_1_0_SubNums.@pat3: return _pat3;
				case (int)ss_1_0_SubNums.@pat4: return _pat4;
				case (int)ss_1_0_SubNums.@pat5: return _pat5;
				case (int)ss_1_0_SubNums.@pat6: return _pat6;
				case (int)ss_1_0_SubNums.@pat7: return _pat7;
				case (int)ss_1_0_SubNums.@pat8: return _pat8;
				case (int)ss_1_0_SubNums.@pat9: return _pat9;
				case (int)ss_1_0_SubNums.@pat10: return _pat10;
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getEmbeddedGraph(string name)
			{
				switch(name) {
				case "pat0": return _pat0;
				case "pat1": return _pat1;
				case "pat2": return _pat2;
				case "pat3": return _pat3;
				case "pat4": return _pat4;
				case "pat5": return _pat5;
				case "pat6": return _pat6;
				case "pat7": return _pat7;
				case "pat8": return _pat8;
				case "pat9": return _pat9;
				case "pat10": return _pat10;
				default: return null;
				}
			}

			public enum ss_1_0_AltNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> Alternatives { get { return new GRGEN_LGSP.Alternatives_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> AlternativesEnumerator { get { return new GRGEN_LGSP.Alternatives_Enumerator(this); } }
			public override int NumberOfAlternatives { get { return 0; } }
			public override GRGEN_LIBGR.IMatch getAlternativeAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getAlternative(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public enum ss_1_0_IterNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatches> Iterateds { get { return new GRGEN_LGSP.Iterateds_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatches> IteratedsEnumerator { get { return new GRGEN_LGSP.Iterateds_Enumerator(this); } }
			public override int NumberOfIterateds { get { return 0; } }
			public override GRGEN_LIBGR.IMatches getIteratedAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatches getIterated(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public enum ss_1_0_IdptNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> Independents { get { return new GRGEN_LGSP.Independents_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> IndependentsEnumerator { get { return new GRGEN_LGSP.Independents_Enumerator(this); } }
			public override int NumberOfIndependents { get { return 0; } }
			public override GRGEN_LIBGR.IMatch getIndependentAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getIndependent(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public override GRGEN_LIBGR.IPatternGraph Pattern { get { return Rule_ss_1_0.instance.pat_ss_1_0; } }
			public override GRGEN_LIBGR.IMatchClass MatchClass { get { return null; } }
			public override GRGEN_LIBGR.IMatch Clone() { return new Match_ss_1_0(this); }
			public override GRGEN_LIBGR.IMatch Clone(IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap) { return new Match_ss_1_0(this, oldToNewMap); }
			public void SetMatchOfEnclosingPattern(GRGEN_LIBGR.IMatch matchOfEnclosingPattern) { _matchOfEnclosingPattern = matchOfEnclosingPattern; }
			public Match_ss_1_0 nextWithSameHash;
			public void CleanNextWithSameHash() {
				Match_ss_1_0 cur = this;
				while(cur != null) {
					Match_ss_1_0 next = cur.nextWithSameHash;
					cur.nextWithSameHash = null;
					cur = next;
				}
			}

			public void AssignContent(Match_ss_1_0 that)
			{
				_node_v0 = that._node_v0;
				_node_r0 = that._node_r0;
				_node_v8 = that._node_v8;
				_node_v0_p0 = that._node_v0_p0;
				_node_v1 = that._node_v1;
				_node_v2 = that._node_v2;
				_node_v8_p0 = that._node_v8_p0;
				_node_v9 = that._node_v9;
				_node_v1_p0 = that._node_v1_p0;
				_node_v3 = that._node_v3;
				_node_v10 = that._node_v10;
				_node_v3_p0 = that._node_v3_p0;
				_node_v4 = that._node_v4;
				_node_v6 = that._node_v6;
				_node_v7 = that._node_v7;
				_node_v10_p0 = that._node_v10_p0;
				_node_v11 = that._node_v11;
				_node_v13 = that._node_v13;
				_node_v14 = that._node_v14;
				_node_v5 = that._node_v5;
				_node_v12 = that._node_v12;
				_node_rn0 = that._node_rn0;
				_node_right = that._node_right;
				_node_rn1 = that._node_rn1;
				_node_left = that._node_left;
				_edge_c0 = that._edge_c0;
				_edge_c1 = that._edge_c1;
				_edge_c2 = that._edge_c2;
				_edge_c3 = that._edge_c3;
				_edge_c4 = that._edge_c4;
				_edge_c5 = that._edge_c5;
				_edge_c6 = that._edge_c6;
				_edge_c7 = that._edge_c7;
				_edge_c8 = that._edge_c8;
				_edge_c9 = that._edge_c9;
				_edge_c10 = that._edge_c10;
				_edge_c11 = that._edge_c11;
				_edge_c12 = that._edge_c12;
				_edge_c13 = that._edge_c13;
				_edge_c14 = that._edge_c14;
				_edge_c15 = that._edge_c15;
				_edge_c16 = that._edge_c16;
				_edge_c17 = that._edge_c17;
				_edge_c18 = that._edge_c18;
				_edge_c19 = that._edge_c19;
				_edge__edge0 = that._edge__edge0;
				_edge__edge1 = that._edge__edge1;
				_edge__edge2 = that._edge__edge2;
				_edge__edge3 = that._edge__edge3;
				_edge__edge4 = that._edge__edge4;
				@_pat0 = that.@_pat0;
				@_pat1 = that.@_pat1;
				@_pat2 = that.@_pat2;
				@_pat3 = that.@_pat3;
				@_pat4 = that.@_pat4;
				@_pat5 = that.@_pat5;
				@_pat6 = that.@_pat6;
				@_pat7 = that.@_pat7;
				@_pat8 = that.@_pat8;
				@_pat9 = that.@_pat9;
				@_pat10 = that.@_pat10;
			}

			public Match_ss_1_0(Match_ss_1_0 that)
			{
				AssignContent(that);
			}
			public void AssignContent(Match_ss_1_0 that, IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap)
			{
				_node_v0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v0];
				_node_r0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_r0];
				_node_v8 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v8];
				_node_v0_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v0_p0];
				_node_v1 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v1];
				_node_v2 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v2];
				_node_v8_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v8_p0];
				_node_v9 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v9];
				_node_v1_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v1_p0];
				_node_v3 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v3];
				_node_v10 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v10];
				_node_v3_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v3_p0];
				_node_v4 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v4];
				_node_v6 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v6];
				_node_v7 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v7];
				_node_v10_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v10_p0];
				_node_v11 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v11];
				_node_v13 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v13];
				_node_v14 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v14];
				_node_v5 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v5];
				_node_v12 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v12];
				_node_rn0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_rn0];
				_node_right = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_right];
				_node_rn1 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_rn1];
				_node_left = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_left];
				_edge_c0 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c0];
				_edge_c1 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c1];
				_edge_c2 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c2];
				_edge_c3 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c3];
				_edge_c4 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c4];
				_edge_c5 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c5];
				_edge_c6 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c6];
				_edge_c7 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c7];
				_edge_c8 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c8];
				_edge_c9 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c9];
				_edge_c10 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c10];
				_edge_c11 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c11];
				_edge_c12 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c12];
				_edge_c13 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c13];
				_edge_c14 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c14];
				_edge_c15 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c15];
				_edge_c16 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c16];
				_edge_c17 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c17];
				_edge_c18 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c18];
				_edge_c19 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c19];
				_edge__edge0 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge0];
				_edge__edge1 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge1];
				_edge__edge2 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge2];
				_edge__edge3 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge3];
				_edge__edge4 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge4];
				@_pat0 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat0, oldToNewMap);
				@_pat1 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat1, oldToNewMap);
				@_pat2 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat2, oldToNewMap);
				@_pat3 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat3, oldToNewMap);
				@_pat4 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat4, oldToNewMap);
				@_pat5 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat5, oldToNewMap);
				@_pat6 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat6, oldToNewMap);
				@_pat7 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat7, oldToNewMap);
				@_pat8 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat8, oldToNewMap);
				@_pat9 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat9, oldToNewMap);
				@_pat10 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat10, oldToNewMap);
			}

			public Match_ss_1_0(Match_ss_1_0 that, IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap)
			{
				AssignContent(that, oldToNewMap);
			}
			public Match_ss_1_0()
			{
			}

			public bool IsEqual(Match_ss_1_0 that)
			{
				if(that==null) return false;
				if(_node_v0 != that._node_v0) return false;
				if(_node_r0 != that._node_r0) return false;
				if(_node_v8 != that._node_v8) return false;
				if(_node_v0_p0 != that._node_v0_p0) return false;
				if(_node_v1 != that._node_v1) return false;
				if(_node_v2 != that._node_v2) return false;
				if(_node_v8_p0 != that._node_v8_p0) return false;
				if(_node_v9 != that._node_v9) return false;
				if(_node_v1_p0 != that._node_v1_p0) return false;
				if(_node_v3 != that._node_v3) return false;
				if(_node_v10 != that._node_v10) return false;
				if(_node_v3_p0 != that._node_v3_p0) return false;
				if(_node_v4 != that._node_v4) return false;
				if(_node_v6 != that._node_v6) return false;
				if(_node_v7 != that._node_v7) return false;
				if(_node_v10_p0 != that._node_v10_p0) return false;
				if(_node_v11 != that._node_v11) return false;
				if(_node_v13 != that._node_v13) return false;
				if(_node_v14 != that._node_v14) return false;
				if(_node_v5 != that._node_v5) return false;
				if(_node_v12 != that._node_v12) return false;
				if(_node_rn0 != that._node_rn0) return false;
				if(_node_right != that._node_right) return false;
				if(_node_rn1 != that._node_rn1) return false;
				if(_node_left != that._node_left) return false;
				if(_edge_c0 != that._edge_c0) return false;
				if(_edge_c1 != that._edge_c1) return false;
				if(_edge_c2 != that._edge_c2) return false;
				if(_edge_c3 != that._edge_c3) return false;
				if(_edge_c4 != that._edge_c4) return false;
				if(_edge_c5 != that._edge_c5) return false;
				if(_edge_c6 != that._edge_c6) return false;
				if(_edge_c7 != that._edge_c7) return false;
				if(_edge_c8 != that._edge_c8) return false;
				if(_edge_c9 != that._edge_c9) return false;
				if(_edge_c10 != that._edge_c10) return false;
				if(_edge_c11 != that._edge_c11) return false;
				if(_edge_c12 != that._edge_c12) return false;
				if(_edge_c13 != that._edge_c13) return false;
				if(_edge_c14 != that._edge_c14) return false;
				if(_edge_c15 != that._edge_c15) return false;
				if(_edge_c16 != that._edge_c16) return false;
				if(_edge_c17 != that._edge_c17) return false;
				if(_edge_c18 != that._edge_c18) return false;
				if(_edge_c19 != that._edge_c19) return false;
				if(_edge__edge0 != that._edge__edge0) return false;
				if(_edge__edge1 != that._edge__edge1) return false;
				if(_edge__edge2 != that._edge__edge2) return false;
				if(_edge__edge3 != that._edge__edge3) return false;
				if(_edge__edge4 != that._edge__edge4) return false;
				if(!@_pat0.IsEqual(that.@_pat0)) return false;
				if(!@_pat1.IsEqual(that.@_pat1)) return false;
				if(!@_pat2.IsEqual(that.@_pat2)) return false;
				if(!@_pat3.IsEqual(that.@_pat3)) return false;
				if(!@_pat4.IsEqual(that.@_pat4)) return false;
				if(!@_pat5.IsEqual(that.@_pat5)) return false;
				if(!@_pat6.IsEqual(that.@_pat6)) return false;
				if(!@_pat7.IsEqual(that.@_pat7)) return false;
				if(!@_pat8.IsEqual(that.@_pat8)) return false;
				if(!@_pat9.IsEqual(that.@_pat9)) return false;
				if(!@_pat10.IsEqual(that.@_pat10)) return false;
				return true;
			}
		}


		public class Extractor
		{
			public static List<GRGEN_MODEL.ILocale> Extract_v0(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.ILocale> resultList = new List<GRGEN_MODEL.ILocale>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v0);
				return resultList;
			}
			public static List<GRGEN_LIBGR.INode> Extract_r0(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_LIBGR.INode> resultList = new List<GRGEN_LIBGR.INode>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_r0);
				return resultList;
			}
			public static List<GRGEN_MODEL.ILocale> Extract_v8(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.ILocale> resultList = new List<GRGEN_MODEL.ILocale>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v8);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v0_p0(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v0_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IRoute> Extract_v1(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IRoute> resultList = new List<GRGEN_MODEL.IRoute>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v1);
				return resultList;
			}
			public static List<GRGEN_MODEL.IOccupiedBy> Extract_v2(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IOccupiedBy> resultList = new List<GRGEN_MODEL.IOccupiedBy>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v2);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v8_p0(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v8_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IOccupiedBy> Extract_v9(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IOccupiedBy> resultList = new List<GRGEN_MODEL.IOccupiedBy>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v9);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v1_p0(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v1_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IRobot> Extract_v3(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IRobot> resultList = new List<GRGEN_MODEL.IRobot>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v3);
				return resultList;
			}
			public static List<GRGEN_MODEL.IRobot> Extract_v10(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IRobot> resultList = new List<GRGEN_MODEL.IRobot>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v10);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v3_p0(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v3_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IID> Extract_v4(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IID> resultList = new List<GRGEN_MODEL.IID>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v4);
				return resultList;
			}
			public static List<GRGEN_MODEL.ISLck> Extract_v6(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.ISLck> resultList = new List<GRGEN_MODEL.ISLck>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v6);
				return resultList;
			}
			public static List<GRGEN_MODEL.IMvmt> Extract_v7(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IMvmt> resultList = new List<GRGEN_MODEL.IMvmt>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v7);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v10_p0(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v10_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IID> Extract_v11(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IID> resultList = new List<GRGEN_MODEL.IID>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v11);
				return resultList;
			}
			public static List<GRGEN_MODEL.ISLck> Extract_v13(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.ISLck> resultList = new List<GRGEN_MODEL.ISLck>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v13);
				return resultList;
			}
			public static List<GRGEN_MODEL.IMvmt> Extract_v14(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IMvmt> resultList = new List<GRGEN_MODEL.IMvmt>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v14);
				return resultList;
			}
			public static List<GRGEN_MODEL.IN1> Extract_v5(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IN1> resultList = new List<GRGEN_MODEL.IN1>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v5);
				return resultList;
			}
			public static List<GRGEN_MODEL.IN0> Extract_v12(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IN0> resultList = new List<GRGEN_MODEL.IN0>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_v12);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_rn0(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_rn0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_right(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_right);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_rn1(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_rn1);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_left(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.node_left);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c0(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c1(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c1);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c2(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c2);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c3(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c3);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c4(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c4);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c5(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c5);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c6(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c6);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c7(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c7);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c8(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c8);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c9(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c9);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c10(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c10);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c11(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c11);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c12(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c12);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c13(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c13);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c14(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c14);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c15(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c15);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c16(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c16);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c17(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c17);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c18(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c18);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c19(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge_c19);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge0(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge__edge0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge1(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge__edge1);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge2(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge__edge2);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge3(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge__edge3);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge4(List<IMatch_ss_1_0> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_ss_1_0 match in matchList)
					resultList.Add(match.edge__edge4);
				return resultList;
			}
		}


		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> ConvertAsNeeded(object parameter)
		{
			if(parameter is List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>)
				return ((List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>)parameter);
			else
				return GRGEN_LIBGR.MatchListHelper.ToList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>((IList<GRGEN_LIBGR.IMatch>)parameter);
		}
	}

	
	public partial class ArrayHelper
	{
		private static GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 instanceBearingAttributeForSearch_ss_1_0 = new GRGEN_ACTIONS.Rule_ss_1_0.Match_ss_1_0();
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v0)) {
					seenValues[list[pos].@node_v0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v0, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_r0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_LIBGR.INode, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_LIBGR.INode, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_r0)) {
					seenValues[list[pos].@node_r0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_r0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_r0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_r0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_r0, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_r0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_LIBGR.INode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_r0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_r0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_LIBGR.INode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_r0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_r0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_LIBGR.INode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_r0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_r0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_LIBGR.INode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_r0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v8(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v8)) {
					seenValues[list[pos].@node_v8].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v8, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v8(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v8)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v8, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v8(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v8(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v8(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v8(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v8.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v0_p0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v0_p0)) {
					seenValues[list[pos].@node_v0_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v0_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v0_p0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v0_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v0_p0, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v0_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v0_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v0_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v0_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v0_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v0_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v0_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v0_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v1(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IRoute, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IRoute, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v1)) {
					seenValues[list[pos].@node_v1].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v1, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v1(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IRoute, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IRoute, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v1)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v1, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v1(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IRoute entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v1(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IRoute entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v1(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IRoute entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v1(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IRoute entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v1.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v2(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v2)) {
					seenValues[list[pos].@node_v2].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v2, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v2(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v2)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v2, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v2(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v2(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v2(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v2(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v2.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v8_p0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v8_p0)) {
					seenValues[list[pos].@node_v8_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v8_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v8_p0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v8_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v8_p0, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v8_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v8_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v8_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v8_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v8_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v8_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v8_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v8_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v9(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v9)) {
					seenValues[list[pos].@node_v9].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v9, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v9(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v9)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v9, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v9(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v9(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v9(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v9(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v9.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v1_p0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v1_p0)) {
					seenValues[list[pos].@node_v1_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v1_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v1_p0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v1_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v1_p0, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v1_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v1_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v1_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v1_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v1_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v1_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v1_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v1_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v3(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IRobot, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IRobot, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v3)) {
					seenValues[list[pos].@node_v3].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v3, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v3(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IRobot, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IRobot, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v3)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v3, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v3(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IRobot entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v3(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IRobot entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v3(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IRobot entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v3(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IRobot entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v3.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v10(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IRobot, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IRobot, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v10)) {
					seenValues[list[pos].@node_v10].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v10, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v10(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IRobot, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IRobot, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v10)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v10, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v10(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IRobot entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v10(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IRobot entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v10(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IRobot entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v10(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IRobot entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v10.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v3_p0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v3_p0)) {
					seenValues[list[pos].@node_v3_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v3_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v3_p0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v3_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v3_p0, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v3_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v3_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v3_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v3_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v3_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v3_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v3_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v3_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v4(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IID, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IID, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v4)) {
					seenValues[list[pos].@node_v4].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v4, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v4(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IID, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IID, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v4)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v4, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v4(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IID entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v4(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IID entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v4(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IID entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v4(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IID entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v4.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v6(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.ISLck, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.ISLck, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v6)) {
					seenValues[list[pos].@node_v6].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v6, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v6(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.ISLck, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ISLck, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v6)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v6, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v6(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.ISLck entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v6(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.ISLck entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v6(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.ISLck entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v6(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.ISLck entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v6.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v7(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IMvmt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IMvmt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v7)) {
					seenValues[list[pos].@node_v7].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v7, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v7(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IMvmt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IMvmt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v7)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v7, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v7(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IMvmt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v7(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IMvmt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v7(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IMvmt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v7(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IMvmt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v7.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v10_p0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v10_p0)) {
					seenValues[list[pos].@node_v10_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v10_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v10_p0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v10_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v10_p0, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v10_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v10_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v10_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v10_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v10_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v10_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v10_p0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v10_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v11(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IID, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IID, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v11)) {
					seenValues[list[pos].@node_v11].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v11, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v11(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IID, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IID, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v11)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v11, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v11(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IID entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v11(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IID entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v11(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IID entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v11(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IID entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v11.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v13(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.ISLck, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.ISLck, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v13)) {
					seenValues[list[pos].@node_v13].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v13, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v13(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.ISLck, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ISLck, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v13)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v13, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v13(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.ISLck entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v13(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.ISLck entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v13(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.ISLck entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v13(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.ISLck entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v13.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v14(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IMvmt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IMvmt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v14)) {
					seenValues[list[pos].@node_v14].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v14, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v14(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IMvmt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IMvmt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v14)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v14, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v14(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IMvmt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v14(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IMvmt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v14(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IMvmt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v14(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IMvmt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v14.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v5(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IN1, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IN1, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v5)) {
					seenValues[list[pos].@node_v5].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v5, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v5(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IN1, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IN1, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v5)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v5, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v5(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IN1 entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v5(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IN1 entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v5(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IN1 entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v5(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IN1 entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v5.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_v12(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IN0, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IN0, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v12)) {
					seenValues[list[pos].@node_v12].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v12, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_v12(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IN0, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IN0, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v12)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v12, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_v12(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IN0 entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_v12(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IN0 entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v12(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IN0 entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_v12(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IN0 entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v12.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_rn0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_rn0)) {
					seenValues[list[pos].@node_rn0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_rn0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_rn0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_rn0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_rn0, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_rn0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_rn0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_rn0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_rn0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_rn0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_rn0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_rn0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_rn0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_right(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_right)) {
					seenValues[list[pos].@node_right].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_right, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_right(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_right)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_right, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_right(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_right.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_right(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_right.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_right(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_right.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_right(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_right.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_rn1(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_rn1)) {
					seenValues[list[pos].@node_rn1].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_rn1, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_rn1(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_rn1)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_rn1, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_rn1(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_rn1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_rn1(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_rn1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_rn1(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_rn1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_rn1(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_rn1.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_left(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_left)) {
					seenValues[list[pos].@node_left].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_left, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_left(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_left)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_left, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_left(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_left.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_left(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_left.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_left(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_left.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_left(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_left.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c0)) {
					seenValues[list[pos].@edge_c0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c0, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c1(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c1)) {
					seenValues[list[pos].@edge_c1].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c1, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c1(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c1)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c1, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c1(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c1(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c1(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c1(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c1.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c2(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c2)) {
					seenValues[list[pos].@edge_c2].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c2, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c2(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c2)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c2, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c2(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c2(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c2(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c2(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c2.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c3(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c3)) {
					seenValues[list[pos].@edge_c3].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c3, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c3(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c3)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c3, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c3(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c3(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c3(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c3(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c3.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c4(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c4)) {
					seenValues[list[pos].@edge_c4].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c4, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c4(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c4)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c4, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c4(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c4(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c4(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c4(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c4.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c5(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c5)) {
					seenValues[list[pos].@edge_c5].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c5, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c5(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c5)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c5, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c5(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c5(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c5(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c5(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c5.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c6(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c6)) {
					seenValues[list[pos].@edge_c6].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c6, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c6(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c6)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c6, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c6(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c6(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c6(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c6(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c6.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c7(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c7)) {
					seenValues[list[pos].@edge_c7].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c7, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c7(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c7)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c7, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c7(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c7(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c7(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c7(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c7.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c8(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c8)) {
					seenValues[list[pos].@edge_c8].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c8, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c8(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c8)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c8, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c8(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c8(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c8(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c8(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c8.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c9(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c9)) {
					seenValues[list[pos].@edge_c9].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c9, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c9(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c9)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c9, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c9(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c9(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c9(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c9(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c9.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c10(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c10)) {
					seenValues[list[pos].@edge_c10].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c10, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c10(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c10)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c10, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c10(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c10(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c10(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c10(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c10.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c11(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c11)) {
					seenValues[list[pos].@edge_c11].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c11, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c11(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c11)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c11, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c11(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c11(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c11(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c11(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c11.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c12(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c12)) {
					seenValues[list[pos].@edge_c12].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c12, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c12(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c12)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c12, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c12(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c12(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c12(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c12(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c12.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c13(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c13)) {
					seenValues[list[pos].@edge_c13].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c13, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c13(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c13)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c13, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c13(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c13(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c13(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c13(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c13.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c14(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c14)) {
					seenValues[list[pos].@edge_c14].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c14, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c14(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c14)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c14, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c14(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c14(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c14(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c14(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c14.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c15(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c15)) {
					seenValues[list[pos].@edge_c15].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c15, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c15(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c15)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c15, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c15(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c15(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c15(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c15(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c15.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c16(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c16)) {
					seenValues[list[pos].@edge_c16].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c16, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c16(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c16)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c16, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c16(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c16(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c16(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c16(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c16.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c17(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c17)) {
					seenValues[list[pos].@edge_c17].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c17, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c17(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c17)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c17, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c17(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c17.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c17(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c17.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c17(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c17.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c17(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c17.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c18(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c18)) {
					seenValues[list[pos].@edge_c18].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c18, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c18(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c18)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c18, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c18(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c18.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c18(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c18.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c18(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c18.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c18(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c18.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy_c19(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c19)) {
					seenValues[list[pos].@edge_c19].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c19, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy_c19(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c19)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c19, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy_c19(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c19.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy_c19(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c19.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c19(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c19.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy_c19(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c19.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy__edge0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge0)) {
					seenValues[list[pos].@edge__edge0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy__edge0(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge0, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy__edge0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy__edge0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy__edge0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy__edge0(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy__edge1(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge1)) {
					seenValues[list[pos].@edge__edge1].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge1, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy__edge1(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge1)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge1, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy__edge1(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy__edge1(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy__edge1(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy__edge1(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge1.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy__edge2(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge2)) {
					seenValues[list[pos].@edge__edge2].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge2, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy__edge2(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge2)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge2, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy__edge2(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy__edge2(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy__edge2(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy__edge2(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge2.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy__edge3(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge3)) {
					seenValues[list[pos].@edge__edge3].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge3, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy__edge3(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge3)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge3, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy__edge3(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy__edge3(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy__edge3(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy__edge3(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge3.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_groupBy__edge4(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge4)) {
					seenValues[list[pos].@edge__edge4].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> tempList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge4, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			foreach(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> Array_ss_1_0_keepOneForEachBy__edge4(List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list)
		{
			List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> newList = new List<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0 element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge4)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge4, null);
				}
			}
			return newList;
		}
		public static int Array_ss_1_0_indexOfBy__edge4(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_indexOfBy__edge4(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy__edge4(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_ss_1_0_lastIndexOfBy__edge4(IList<GRGEN_ACTIONS.Rule_ss_1_0.IMatch_ss_1_0> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge4.Equals(entry))
					return i;
			return -1;
		}
	}

	public class Rule_initMvmt : GRGEN_LGSP.LGSPRulePattern
	{
		private static Rule_initMvmt instance = null;
		public static Rule_initMvmt Instance { get { if(instance==null) { instance = new Rule_initMvmt(); instance.initialize(); } return instance; } }

		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_r0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v4_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v7_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v14_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v0_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v1_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v2_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v3_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v4_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v5_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v6_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v7_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v8_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v9_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v14_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v15_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v1_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v2_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v5_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v8_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v10_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v16_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v10_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v11_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v13_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v16_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v17_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v19_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v12_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v18_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v12_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_v18_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_y0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_n_right_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_y2_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_y3_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_y1_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_n_left_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] initMvmt_node_e0_AllowedTypes = null;
		public static bool[] initMvmt_node_v0_IsAllowedType = null;
		public static bool[] initMvmt_node_r0_IsAllowedType = null;
		public static bool[] initMvmt_node_v4_IsAllowedType = null;
		public static bool[] initMvmt_node_v7_IsAllowedType = null;
		public static bool[] initMvmt_node_v14_IsAllowedType = null;
		public static bool[] initMvmt_node_v0_p0_IsAllowedType = null;
		public static bool[] initMvmt_node_v1_IsAllowedType = null;
		public static bool[] initMvmt_node_v2_IsAllowedType = null;
		public static bool[] initMvmt_node_v3_IsAllowedType = null;
		public static bool[] initMvmt_node_v4_p0_IsAllowedType = null;
		public static bool[] initMvmt_node_v5_IsAllowedType = null;
		public static bool[] initMvmt_node_v6_IsAllowedType = null;
		public static bool[] initMvmt_node_v7_p0_IsAllowedType = null;
		public static bool[] initMvmt_node_v8_IsAllowedType = null;
		public static bool[] initMvmt_node_v9_IsAllowedType = null;
		public static bool[] initMvmt_node_v14_p0_IsAllowedType = null;
		public static bool[] initMvmt_node_v15_IsAllowedType = null;
		public static bool[] initMvmt_node_v1_p0_IsAllowedType = null;
		public static bool[] initMvmt_node_v2_p0_IsAllowedType = null;
		public static bool[] initMvmt_node_v5_p0_IsAllowedType = null;
		public static bool[] initMvmt_node_v8_p0_IsAllowedType = null;
		public static bool[] initMvmt_node_v10_IsAllowedType = null;
		public static bool[] initMvmt_node_v16_IsAllowedType = null;
		public static bool[] initMvmt_node_v10_p0_IsAllowedType = null;
		public static bool[] initMvmt_node_v11_IsAllowedType = null;
		public static bool[] initMvmt_node_v13_IsAllowedType = null;
		public static bool[] initMvmt_node_v16_p0_IsAllowedType = null;
		public static bool[] initMvmt_node_v17_IsAllowedType = null;
		public static bool[] initMvmt_node_v19_IsAllowedType = null;
		public static bool[] initMvmt_node_v12_IsAllowedType = null;
		public static bool[] initMvmt_node_v18_IsAllowedType = null;
		public static bool[] initMvmt_node_v12_p0_IsAllowedType = null;
		public static bool[] initMvmt_node_v18_p0_IsAllowedType = null;
		public static bool[] initMvmt_node_y0_IsAllowedType = null;
		public static bool[] initMvmt_node_n_right_IsAllowedType = null;
		public static bool[] initMvmt_node_y2_IsAllowedType = null;
		public static bool[] initMvmt_node_y3_IsAllowedType = null;
		public static bool[] initMvmt_node_y1_IsAllowedType = null;
		public static bool[] initMvmt_node_n_left_IsAllowedType = null;
		public static bool[] initMvmt_node_e0_IsAllowedType = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c0_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c1_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c2_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c3_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c4_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c5_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c6_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c7_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c8_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c9_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c10_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c11_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c12_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c13_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c14_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c15_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c16_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c17_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c18_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c19_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c20_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c21_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c22_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c23_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c24_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c25_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c26_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c27_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c28_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c29_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c30_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge_c31_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge__edge0_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge__edge1_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge__edge2_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge__edge3_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge__edge4_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge__edge5_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge__edge6_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge__edge7_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge__edge8_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge__edge9_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge__edge10_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] initMvmt_edge__edge11_AllowedTypes = null;
		public static bool[] initMvmt_edge_c0_IsAllowedType = null;
		public static bool[] initMvmt_edge_c1_IsAllowedType = null;
		public static bool[] initMvmt_edge_c2_IsAllowedType = null;
		public static bool[] initMvmt_edge_c3_IsAllowedType = null;
		public static bool[] initMvmt_edge_c4_IsAllowedType = null;
		public static bool[] initMvmt_edge_c5_IsAllowedType = null;
		public static bool[] initMvmt_edge_c6_IsAllowedType = null;
		public static bool[] initMvmt_edge_c7_IsAllowedType = null;
		public static bool[] initMvmt_edge_c8_IsAllowedType = null;
		public static bool[] initMvmt_edge_c9_IsAllowedType = null;
		public static bool[] initMvmt_edge_c10_IsAllowedType = null;
		public static bool[] initMvmt_edge_c11_IsAllowedType = null;
		public static bool[] initMvmt_edge_c12_IsAllowedType = null;
		public static bool[] initMvmt_edge_c13_IsAllowedType = null;
		public static bool[] initMvmt_edge_c14_IsAllowedType = null;
		public static bool[] initMvmt_edge_c15_IsAllowedType = null;
		public static bool[] initMvmt_edge_c16_IsAllowedType = null;
		public static bool[] initMvmt_edge_c17_IsAllowedType = null;
		public static bool[] initMvmt_edge_c18_IsAllowedType = null;
		public static bool[] initMvmt_edge_c19_IsAllowedType = null;
		public static bool[] initMvmt_edge_c20_IsAllowedType = null;
		public static bool[] initMvmt_edge_c21_IsAllowedType = null;
		public static bool[] initMvmt_edge_c22_IsAllowedType = null;
		public static bool[] initMvmt_edge_c23_IsAllowedType = null;
		public static bool[] initMvmt_edge_c24_IsAllowedType = null;
		public static bool[] initMvmt_edge_c25_IsAllowedType = null;
		public static bool[] initMvmt_edge_c26_IsAllowedType = null;
		public static bool[] initMvmt_edge_c27_IsAllowedType = null;
		public static bool[] initMvmt_edge_c28_IsAllowedType = null;
		public static bool[] initMvmt_edge_c29_IsAllowedType = null;
		public static bool[] initMvmt_edge_c30_IsAllowedType = null;
		public static bool[] initMvmt_edge_c31_IsAllowedType = null;
		public static bool[] initMvmt_edge__edge0_IsAllowedType = null;
		public static bool[] initMvmt_edge__edge1_IsAllowedType = null;
		public static bool[] initMvmt_edge__edge2_IsAllowedType = null;
		public static bool[] initMvmt_edge__edge3_IsAllowedType = null;
		public static bool[] initMvmt_edge__edge4_IsAllowedType = null;
		public static bool[] initMvmt_edge__edge5_IsAllowedType = null;
		public static bool[] initMvmt_edge__edge6_IsAllowedType = null;
		public static bool[] initMvmt_edge__edge7_IsAllowedType = null;
		public static bool[] initMvmt_edge__edge8_IsAllowedType = null;
		public static bool[] initMvmt_edge__edge9_IsAllowedType = null;
		public static bool[] initMvmt_edge__edge10_IsAllowedType = null;
		public static bool[] initMvmt_edge__edge11_IsAllowedType = null;
		public enum initMvmt_NodeNums { @v0, @r0, @v4, @v7, @v14, @v0_p0, @v1, @v2, @v3, @v4_p0, @v5, @v6, @v7_p0, @v8, @v9, @v14_p0, @v15, @v1_p0, @v2_p0, @v5_p0, @v8_p0, @v10, @v16, @v10_p0, @v11, @v13, @v16_p0, @v17, @v19, @v12, @v18, @v12_p0, @v18_p0, @y0, @n_right, @y2, @y3, @y1, @n_left, @e0, };
		public enum initMvmt_EdgeNums { @c0, @c1, @c2, @c3, @c4, @c5, @c6, @c7, @c8, @c9, @c10, @c11, @c12, @c13, @c14, @c15, @c16, @c17, @c18, @c19, @c20, @c21, @c22, @c23, @c24, @c25, @c26, @c27, @c28, @c29, @c30, @c31, @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, @_edge9, @_edge10, @_edge11, };
		public enum initMvmt_VariableNums { };
		public enum initMvmt_SubNums { @pat0, @pat1, @pat2, @pat3, @pat4, @pat5, @pat6, @pat7, @pat8, @pat9, @pat10, @pat11, @pat12, @pat13, @pat14, @pat15, };
		public enum initMvmt_AltNums { };
		public enum initMvmt_IterNums { };





		public static Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> fill_anonymous_set_11934(GRGEN_LIBGR.INode item0, GRGEN_LIBGR.INode item1, GRGEN_LIBGR.INode item2, GRGEN_LIBGR.INode item3, GRGEN_LIBGR.INode item4, GRGEN_LIBGR.INode item5, GRGEN_LIBGR.INode item6, GRGEN_LIBGR.INode item7, GRGEN_LIBGR.INode item8, GRGEN_LIBGR.INode item9, GRGEN_LIBGR.INode item10, GRGEN_LIBGR.INode item11, GRGEN_LIBGR.INode item12, GRGEN_LIBGR.INode item13, GRGEN_LIBGR.INode item14, GRGEN_LIBGR.INode item15, GRGEN_LIBGR.INode item16, GRGEN_LIBGR.INode item17, GRGEN_LIBGR.INode item18, GRGEN_LIBGR.INode item19, GRGEN_LIBGR.INode item20) {
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> anonymous_set_11934 = new Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType>();
			anonymous_set_11934[item0] = null;
			anonymous_set_11934[item1] = null;
			anonymous_set_11934[item2] = null;
			anonymous_set_11934[item3] = null;
			anonymous_set_11934[item4] = null;
			anonymous_set_11934[item5] = null;
			anonymous_set_11934[item6] = null;
			anonymous_set_11934[item7] = null;
			anonymous_set_11934[item8] = null;
			anonymous_set_11934[item9] = null;
			anonymous_set_11934[item10] = null;
			anonymous_set_11934[item11] = null;
			anonymous_set_11934[item12] = null;
			anonymous_set_11934[item13] = null;
			anonymous_set_11934[item14] = null;
			anonymous_set_11934[item15] = null;
			anonymous_set_11934[item16] = null;
			anonymous_set_11934[item17] = null;
			anonymous_set_11934[item18] = null;
			anonymous_set_11934[item19] = null;
			anonymous_set_11934[item20] = null;
			return anonymous_set_11934;
		}
		public static Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.INode> fill_anonymous_map_11959(GRGEN_LIBGR.INode itemkey0,GRGEN_LIBGR.INode itemvalue0, GRGEN_LIBGR.INode itemkey1,GRGEN_LIBGR.INode itemvalue1, GRGEN_LIBGR.INode itemkey2,GRGEN_LIBGR.INode itemvalue2, GRGEN_LIBGR.INode itemkey3,GRGEN_LIBGR.INode itemvalue3) {
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.INode> anonymous_map_11959 = new Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.INode>();
			anonymous_map_11959[itemkey0] = itemvalue0;
			anonymous_map_11959[itemkey1] = itemvalue1;
			anonymous_map_11959[itemkey2] = itemvalue2;
			anonymous_map_11959[itemkey3] = itemvalue3;
			return anonymous_map_11959;
		}
		public static Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.INode> fill_anonymous_map_11964() {
			Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.INode> anonymous_map_11964 = new Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.INode>();
			return anonymous_map_11964;
		}

		public GRGEN_LGSP.PatternGraph pat_initMvmt;


		private Rule_initMvmt()
			: base("initMvmt",
				new GRGEN_LIBGR.GrGenType[] { },
				new string[] { },
				new GRGEN_LIBGR.GrGenType[] { },
				new string[] { },
				new GRGEN_LIBGR.GrGenType[] { },
				new GRGEN_LGSP.LGSPFilter[] {
					new GRGEN_LGSP.LGSPFilterAutoSupplied("keepFirst", null, "keepFirst", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(int)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("keepLast", null, "keepLast", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(int)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("keepFirstFraction", null, "keepFirstFraction", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(double)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("keepLastFraction", null, "keepLastFraction", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(double)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("removeFirst", null, "removeFirst", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(int)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("removeLast", null, "removeLast", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(int)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("removeFirstFraction", null, "removeFirstFraction", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(double)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("removeLastFraction", null, "removeLastFraction", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(double)), }, new String[] {"param"}),
				},
				new GRGEN_LIBGR.MatchClassInfo[] { },
				"de.unika.ipd.grGen.Action_ruleset.Rule_initMvmt+IMatch_initMvmt",
				"de.unika.ipd.grGen.Action_ruleset.Rule_initMvmt+Match_initMvmt"
			)
		{
		}
		private void initialize()
		{
			bool[,] initMvmt_isNodeHomomorphicGlobal = new bool[40, 40] {
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
			};
			bool[,] initMvmt_isEdgeHomomorphicGlobal = new bool[44, 44] {
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
			};
			bool[] initMvmt_isNodeTotallyHomomorphic = new bool[40] { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,  };
			bool[] initMvmt_isEdgeTotallyHomomorphic = new bool[44] { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,  };
			GRGEN_LGSP.PatternNode initMvmt_node_v0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Locale, GRGEN_MODEL.NodeType_Locale.typeVar, "GRGEN_MODEL.ILocale", "initMvmt_node_v0", "v0", initMvmt_node_v0_AllowedTypes, initMvmt_node_v0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_r0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Node, GRGEN_MODEL.NodeType_Node.typeVar, "GRGEN_LIBGR.INode", "initMvmt_node_r0", "r0", initMvmt_node_r0_AllowedTypes, initMvmt_node_r0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v4 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Locale, GRGEN_MODEL.NodeType_Locale.typeVar, "GRGEN_MODEL.ILocale", "initMvmt_node_v4", "v4", initMvmt_node_v4_AllowedTypes, initMvmt_node_v4_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v7 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Locale, GRGEN_MODEL.NodeType_Locale.typeVar, "GRGEN_MODEL.ILocale", "initMvmt_node_v7", "v7", initMvmt_node_v7_AllowedTypes, initMvmt_node_v7_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v14 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Locale, GRGEN_MODEL.NodeType_Locale.typeVar, "GRGEN_MODEL.ILocale", "initMvmt_node_v14", "v14", initMvmt_node_v14_AllowedTypes, initMvmt_node_v14_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v0_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "initMvmt_node_v0_p0", "v0_p0", initMvmt_node_v0_p0_AllowedTypes, initMvmt_node_v0_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v1 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Route, GRGEN_MODEL.NodeType_Route.typeVar, "GRGEN_MODEL.IRoute", "initMvmt_node_v1", "v1", initMvmt_node_v1_AllowedTypes, initMvmt_node_v1_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v2 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Route, GRGEN_MODEL.NodeType_Route.typeVar, "GRGEN_MODEL.IRoute", "initMvmt_node_v2", "v2", initMvmt_node_v2_AllowedTypes, initMvmt_node_v2_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v3 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@OccupiedBy, GRGEN_MODEL.NodeType_OccupiedBy.typeVar, "GRGEN_MODEL.IOccupiedBy", "initMvmt_node_v3", "v3", initMvmt_node_v3_AllowedTypes, initMvmt_node_v3_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v4_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "initMvmt_node_v4_p0", "v4_p0", initMvmt_node_v4_p0_AllowedTypes, initMvmt_node_v4_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v5 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Route, GRGEN_MODEL.NodeType_Route.typeVar, "GRGEN_MODEL.IRoute", "initMvmt_node_v5", "v5", initMvmt_node_v5_AllowedTypes, initMvmt_node_v5_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v6 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@OccupiedBy, GRGEN_MODEL.NodeType_OccupiedBy.typeVar, "GRGEN_MODEL.IOccupiedBy", "initMvmt_node_v6", "v6", initMvmt_node_v6_AllowedTypes, initMvmt_node_v6_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v7_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "initMvmt_node_v7_p0", "v7_p0", initMvmt_node_v7_p0_AllowedTypes, initMvmt_node_v7_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v8 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Route, GRGEN_MODEL.NodeType_Route.typeVar, "GRGEN_MODEL.IRoute", "initMvmt_node_v8", "v8", initMvmt_node_v8_AllowedTypes, initMvmt_node_v8_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v9 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@OccupiedBy, GRGEN_MODEL.NodeType_OccupiedBy.typeVar, "GRGEN_MODEL.IOccupiedBy", "initMvmt_node_v9", "v9", initMvmt_node_v9_AllowedTypes, initMvmt_node_v9_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v14_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "initMvmt_node_v14_p0", "v14_p0", initMvmt_node_v14_p0_AllowedTypes, initMvmt_node_v14_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v15 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@OccupiedBy, GRGEN_MODEL.NodeType_OccupiedBy.typeVar, "GRGEN_MODEL.IOccupiedBy", "initMvmt_node_v15", "v15", initMvmt_node_v15_AllowedTypes, initMvmt_node_v15_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v1_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "initMvmt_node_v1_p0", "v1_p0", initMvmt_node_v1_p0_AllowedTypes, initMvmt_node_v1_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v2_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "initMvmt_node_v2_p0", "v2_p0", initMvmt_node_v2_p0_AllowedTypes, initMvmt_node_v2_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v5_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "initMvmt_node_v5_p0", "v5_p0", initMvmt_node_v5_p0_AllowedTypes, initMvmt_node_v5_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v8_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "initMvmt_node_v8_p0", "v8_p0", initMvmt_node_v8_p0_AllowedTypes, initMvmt_node_v8_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v10 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Robot, GRGEN_MODEL.NodeType_Robot.typeVar, "GRGEN_MODEL.IRobot", "initMvmt_node_v10", "v10", initMvmt_node_v10_AllowedTypes, initMvmt_node_v10_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v16 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Robot, GRGEN_MODEL.NodeType_Robot.typeVar, "GRGEN_MODEL.IRobot", "initMvmt_node_v16", "v16", initMvmt_node_v16_AllowedTypes, initMvmt_node_v16_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v10_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "initMvmt_node_v10_p0", "v10_p0", initMvmt_node_v10_p0_AllowedTypes, initMvmt_node_v10_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v11 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@SLck, GRGEN_MODEL.NodeType_SLck.typeVar, "GRGEN_MODEL.ISLck", "initMvmt_node_v11", "v11", initMvmt_node_v11_AllowedTypes, initMvmt_node_v11_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v13 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Mvmt, GRGEN_MODEL.NodeType_Mvmt.typeVar, "GRGEN_MODEL.IMvmt", "initMvmt_node_v13", "v13", initMvmt_node_v13_AllowedTypes, initMvmt_node_v13_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v16_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "initMvmt_node_v16_p0", "v16_p0", initMvmt_node_v16_p0_AllowedTypes, initMvmt_node_v16_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v17 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@SLck, GRGEN_MODEL.NodeType_SLck.typeVar, "GRGEN_MODEL.ISLck", "initMvmt_node_v17", "v17", initMvmt_node_v17_AllowedTypes, initMvmt_node_v17_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v19 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Mvmt, GRGEN_MODEL.NodeType_Mvmt.typeVar, "GRGEN_MODEL.IMvmt", "initMvmt_node_v19", "v19", initMvmt_node_v19_AllowedTypes, initMvmt_node_v19_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v12 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@SLckRef, GRGEN_MODEL.NodeType_SLckRef.typeVar, "GRGEN_MODEL.ISLckRef", "initMvmt_node_v12", "v12", initMvmt_node_v12_AllowedTypes, initMvmt_node_v12_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v18 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@SLckRef, GRGEN_MODEL.NodeType_SLckRef.typeVar, "GRGEN_MODEL.ISLckRef", "initMvmt_node_v18", "v18", initMvmt_node_v18_AllowedTypes, initMvmt_node_v18_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v12_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "initMvmt_node_v12_p0", "v12_p0", initMvmt_node_v12_p0_AllowedTypes, initMvmt_node_v12_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_v18_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "initMvmt_node_v18_p0", "v18_p0", initMvmt_node_v18_p0_AllowedTypes, initMvmt_node_v18_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_y0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "initMvmt_node_y0", "y0", initMvmt_node_y0_AllowedTypes, initMvmt_node_y0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_n_right = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "initMvmt_node_n_right", "n_right", initMvmt_node_n_right_AllowedTypes, initMvmt_node_n_right_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_y2 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "initMvmt_node_y2", "y2", initMvmt_node_y2_AllowedTypes, initMvmt_node_y2_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_y3 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "initMvmt_node_y3", "y3", initMvmt_node_y3_AllowedTypes, initMvmt_node_y3_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_y1 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "initMvmt_node_y1", "y1", initMvmt_node_y1_AllowedTypes, initMvmt_node_y1_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_n_left = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "initMvmt_node_n_left", "n_left", initMvmt_node_n_left_AllowedTypes, initMvmt_node_n_left_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode initMvmt_node_e0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BEdge, GRGEN_MODEL.NodeType_BEdge.typeVar, "GRGEN_MODEL.IBEdge", "initMvmt_node_e0", "e0", initMvmt_node_e0_AllowedTypes, initMvmt_node_e0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c0 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c0", "c0", initMvmt_edge_c0_AllowedTypes, initMvmt_edge_c0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c1 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c1", "c1", initMvmt_edge_c1_AllowedTypes, initMvmt_edge_c1_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c2 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c2", "c2", initMvmt_edge_c2_AllowedTypes, initMvmt_edge_c2_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c3 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c3", "c3", initMvmt_edge_c3_AllowedTypes, initMvmt_edge_c3_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c4 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "initMvmt_edge_c4", "c4", initMvmt_edge_c4_AllowedTypes, initMvmt_edge_c4_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c5 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c5", "c5", initMvmt_edge_c5_AllowedTypes, initMvmt_edge_c5_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c6 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c6", "c6", initMvmt_edge_c6_AllowedTypes, initMvmt_edge_c6_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c7 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c7", "c7", initMvmt_edge_c7_AllowedTypes, initMvmt_edge_c7_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c8 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "initMvmt_edge_c8", "c8", initMvmt_edge_c8_AllowedTypes, initMvmt_edge_c8_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c9 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c9", "c9", initMvmt_edge_c9_AllowedTypes, initMvmt_edge_c9_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c10 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c10", "c10", initMvmt_edge_c10_AllowedTypes, initMvmt_edge_c10_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c11 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "initMvmt_edge_c11", "c11", initMvmt_edge_c11_AllowedTypes, initMvmt_edge_c11_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c12 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c12", "c12", initMvmt_edge_c12_AllowedTypes, initMvmt_edge_c12_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c13 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c13", "c13", initMvmt_edge_c13_AllowedTypes, initMvmt_edge_c13_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c14 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "initMvmt_edge_c14", "c14", initMvmt_edge_c14_AllowedTypes, initMvmt_edge_c14_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c15 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c15", "c15", initMvmt_edge_c15_AllowedTypes, initMvmt_edge_c15_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c16 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "initMvmt_edge_c16", "c16", initMvmt_edge_c16_AllowedTypes, initMvmt_edge_c16_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c17 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "initMvmt_edge_c17", "c17", initMvmt_edge_c17_AllowedTypes, initMvmt_edge_c17_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c18 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "initMvmt_edge_c18", "c18", initMvmt_edge_c18_AllowedTypes, initMvmt_edge_c18_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c19 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "initMvmt_edge_c19", "c19", initMvmt_edge_c19_AllowedTypes, initMvmt_edge_c19_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c20 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c20", "c20", initMvmt_edge_c20_AllowedTypes, initMvmt_edge_c20_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c21 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c21", "c21", initMvmt_edge_c21_AllowedTypes, initMvmt_edge_c21_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c22 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "initMvmt_edge_c22", "c22", initMvmt_edge_c22_AllowedTypes, initMvmt_edge_c22_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c23 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c23", "c23", initMvmt_edge_c23_AllowedTypes, initMvmt_edge_c23_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c24 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c24", "c24", initMvmt_edge_c24_AllowedTypes, initMvmt_edge_c24_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c25 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "initMvmt_edge_c25", "c25", initMvmt_edge_c25_AllowedTypes, initMvmt_edge_c25_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c26 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c26", "c26", initMvmt_edge_c26_AllowedTypes, initMvmt_edge_c26_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c27 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c27", "c27", initMvmt_edge_c27_AllowedTypes, initMvmt_edge_c27_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c28 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c28", "c28", initMvmt_edge_c28_AllowedTypes, initMvmt_edge_c28_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c29 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "initMvmt_edge_c29", "c29", initMvmt_edge_c29_AllowedTypes, initMvmt_edge_c29_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c30 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "initMvmt_edge_c30", "c30", initMvmt_edge_c30_AllowedTypes, initMvmt_edge_c30_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge_c31 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "initMvmt_edge_c31", "c31", initMvmt_edge_c31_AllowedTypes, initMvmt_edge_c31_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge__edge0 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "initMvmt_edge__edge0", "_edge0", initMvmt_edge__edge0_AllowedTypes, initMvmt_edge__edge0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge__edge1 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "initMvmt_edge__edge1", "_edge1", initMvmt_edge__edge1_AllowedTypes, initMvmt_edge__edge1_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge__edge2 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "initMvmt_edge__edge2", "_edge2", initMvmt_edge__edge2_AllowedTypes, initMvmt_edge__edge2_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge__edge3 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "initMvmt_edge__edge3", "_edge3", initMvmt_edge__edge3_AllowedTypes, initMvmt_edge__edge3_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge__edge4 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "initMvmt_edge__edge4", "_edge4", initMvmt_edge__edge4_AllowedTypes, initMvmt_edge__edge4_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge__edge5 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "initMvmt_edge__edge5", "_edge5", initMvmt_edge__edge5_AllowedTypes, initMvmt_edge__edge5_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge__edge6 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "initMvmt_edge__edge6", "_edge6", initMvmt_edge__edge6_AllowedTypes, initMvmt_edge__edge6_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge__edge7 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "initMvmt_edge__edge7", "_edge7", initMvmt_edge__edge7_AllowedTypes, initMvmt_edge__edge7_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge__edge8 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "initMvmt_edge__edge8", "_edge8", initMvmt_edge__edge8_AllowedTypes, initMvmt_edge__edge8_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge__edge9 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "initMvmt_edge__edge9", "_edge9", initMvmt_edge__edge9_AllowedTypes, initMvmt_edge__edge9_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge__edge10 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "initMvmt_edge__edge10", "_edge10", initMvmt_edge__edge10_AllowedTypes, initMvmt_edge__edge10_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge initMvmt_edge__edge11 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "initMvmt_edge__edge11", "_edge11", initMvmt_edge__edge11_AllowedTypes, initMvmt_edge__edge11_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternGraphEmbedding initMvmt_pat0 = new GRGEN_LGSP.PatternGraphEmbedding("pat0", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("initMvmt_node_v6"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "initMvmt_node_v6" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v6 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding initMvmt_pat1 = new GRGEN_LGSP.PatternGraphEmbedding("pat1", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("initMvmt_node_v7"),
					new GRGEN_EXPR.Constant("2"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "initMvmt_node_v7" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v7 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding initMvmt_pat2 = new GRGEN_LGSP.PatternGraphEmbedding("pat2", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("initMvmt_node_v8"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "initMvmt_node_v8" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v8 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding initMvmt_pat3 = new GRGEN_LGSP.PatternGraphEmbedding("pat3", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("initMvmt_node_v9"),
					new GRGEN_EXPR.Constant("1"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "initMvmt_node_v9" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v9 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding initMvmt_pat4 = new GRGEN_LGSP.PatternGraphEmbedding("pat4", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("initMvmt_node_v12"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "initMvmt_node_v12" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v12 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding initMvmt_pat5 = new GRGEN_LGSP.PatternGraphEmbedding("pat5", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("initMvmt_node_v11"),
					new GRGEN_EXPR.Constant("1"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "initMvmt_node_v11" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v11 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding initMvmt_pat6 = new GRGEN_LGSP.PatternGraphEmbedding("pat6", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("initMvmt_node_v13"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "initMvmt_node_v13" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v13 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding initMvmt_pat7 = new GRGEN_LGSP.PatternGraphEmbedding("pat7", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("initMvmt_node_v0"),
					new GRGEN_EXPR.Constant("3"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "initMvmt_node_v0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding initMvmt_pat8 = new GRGEN_LGSP.PatternGraphEmbedding("pat8", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("initMvmt_node_v1"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "initMvmt_node_v1" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v1 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding initMvmt_pat9 = new GRGEN_LGSP.PatternGraphEmbedding("pat9", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("initMvmt_node_v15"),
					new GRGEN_EXPR.Constant("1"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "initMvmt_node_v15" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v15 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding initMvmt_pat10 = new GRGEN_LGSP.PatternGraphEmbedding("pat10", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("initMvmt_node_v2"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "initMvmt_node_v2" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v2 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding initMvmt_pat11 = new GRGEN_LGSP.PatternGraphEmbedding("pat11", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("initMvmt_node_v18"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "initMvmt_node_v18" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v18 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding initMvmt_pat12 = new GRGEN_LGSP.PatternGraphEmbedding("pat12", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("initMvmt_node_v3"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "initMvmt_node_v3" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v3 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding initMvmt_pat13 = new GRGEN_LGSP.PatternGraphEmbedding("pat13", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("initMvmt_node_v17"),
					new GRGEN_EXPR.Constant("1"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "initMvmt_node_v17" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v17 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding initMvmt_pat14 = new GRGEN_LGSP.PatternGraphEmbedding("pat14", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("initMvmt_node_v5"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "initMvmt_node_v5" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v5 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding initMvmt_pat15 = new GRGEN_LGSP.PatternGraphEmbedding("pat15", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("initMvmt_node_v19"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "initMvmt_node_v19" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v19 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition initMvmt_cond_0 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "initMvmt_node_v7_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "initMvmt_node_v7_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v7_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition initMvmt_cond_1 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "initMvmt_node_v8_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "initMvmt_node_v8_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v8_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition initMvmt_cond_2 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "initMvmt_node_v10_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "initMvmt_node_v10_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v10_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition initMvmt_cond_3 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "initMvmt_node_v12_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "initMvmt_node_v12_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v12_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition initMvmt_cond_4 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "initMvmt_node_v14_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "initMvmt_node_v14_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v14_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition initMvmt_cond_5 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "initMvmt_node_v0_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "initMvmt_node_v0_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v0_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition initMvmt_cond_6 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "initMvmt_node_v16_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "initMvmt_node_v16_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v16_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition initMvmt_cond_7 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "initMvmt_node_v1_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "initMvmt_node_v1_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v1_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition initMvmt_cond_8 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "initMvmt_node_v2_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "initMvmt_node_v2_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v2_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition initMvmt_cond_9 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "initMvmt_node_v18_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "initMvmt_node_v18_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v18_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition initMvmt_cond_10 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "initMvmt_node_v4_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "initMvmt_node_v4_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v4_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition initMvmt_cond_11 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "initMvmt_node_v5_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "initMvmt_node_v5_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v5_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			pat_initMvmt = new GRGEN_LGSP.PatternGraph(
				"initMvmt",
				"",
				null, "initMvmt",
				false, false,
				new GRGEN_LGSP.PatternNode[] { initMvmt_node_v0, initMvmt_node_r0, initMvmt_node_v4, initMvmt_node_v7, initMvmt_node_v14, initMvmt_node_v0_p0, initMvmt_node_v1, initMvmt_node_v2, initMvmt_node_v3, initMvmt_node_v4_p0, initMvmt_node_v5, initMvmt_node_v6, initMvmt_node_v7_p0, initMvmt_node_v8, initMvmt_node_v9, initMvmt_node_v14_p0, initMvmt_node_v15, initMvmt_node_v1_p0, initMvmt_node_v2_p0, initMvmt_node_v5_p0, initMvmt_node_v8_p0, initMvmt_node_v10, initMvmt_node_v16, initMvmt_node_v10_p0, initMvmt_node_v11, initMvmt_node_v13, initMvmt_node_v16_p0, initMvmt_node_v17, initMvmt_node_v19, initMvmt_node_v12, initMvmt_node_v18, initMvmt_node_v12_p0, initMvmt_node_v18_p0, initMvmt_node_y0, initMvmt_node_n_right, initMvmt_node_y2, initMvmt_node_y3, initMvmt_node_y1, initMvmt_node_n_left, initMvmt_node_e0 }, 
				new GRGEN_LGSP.PatternEdge[] { initMvmt_edge_c0, initMvmt_edge_c1, initMvmt_edge_c2, initMvmt_edge_c3, initMvmt_edge_c4, initMvmt_edge_c5, initMvmt_edge_c6, initMvmt_edge_c7, initMvmt_edge_c8, initMvmt_edge_c9, initMvmt_edge_c10, initMvmt_edge_c11, initMvmt_edge_c12, initMvmt_edge_c13, initMvmt_edge_c14, initMvmt_edge_c15, initMvmt_edge_c16, initMvmt_edge_c17, initMvmt_edge_c18, initMvmt_edge_c19, initMvmt_edge_c20, initMvmt_edge_c21, initMvmt_edge_c22, initMvmt_edge_c23, initMvmt_edge_c24, initMvmt_edge_c25, initMvmt_edge_c26, initMvmt_edge_c27, initMvmt_edge_c28, initMvmt_edge_c29, initMvmt_edge_c30, initMvmt_edge_c31, initMvmt_edge__edge0, initMvmt_edge__edge1, initMvmt_edge__edge2, initMvmt_edge__edge3, initMvmt_edge__edge4, initMvmt_edge__edge5, initMvmt_edge__edge6, initMvmt_edge__edge7, initMvmt_edge__edge8, initMvmt_edge__edge9, initMvmt_edge__edge10, initMvmt_edge__edge11 }, 
				new GRGEN_LGSP.PatternVariable[] {  }, 
				new GRGEN_LGSP.PatternGraphEmbedding[] { initMvmt_pat0, initMvmt_pat1, initMvmt_pat2, initMvmt_pat3, initMvmt_pat4, initMvmt_pat5, initMvmt_pat6, initMvmt_pat7, initMvmt_pat8, initMvmt_pat9, initMvmt_pat10, initMvmt_pat11, initMvmt_pat12, initMvmt_pat13, initMvmt_pat14, initMvmt_pat15 }, 
				new GRGEN_LGSP.Alternative[] {  }, 
				new GRGEN_LGSP.Iterated[] {  }, 
				new GRGEN_LGSP.PatternGraph[] {  }, 
				new GRGEN_LGSP.PatternGraph[] {  }, 
				new GRGEN_LGSP.PatternCondition[] { initMvmt_cond_0, initMvmt_cond_1, initMvmt_cond_2, initMvmt_cond_3, initMvmt_cond_4, initMvmt_cond_5, initMvmt_cond_6, initMvmt_cond_7, initMvmt_cond_8, initMvmt_cond_9, initMvmt_cond_10, initMvmt_cond_11,  }, 
				new GRGEN_LGSP.PatternYielding[] {  }, 
				new bool[40, 40] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				new bool[44, 44] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				initMvmt_isNodeHomomorphicGlobal,
				initMvmt_isEdgeHomomorphicGlobal,
				initMvmt_isNodeTotallyHomomorphic,
				initMvmt_isEdgeTotallyHomomorphic
			);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c0, initMvmt_node_v0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c0, initMvmt_node_r0);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c1, initMvmt_node_v4);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c1, initMvmt_node_r0);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c2, initMvmt_node_v7);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c2, initMvmt_node_r0);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c3, initMvmt_node_v14);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c3, initMvmt_node_r0);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c4, initMvmt_node_v0_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c4, initMvmt_node_v0);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c5, initMvmt_node_v1);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c5, initMvmt_node_v0);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c6, initMvmt_node_v2);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c6, initMvmt_node_v0);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c7, initMvmt_node_v3);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c7, initMvmt_node_v0);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c8, initMvmt_node_v4_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c8, initMvmt_node_v4);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c9, initMvmt_node_v5);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c9, initMvmt_node_v4);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c10, initMvmt_node_v6);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c10, initMvmt_node_v4);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c11, initMvmt_node_v7_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c11, initMvmt_node_v7);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c12, initMvmt_node_v8);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c12, initMvmt_node_v7);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c13, initMvmt_node_v9);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c13, initMvmt_node_v7);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c14, initMvmt_node_v14_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c14, initMvmt_node_v14);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c15, initMvmt_node_v15);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c15, initMvmt_node_v14);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c16, initMvmt_node_v1_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c16, initMvmt_node_v1);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c17, initMvmt_node_v2_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c17, initMvmt_node_v2);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c18, initMvmt_node_v5_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c18, initMvmt_node_v5);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c19, initMvmt_node_v8_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c19, initMvmt_node_v8);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c20, initMvmt_node_v10);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c20, initMvmt_node_v9);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c21, initMvmt_node_v16);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c21, initMvmt_node_v15);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c22, initMvmt_node_v10_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c22, initMvmt_node_v10);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c23, initMvmt_node_v11);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c23, initMvmt_node_v10);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c24, initMvmt_node_v13);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c24, initMvmt_node_v10);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c25, initMvmt_node_v16_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c25, initMvmt_node_v16);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c26, initMvmt_node_v17);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c26, initMvmt_node_v16);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c27, initMvmt_node_v19);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c27, initMvmt_node_v16);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c28, initMvmt_node_v12);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c28, initMvmt_node_v11);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c29, initMvmt_node_v18);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c29, initMvmt_node_v17);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c30, initMvmt_node_v12_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c30, initMvmt_node_v12);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge_c31, initMvmt_node_v18_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge_c31, initMvmt_node_v18);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge__edge0, initMvmt_node_v0_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge__edge0, initMvmt_node_y0);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge__edge1, initMvmt_node_v16_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge__edge1, initMvmt_node_n_right);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge__edge2, initMvmt_node_v7_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge__edge2, initMvmt_node_y2);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge__edge3, initMvmt_node_v2_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge__edge3, initMvmt_node_y2);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge__edge4, initMvmt_node_v14_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge__edge4, initMvmt_node_y3);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge__edge5, initMvmt_node_v5_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge__edge5, initMvmt_node_y3);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge__edge6, initMvmt_node_v8_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge__edge6, initMvmt_node_y3);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge__edge7, initMvmt_node_v4_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge__edge7, initMvmt_node_y1);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge__edge8, initMvmt_node_v1_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge__edge8, initMvmt_node_y1);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge__edge9, initMvmt_node_v10_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge__edge9, initMvmt_node_n_left);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge__edge10, initMvmt_node_v12_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge__edge10, initMvmt_node_e0);
			pat_initMvmt.edgeToSourceNode.Add(initMvmt_edge__edge11, initMvmt_node_v18_p0);
			pat_initMvmt.edgeToTargetNode.Add(initMvmt_edge__edge11, initMvmt_node_e0);

			initMvmt_node_v0.pointOfDefinition = pat_initMvmt;
			initMvmt_node_r0.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v4.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v7.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v14.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v0_p0.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v1.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v2.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v3.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v4_p0.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v5.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v6.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v7_p0.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v8.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v9.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v14_p0.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v15.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v1_p0.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v2_p0.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v5_p0.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v8_p0.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v10.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v16.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v10_p0.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v11.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v13.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v16_p0.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v17.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v19.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v12.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v18.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v12_p0.pointOfDefinition = pat_initMvmt;
			initMvmt_node_v18_p0.pointOfDefinition = pat_initMvmt;
			initMvmt_node_y0.pointOfDefinition = pat_initMvmt;
			initMvmt_node_n_right.pointOfDefinition = pat_initMvmt;
			initMvmt_node_y2.pointOfDefinition = pat_initMvmt;
			initMvmt_node_y3.pointOfDefinition = pat_initMvmt;
			initMvmt_node_y1.pointOfDefinition = pat_initMvmt;
			initMvmt_node_n_left.pointOfDefinition = pat_initMvmt;
			initMvmt_node_e0.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c0.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c1.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c2.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c3.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c4.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c5.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c6.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c7.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c8.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c9.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c10.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c11.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c12.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c13.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c14.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c15.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c16.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c17.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c18.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c19.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c20.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c21.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c22.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c23.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c24.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c25.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c26.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c27.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c28.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c29.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c30.pointOfDefinition = pat_initMvmt;
			initMvmt_edge_c31.pointOfDefinition = pat_initMvmt;
			initMvmt_edge__edge0.pointOfDefinition = pat_initMvmt;
			initMvmt_edge__edge1.pointOfDefinition = pat_initMvmt;
			initMvmt_edge__edge2.pointOfDefinition = pat_initMvmt;
			initMvmt_edge__edge3.pointOfDefinition = pat_initMvmt;
			initMvmt_edge__edge4.pointOfDefinition = pat_initMvmt;
			initMvmt_edge__edge5.pointOfDefinition = pat_initMvmt;
			initMvmt_edge__edge6.pointOfDefinition = pat_initMvmt;
			initMvmt_edge__edge7.pointOfDefinition = pat_initMvmt;
			initMvmt_edge__edge8.pointOfDefinition = pat_initMvmt;
			initMvmt_edge__edge9.pointOfDefinition = pat_initMvmt;
			initMvmt_edge__edge10.pointOfDefinition = pat_initMvmt;
			initMvmt_edge__edge11.pointOfDefinition = pat_initMvmt;
			initMvmt_pat0.PointOfDefinition = pat_initMvmt;
			initMvmt_pat1.PointOfDefinition = pat_initMvmt;
			initMvmt_pat2.PointOfDefinition = pat_initMvmt;
			initMvmt_pat3.PointOfDefinition = pat_initMvmt;
			initMvmt_pat4.PointOfDefinition = pat_initMvmt;
			initMvmt_pat5.PointOfDefinition = pat_initMvmt;
			initMvmt_pat6.PointOfDefinition = pat_initMvmt;
			initMvmt_pat7.PointOfDefinition = pat_initMvmt;
			initMvmt_pat8.PointOfDefinition = pat_initMvmt;
			initMvmt_pat9.PointOfDefinition = pat_initMvmt;
			initMvmt_pat10.PointOfDefinition = pat_initMvmt;
			initMvmt_pat11.PointOfDefinition = pat_initMvmt;
			initMvmt_pat12.PointOfDefinition = pat_initMvmt;
			initMvmt_pat13.PointOfDefinition = pat_initMvmt;
			initMvmt_pat14.PointOfDefinition = pat_initMvmt;
			initMvmt_pat15.PointOfDefinition = pat_initMvmt;

			patternGraph = pat_initMvmt;
		}


		public void Modify(GRGEN_LGSP.LGSPActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatch _curMatch)
		{
			GRGEN_LGSP.LGSPGraph graph = actionEnv.graph;
			Match_initMvmt curMatch = (Match_initMvmt)_curMatch;
			GRGEN_LGSP.LGSPNode node_v6 = curMatch._node_v6;
			GRGEN_LGSP.LGSPNode node_v7 = curMatch._node_v7;
			GRGEN_LGSP.LGSPNode node_v8 = curMatch._node_v8;
			GRGEN_LGSP.LGSPNode node_v9 = curMatch._node_v9;
			GRGEN_LGSP.LGSPNode node_v10 = curMatch._node_v10;
			GRGEN_LGSP.LGSPNode node_v12 = curMatch._node_v12;
			GRGEN_LGSP.LGSPNode node_v11 = curMatch._node_v11;
			GRGEN_LGSP.LGSPNode node_v14 = curMatch._node_v14;
			GRGEN_LGSP.LGSPNode node_v13 = curMatch._node_v13;
			GRGEN_LGSP.LGSPNode node_v0 = curMatch._node_v0;
			GRGEN_LGSP.LGSPNode node_v16 = curMatch._node_v16;
			GRGEN_LGSP.LGSPNode node_v1 = curMatch._node_v1;
			GRGEN_LGSP.LGSPNode node_v15 = curMatch._node_v15;
			GRGEN_LGSP.LGSPNode node_v2 = curMatch._node_v2;
			GRGEN_LGSP.LGSPNode node_v18 = curMatch._node_v18;
			GRGEN_LGSP.LGSPNode node_v3 = curMatch._node_v3;
			GRGEN_LGSP.LGSPNode node_v17 = curMatch._node_v17;
			GRGEN_LGSP.LGSPNode node_r0 = curMatch._node_r0;
			GRGEN_LGSP.LGSPNode node_v4 = curMatch._node_v4;
			GRGEN_LGSP.LGSPNode node_v5 = curMatch._node_v5;
			GRGEN_LGSP.LGSPNode node_v19 = curMatch._node_v19;
			GRGEN_LGSP.LGSPNode node_y0 = curMatch._node_y0;
			GRGEN_LGSP.LGSPNode node_v0_p0 = curMatch._node_v0_p0;
			GRGEN_LGSP.LGSPNode node_v12_p0 = curMatch._node_v12_p0;
			GRGEN_LGSP.LGSPNode node_e0 = curMatch._node_e0;
			GRGEN_LGSP.LGSPNode node_v18_p0 = curMatch._node_v18_p0;
			GRGEN_LGSP.LGSPNode node_v5_p0 = curMatch._node_v5_p0;
			GRGEN_LGSP.LGSPNode node_y3 = curMatch._node_y3;
			GRGEN_LGSP.LGSPNode node_v8_p0 = curMatch._node_v8_p0;
			GRGEN_LGSP.LGSPNode node_v14_p0 = curMatch._node_v14_p0;
			GRGEN_LGSP.LGSPNode node_v4_p0 = curMatch._node_v4_p0;
			GRGEN_LGSP.LGSPNode node_y1 = curMatch._node_y1;
			GRGEN_LGSP.LGSPNode node_v1_p0 = curMatch._node_v1_p0;
			GRGEN_LGSP.LGSPNode node_n_right = curMatch._node_n_right;
			GRGEN_LGSP.LGSPNode node_v16_p0 = curMatch._node_v16_p0;
			GRGEN_LGSP.LGSPNode node_v7_p0 = curMatch._node_v7_p0;
			GRGEN_LGSP.LGSPNode node_y2 = curMatch._node_y2;
			GRGEN_LGSP.LGSPNode node_v2_p0 = curMatch._node_v2_p0;
			GRGEN_LGSP.LGSPNode node_n_left = curMatch._node_n_left;
			GRGEN_LGSP.LGSPNode node_v10_p0 = curMatch._node_v10_p0;
			GRGEN_LGSP.LGSPEdge edge__edge0 = curMatch._edge__edge0;
			GRGEN_LGSP.LGSPEdge edge__edge1 = curMatch._edge__edge1;
			GRGEN_LGSP.LGSPEdge edge__edge2 = curMatch._edge__edge2;
			GRGEN_LGSP.LGSPEdge edge__edge3 = curMatch._edge__edge3;
			GRGEN_LGSP.LGSPEdge edge__edge4 = curMatch._edge__edge4;
			GRGEN_LGSP.LGSPEdge edge__edge5 = curMatch._edge__edge5;
			GRGEN_LGSP.LGSPEdge edge__edge6 = curMatch._edge__edge6;
			GRGEN_LGSP.LGSPEdge edge__edge7 = curMatch._edge__edge7;
			GRGEN_LGSP.LGSPEdge edge__edge8 = curMatch._edge__edge8;
			GRGEN_LGSP.LGSPEdge edge__edge9 = curMatch._edge__edge9;
			GRGEN_LGSP.LGSPEdge edge__edge10 = curMatch._edge__edge10;
			GRGEN_LGSP.LGSPEdge edge__edge11 = curMatch._edge__edge11;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat0 = curMatch.@_pat0;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat1 = curMatch.@_pat1;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat2 = curMatch.@_pat2;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat3 = curMatch.@_pat3;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat4 = curMatch.@_pat4;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat5 = curMatch.@_pat5;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat6 = curMatch.@_pat6;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat7 = curMatch.@_pat7;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat8 = curMatch.@_pat8;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat9 = curMatch.@_pat9;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat10 = curMatch.@_pat10;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat11 = curMatch.@_pat11;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat12 = curMatch.@_pat12;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat13 = curMatch.@_pat13;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat14 = curMatch.@_pat14;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat15 = curMatch.@_pat15;
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> var_allMatchedNodes = fill_anonymous_set_11934(((GRGEN_LIBGR.INode) node_v6), ((GRGEN_LIBGR.INode) node_v7), ((GRGEN_LIBGR.INode) node_v8), ((GRGEN_LIBGR.INode) node_v9), ((GRGEN_LIBGR.INode) node_v10), ((GRGEN_LIBGR.INode) node_v12), ((GRGEN_LIBGR.INode) node_v11), ((GRGEN_LIBGR.INode) node_v14), ((GRGEN_LIBGR.INode) node_v13), ((GRGEN_LIBGR.INode) node_v0), ((GRGEN_LIBGR.INode) node_v16), ((GRGEN_LIBGR.INode) node_v1), ((GRGEN_LIBGR.INode) node_v15), ((GRGEN_LIBGR.INode) node_v2), ((GRGEN_LIBGR.INode) node_v18), ((GRGEN_LIBGR.INode) node_v3), ((GRGEN_LIBGR.INode) node_v17), (GRGEN_LIBGR.INode)(node_r0), ((GRGEN_LIBGR.INode) node_v4), ((GRGEN_LIBGR.INode) node_v5), ((GRGEN_LIBGR.INode) node_v19));
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.INode> var_indexMap = fill_anonymous_map_11959(((GRGEN_LIBGR.INode) node_v10), ((GRGEN_LIBGR.INode) node_v10), ((GRGEN_LIBGR.INode) node_v14), ((GRGEN_LIBGR.INode) node_v14), ((GRGEN_LIBGR.INode) node_v16), ((GRGEN_LIBGR.INode) node_v16), ((GRGEN_LIBGR.INode) node_v4), ((GRGEN_LIBGR.INode) node_v4));
			Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.INode> var_tasks = fill_anonymous_map_11964();
			graph.SettingAddedNodeNames( initMvmt_addedNodeNames );
			GRGEN_MODEL.@WayPoint node_v8_d8a5577 = GRGEN_MODEL.@WayPoint.CreateNode(graph);
			GRGEN_MODEL.@BPort node_v8_d8a5577_p0 = GRGEN_MODEL.@BPort.CreateNode(graph);
			GRGEN_MODEL.@SLckRef node_v9_590976 = GRGEN_MODEL.@SLckRef.CreateNode(graph);
			GRGEN_MODEL.@BPort node_v9_590976_p0 = GRGEN_MODEL.@BPort.CreateNode(graph);
			GRGEN_MODEL.@Token node_v30_fb68827 = GRGEN_MODEL.@Token.CreateNode(graph);
			GRGEN_MODEL.@Token node_v31_ad21532 = GRGEN_MODEL.@Token.CreateNode(graph);
			GRGEN_MODEL.@SLckRef node_v14_1397187 = GRGEN_MODEL.@SLckRef.CreateNode(graph);
			GRGEN_MODEL.@WayPoint node_v13_7cbf485 = GRGEN_MODEL.@WayPoint.CreateNode(graph);
			GRGEN_MODEL.@BPort node_v14_1397187_p0 = GRGEN_MODEL.@BPort.CreateNode(graph);
			GRGEN_MODEL.@BPort node_v13_7cbf485_p0 = GRGEN_MODEL.@BPort.CreateNode(graph);
			GRGEN_MODEL.@Token node_v20_1ba6677 = GRGEN_MODEL.@Token.CreateNode(graph);
			GRGEN_MODEL.@SLckRef node_v23_9149720 = GRGEN_MODEL.@SLckRef.CreateNode(graph);
			GRGEN_MODEL.@WayPoint node_v22_a50352 = GRGEN_MODEL.@WayPoint.CreateNode(graph);
			GRGEN_MODEL.@BPort node_v23_9149720_p0 = GRGEN_MODEL.@BPort.CreateNode(graph);
			GRGEN_MODEL.@BPort node_v22_a50352_p0 = GRGEN_MODEL.@BPort.CreateNode(graph);
			GRGEN_MODEL.@Token node_v29_80f087 = GRGEN_MODEL.@Token.CreateNode(graph);
			GRGEN_MODEL.@WayPoint node_v3_f0b4571 = GRGEN_MODEL.@WayPoint.CreateNode(graph);
			GRGEN_MODEL.@BPort node_v3_f0b4571_p0 = GRGEN_MODEL.@BPort.CreateNode(graph);
			GRGEN_MODEL.@SLckRef node_v4_d14d121 = GRGEN_MODEL.@SLckRef.CreateNode(graph);
			GRGEN_MODEL.@BPort node_v4_d14d121_p0 = GRGEN_MODEL.@BPort.CreateNode(graph);
			graph.SettingAddedEdgeNames( initMvmt_addedEdgeNames );
			GRGEN_MODEL.@bPrnt edge__edge12 = GRGEN_MODEL.@bPrnt.CreateEdge(graph, node_v8_d8a5577, node_v4);
			GRGEN_MODEL.@bNode edge_c32 = GRGEN_MODEL.@bNode.CreateEdge(graph, node_v8_d8a5577_p0, node_v8_d8a5577);
			GRGEN_MODEL.@bPrnt edge__edge13 = GRGEN_MODEL.@bPrnt.CreateEdge(graph, node_v9_590976, node_v8_d8a5577);
			GRGEN_MODEL.@bNode edge_c33 = GRGEN_MODEL.@bNode.CreateEdge(graph, node_v9_590976_p0, node_v9_590976);
			GRGEN_MODEL.@bPrnt edge__edge14 = GRGEN_MODEL.@bPrnt.CreateEdge(graph, node_v30_fb68827, node_v19);
			GRGEN_MODEL.@bPrnt edge__edge15 = GRGEN_MODEL.@bPrnt.CreateEdge(graph, node_v31_ad21532, node_v19);
			GRGEN_MODEL.@bPrnt edge__edge16 = GRGEN_MODEL.@bPrnt.CreateEdge(graph, node_v14_1397187, node_v13_7cbf485);
			GRGEN_MODEL.@bNode edge_c34 = GRGEN_MODEL.@bNode.CreateEdge(graph, node_v14_1397187_p0, node_v14_1397187);
			GRGEN_MODEL.@bPrnt edge__edge17 = GRGEN_MODEL.@bPrnt.CreateEdge(graph, node_v13_7cbf485, node_v7);
			GRGEN_MODEL.@bNode edge_c35 = GRGEN_MODEL.@bNode.CreateEdge(graph, node_v13_7cbf485_p0, node_v13_7cbf485);
			GRGEN_MODEL.@bPrnt edge__edge18 = GRGEN_MODEL.@bPrnt.CreateEdge(graph, node_v20_1ba6677, node_v13);
			GRGEN_MODEL.@bPrnt edge__edge19 = GRGEN_MODEL.@bPrnt.CreateEdge(graph, node_v23_9149720, node_v22_a50352);
			GRGEN_MODEL.@bNode edge_c36 = GRGEN_MODEL.@bNode.CreateEdge(graph, node_v23_9149720_p0, node_v23_9149720);
			GRGEN_MODEL.@bPrnt edge__edge20 = GRGEN_MODEL.@bPrnt.CreateEdge(graph, node_v22_a50352, node_v14);
			GRGEN_MODEL.@bNode edge_c37 = GRGEN_MODEL.@bNode.CreateEdge(graph, node_v22_a50352_p0, node_v22_a50352);
			GRGEN_MODEL.@bPrnt edge__edge21 = GRGEN_MODEL.@bPrnt.CreateEdge(graph, node_v29_80f087, node_v19);
			GRGEN_MODEL.@bPrnt edge__edge22 = GRGEN_MODEL.@bPrnt.CreateEdge(graph, node_v3_f0b4571, node_v0);
			GRGEN_MODEL.@bNode edge_c38 = GRGEN_MODEL.@bNode.CreateEdge(graph, node_v3_f0b4571_p0, node_v3_f0b4571);
			GRGEN_MODEL.@bPrnt edge__edge23 = GRGEN_MODEL.@bPrnt.CreateEdge(graph, node_v4_d14d121, node_v3_f0b4571);
			GRGEN_MODEL.@bNode edge_c39 = GRGEN_MODEL.@bNode.CreateEdge(graph, node_v4_d14d121_p0, node_v4_d14d121);
			GRGEN_MODEL.@bLink edge__edge24 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v8_d8a5577_p0, node_y0);
			GRGEN_MODEL.@bLink edge__edge25 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v0_p0, node_y0);
			GRGEN_MODEL.@bLink edge__edge26 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v12_p0, node_e0);
			GRGEN_MODEL.@bLink edge__edge27 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v18_p0, node_e0);
			GRGEN_MODEL.@bLink edge__edge28 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v5_p0, node_y3);
			GRGEN_MODEL.@bLink edge__edge29 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v8_p0, node_y3);
			GRGEN_MODEL.@bLink edge__edge30 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v13_7cbf485_p0, node_y3);
			GRGEN_MODEL.@bLink edge__edge31 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v14_p0, node_y3);
			GRGEN_MODEL.@bLink edge__edge32 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v4_p0, node_y1);
			GRGEN_MODEL.@bLink edge__edge33 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v22_a50352_p0, node_y1);
			GRGEN_MODEL.@bLink edge__edge34 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v1_p0, node_y1);
			GRGEN_MODEL.@bLink edge__edge35 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v9_590976_p0, node_n_right);
			GRGEN_MODEL.@bLink edge__edge36 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v23_9149720_p0, node_n_right);
			GRGEN_MODEL.@bLink edge__edge37 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v16_p0, node_n_right);
			GRGEN_MODEL.@bLink edge__edge38 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v4_d14d121_p0, node_n_right);
			GRGEN_MODEL.@bLink edge__edge39 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v7_p0, node_y2);
			GRGEN_MODEL.@bLink edge__edge40 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v2_p0, node_y2);
			GRGEN_MODEL.@bLink edge__edge41 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v3_f0b4571_p0, node_y2);
			GRGEN_MODEL.@bLink edge__edge42 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v14_1397187_p0, node_n_left);
			GRGEN_MODEL.@bLink edge__edge43 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v10_p0, node_n_left);
			{ // eval_0
				Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> var_nodesWithSites = (Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType>)(GRGEN_LIBGR.ContainerHelper.Domain(var_indexMap));
				foreach(KeyValuePair<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> entry_0 in var_nodesWithSites)
				{
					GRGEN_LIBGR.INode var_cur = (GRGEN_LIBGR.INode)entry_0.Key;
					object emit_value_1;
					emit_value_1 = var_cur;
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = "->";
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = (var_indexMap[var_cur]);
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = " ";
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = GRGEN_LIBGR.GraphHelper.CountAdjacentIncoming(graph, var_cur, GRGEN_MODEL.EdgeType_AEdge.typeVar, GRGEN_MODEL.NodeType_Node.typeVar);
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = "\n";
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					if(((var_indexMap[var_cur]) == null)) {
						object emit_value_2;
						emit_value_2 = "Remove everything because there is no site mapping for the reactum";
						if(emit_value_2 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_2, graph, false, null, null, null));
						emit_value_2 = GRGEN_LIBGR.GraphHelper.AdjacentIncoming(var_cur, GRGEN_MODEL.EdgeType_AEdge.typeVar, GRGEN_MODEL.NodeType_Node.typeVar);
						if(emit_value_2 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_2, graph, false, null, null, null));
						emit_value_2 = "\n";
						if(emit_value_2 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_2, graph, false, null, null, null));
						GRGEN_LIBGR.INode node_3 = var_cur;
						foreach(GRGEN_LIBGR.IEdge edge_3 in node_3.GetCompatibleIncoming(GRGEN_MODEL.EdgeType_AEdge.typeVar))
						{
							if(!edge_3.Source.InstanceOf(GRGEN_MODEL.NodeType_Node.typeVar))
								continue;
							GRGEN_LIBGR.INode var_x__INTERN = (GRGEN_LIBGR.INode)edge_3.Source;
							if((((GRGEN_LGSP.LGSPNode)var_x__INTERN).lgspType != GRGEN_MODEL.NodeType_BPort.typeVar)) {
								graph.RemoveEdges((GRGEN_LIBGR.INode)var_x__INTERN);
								graph.Remove((GRGEN_LIBGR.INode)var_x__INTERN);
							}
						}
						continue;
					}
					if((var_cur != (var_indexMap[var_cur]))) {
						object emit_value_4;
						emit_value_4 = "Site mappings are different! Size of children: ";
						if(emit_value_4 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_4, graph, false, null, null, null));
						emit_value_4 = (GRGEN_LIBGR.GraphHelper.AdjacentIncoming(var_cur, GRGEN_MODEL.EdgeType_AEdge.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count;
						if(emit_value_4 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_4, graph, false, null, null, null));
						emit_value_4 = "\n";
						if(emit_value_4 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_4, graph, false, null, null, null));
						GRGEN_LIBGR.INode node_5 = var_cur;
						foreach(GRGEN_LIBGR.IEdge edge_5 in node_5.GetCompatibleIncoming(GRGEN_MODEL.EdgeType_AEdge.typeVar))
						{
							if(!edge_5.Source.InstanceOf(GRGEN_MODEL.NodeType_Node.typeVar))
								continue;
							GRGEN_LIBGR.INode var_x__INTERN = (GRGEN_LIBGR.INode)edge_5.Source;
							if(((((GRGEN_LGSP.LGSPNode)var_x__INTERN).lgspType != GRGEN_MODEL.NodeType_BPort.typeVar) && (! var_allMatchedNodes.ContainsKey(var_x__INTERN)))) {
								object emit_value_6;
								emit_value_6 = "\tchild = ";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = var_x__INTERN;
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = " ";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = ((GRGEN_LGSP.LGSPNode)var_x__INTERN).lgspType;
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = " ";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = (var_indexMap[var_cur]);
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = " ";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = GRGEN_LIBGR.GraphHelper.Outgoing(var_x__INTERN, GRGEN_MODEL.EdgeType_AEdge.typeVar, GRGEN_MODEL.NodeType_Node.typeVar);
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = "\n";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								GRGEN_LIBGR.INode node_7 = var_x__INTERN;
								foreach(GRGEN_LIBGR.IEdge edge_7 in node_7.GetCompatibleOutgoing(GRGEN_MODEL.EdgeType_AEdge.typeVar))
								{
									if(!edge_7.Target.InstanceOf(GRGEN_MODEL.NodeType_Node.typeVar))
										continue;
									GRGEN_LIBGR.IDEdge var_y = (GRGEN_LIBGR.IDEdge)edge_7;
									if((((GRGEN_LGSP.LGSPEdge)var_y).lgspType == GRGEN_MODEL.EdgeType_bPrnt.typeVar)) {
										object emit_value_8;
										emit_value_8 = "\ty";
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = var_y;
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = " ";
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = ((GRGEN_LGSP.LGSPEdge)var_y).lgspType;
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = " ";
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = GRGEN_LIBGR.GraphHelper.Nameof(var_y, graph);
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = "\n";
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										var_tasks[var_y] = (var_indexMap[var_cur]);
									}
								}
							}
						}
					}
				}
				Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.SetValueType> var_keyset = (Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.SetValueType>)(GRGEN_LIBGR.ContainerHelper.Domain(var_tasks));
				foreach(KeyValuePair<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.SetValueType> entry_9 in var_keyset)
				{
					GRGEN_LIBGR.IDEdge var_k = (GRGEN_LIBGR.IDEdge)entry_9.Key;
					((GRGEN_LGSP.LGSPNamedGraph)graph).RedirectTarget((GRGEN_LIBGR.IEdge)var_k, (GRGEN_LIBGR.INode)(var_tasks[var_k]));
				}
			}
			graph.Remove(edge__edge0);
			graph.Remove(edge__edge1);
			graph.Remove(edge__edge2);
			graph.Remove(edge__edge3);
			graph.Remove(edge__edge4);
			graph.Remove(edge__edge5);
			graph.Remove(edge__edge6);
			graph.Remove(edge__edge7);
			graph.Remove(edge__edge8);
			graph.Remove(edge__edge9);
			graph.Remove(edge__edge10);
			graph.Remove(edge__edge11);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat0);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat1);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat2);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat3);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat4);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat5);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat6);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat7);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat8);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat9);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat10);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat11);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat12);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat13);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat14);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat15);
			actionEnv.SelectedMatchRewritten();
			return;
		}
		private static string[] initMvmt_addedNodeNames = new string[] { "v8_d8a5577", "v8_d8a5577_p0", "v9_590976", "v9_590976_p0", "v30_fb68827", "v31_ad21532", "v14_1397187", "v13_7cbf485", "v14_1397187_p0", "v13_7cbf485_p0", "v20_1ba6677", "v23_9149720", "v22_a50352", "v23_9149720_p0", "v22_a50352_p0", "v29_80f087", "v3_f0b4571", "v3_f0b4571_p0", "v4_d14d121", "v4_d14d121_p0" };
		private static string[] initMvmt_addedEdgeNames = new string[] { "_edge12", "c32", "_edge13", "c33", "_edge14", "_edge15", "_edge16", "c34", "_edge17", "c35", "_edge18", "_edge19", "c36", "_edge20", "c37", "_edge21", "_edge22", "c38", "_edge23", "c39", "_edge24", "_edge25", "_edge26", "_edge27", "_edge28", "_edge29", "_edge30", "_edge31", "_edge32", "_edge33", "_edge34", "_edge35", "_edge36", "_edge37", "_edge38", "_edge39", "_edge40", "_edge41", "_edge42", "_edge43" };

		static Rule_initMvmt() {
		}

		public interface IMatch_initMvmt : GRGEN_LIBGR.IMatch
		{
			//Nodes
			GRGEN_MODEL.ILocale node_v0 { get; set; }
			GRGEN_LIBGR.INode node_r0 { get; set; }
			GRGEN_MODEL.ILocale node_v4 { get; set; }
			GRGEN_MODEL.ILocale node_v7 { get; set; }
			GRGEN_MODEL.ILocale node_v14 { get; set; }
			GRGEN_MODEL.IBPort node_v0_p0 { get; set; }
			GRGEN_MODEL.IRoute node_v1 { get; set; }
			GRGEN_MODEL.IRoute node_v2 { get; set; }
			GRGEN_MODEL.IOccupiedBy node_v3 { get; set; }
			GRGEN_MODEL.IBPort node_v4_p0 { get; set; }
			GRGEN_MODEL.IRoute node_v5 { get; set; }
			GRGEN_MODEL.IOccupiedBy node_v6 { get; set; }
			GRGEN_MODEL.IBPort node_v7_p0 { get; set; }
			GRGEN_MODEL.IRoute node_v8 { get; set; }
			GRGEN_MODEL.IOccupiedBy node_v9 { get; set; }
			GRGEN_MODEL.IBPort node_v14_p0 { get; set; }
			GRGEN_MODEL.IOccupiedBy node_v15 { get; set; }
			GRGEN_MODEL.IBPort node_v1_p0 { get; set; }
			GRGEN_MODEL.IBPort node_v2_p0 { get; set; }
			GRGEN_MODEL.IBPort node_v5_p0 { get; set; }
			GRGEN_MODEL.IBPort node_v8_p0 { get; set; }
			GRGEN_MODEL.IRobot node_v10 { get; set; }
			GRGEN_MODEL.IRobot node_v16 { get; set; }
			GRGEN_MODEL.IBPort node_v10_p0 { get; set; }
			GRGEN_MODEL.ISLck node_v11 { get; set; }
			GRGEN_MODEL.IMvmt node_v13 { get; set; }
			GRGEN_MODEL.IBPort node_v16_p0 { get; set; }
			GRGEN_MODEL.ISLck node_v17 { get; set; }
			GRGEN_MODEL.IMvmt node_v19 { get; set; }
			GRGEN_MODEL.ISLckRef node_v12 { get; set; }
			GRGEN_MODEL.ISLckRef node_v18 { get; set; }
			GRGEN_MODEL.IBPort node_v12_p0 { get; set; }
			GRGEN_MODEL.IBPort node_v18_p0 { get; set; }
			GRGEN_MODEL.IBLink node_y0 { get; set; }
			GRGEN_MODEL.IBLink node_n_right { get; set; }
			GRGEN_MODEL.IBLink node_y2 { get; set; }
			GRGEN_MODEL.IBLink node_y3 { get; set; }
			GRGEN_MODEL.IBLink node_y1 { get; set; }
			GRGEN_MODEL.IBLink node_n_left { get; set; }
			GRGEN_MODEL.IBEdge node_e0 { get; set; }
			//Edges
			GRGEN_MODEL.IbPrnt edge_c0 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c1 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c2 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c3 { get; set; }
			GRGEN_MODEL.IbNode edge_c4 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c5 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c6 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c7 { get; set; }
			GRGEN_MODEL.IbNode edge_c8 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c9 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c10 { get; set; }
			GRGEN_MODEL.IbNode edge_c11 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c12 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c13 { get; set; }
			GRGEN_MODEL.IbNode edge_c14 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c15 { get; set; }
			GRGEN_MODEL.IbNode edge_c16 { get; set; }
			GRGEN_MODEL.IbNode edge_c17 { get; set; }
			GRGEN_MODEL.IbNode edge_c18 { get; set; }
			GRGEN_MODEL.IbNode edge_c19 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c20 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c21 { get; set; }
			GRGEN_MODEL.IbNode edge_c22 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c23 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c24 { get; set; }
			GRGEN_MODEL.IbNode edge_c25 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c26 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c27 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c28 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c29 { get; set; }
			GRGEN_MODEL.IbNode edge_c30 { get; set; }
			GRGEN_MODEL.IbNode edge_c31 { get; set; }
			GRGEN_MODEL.IbLink edge__edge0 { get; set; }
			GRGEN_MODEL.IbLink edge__edge1 { get; set; }
			GRGEN_MODEL.IbLink edge__edge2 { get; set; }
			GRGEN_MODEL.IbLink edge__edge3 { get; set; }
			GRGEN_MODEL.IbLink edge__edge4 { get; set; }
			GRGEN_MODEL.IbLink edge__edge5 { get; set; }
			GRGEN_MODEL.IbLink edge__edge6 { get; set; }
			GRGEN_MODEL.IbLink edge__edge7 { get; set; }
			GRGEN_MODEL.IbLink edge__edge8 { get; set; }
			GRGEN_MODEL.IbLink edge__edge9 { get; set; }
			GRGEN_MODEL.IbLink edge__edge10 { get; set; }
			GRGEN_MODEL.IbLink edge__edge11 { get; set; }
			//Variables
			//EmbeddedGraphs
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat0 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat1 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat2 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat3 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat4 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat5 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat6 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat7 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat8 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat9 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat10 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat11 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat12 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat13 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat14 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat15 { get; }
			//Alternatives
			//Iterateds
			//Independents
			// further match object stuff
			void SetMatchOfEnclosingPattern(GRGEN_LIBGR.IMatch matchOfEnclosingPattern);
		}

		public class Match_initMvmt : GRGEN_LGSP.MatchListElement<Match_initMvmt>, IMatch_initMvmt
		{
			public GRGEN_MODEL.ILocale node_v0 { get { return (GRGEN_MODEL.ILocale)_node_v0; } set { _node_v0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_LIBGR.INode node_r0 { get { return (GRGEN_LIBGR.INode)_node_r0; } set { _node_r0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ILocale node_v4 { get { return (GRGEN_MODEL.ILocale)_node_v4; } set { _node_v4 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ILocale node_v7 { get { return (GRGEN_MODEL.ILocale)_node_v7; } set { _node_v7 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ILocale node_v14 { get { return (GRGEN_MODEL.ILocale)_node_v14; } set { _node_v14 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v0_p0 { get { return (GRGEN_MODEL.IBPort)_node_v0_p0; } set { _node_v0_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IRoute node_v1 { get { return (GRGEN_MODEL.IRoute)_node_v1; } set { _node_v1 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IRoute node_v2 { get { return (GRGEN_MODEL.IRoute)_node_v2; } set { _node_v2 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IOccupiedBy node_v3 { get { return (GRGEN_MODEL.IOccupiedBy)_node_v3; } set { _node_v3 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v4_p0 { get { return (GRGEN_MODEL.IBPort)_node_v4_p0; } set { _node_v4_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IRoute node_v5 { get { return (GRGEN_MODEL.IRoute)_node_v5; } set { _node_v5 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IOccupiedBy node_v6 { get { return (GRGEN_MODEL.IOccupiedBy)_node_v6; } set { _node_v6 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v7_p0 { get { return (GRGEN_MODEL.IBPort)_node_v7_p0; } set { _node_v7_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IRoute node_v8 { get { return (GRGEN_MODEL.IRoute)_node_v8; } set { _node_v8 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IOccupiedBy node_v9 { get { return (GRGEN_MODEL.IOccupiedBy)_node_v9; } set { _node_v9 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v14_p0 { get { return (GRGEN_MODEL.IBPort)_node_v14_p0; } set { _node_v14_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IOccupiedBy node_v15 { get { return (GRGEN_MODEL.IOccupiedBy)_node_v15; } set { _node_v15 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v1_p0 { get { return (GRGEN_MODEL.IBPort)_node_v1_p0; } set { _node_v1_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v2_p0 { get { return (GRGEN_MODEL.IBPort)_node_v2_p0; } set { _node_v2_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v5_p0 { get { return (GRGEN_MODEL.IBPort)_node_v5_p0; } set { _node_v5_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v8_p0 { get { return (GRGEN_MODEL.IBPort)_node_v8_p0; } set { _node_v8_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IRobot node_v10 { get { return (GRGEN_MODEL.IRobot)_node_v10; } set { _node_v10 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IRobot node_v16 { get { return (GRGEN_MODEL.IRobot)_node_v16; } set { _node_v16 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v10_p0 { get { return (GRGEN_MODEL.IBPort)_node_v10_p0; } set { _node_v10_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ISLck node_v11 { get { return (GRGEN_MODEL.ISLck)_node_v11; } set { _node_v11 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IMvmt node_v13 { get { return (GRGEN_MODEL.IMvmt)_node_v13; } set { _node_v13 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v16_p0 { get { return (GRGEN_MODEL.IBPort)_node_v16_p0; } set { _node_v16_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ISLck node_v17 { get { return (GRGEN_MODEL.ISLck)_node_v17; } set { _node_v17 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IMvmt node_v19 { get { return (GRGEN_MODEL.IMvmt)_node_v19; } set { _node_v19 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ISLckRef node_v12 { get { return (GRGEN_MODEL.ISLckRef)_node_v12; } set { _node_v12 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ISLckRef node_v18 { get { return (GRGEN_MODEL.ISLckRef)_node_v18; } set { _node_v18 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v12_p0 { get { return (GRGEN_MODEL.IBPort)_node_v12_p0; } set { _node_v12_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v18_p0 { get { return (GRGEN_MODEL.IBPort)_node_v18_p0; } set { _node_v18_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_y0 { get { return (GRGEN_MODEL.IBLink)_node_y0; } set { _node_y0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_n_right { get { return (GRGEN_MODEL.IBLink)_node_n_right; } set { _node_n_right = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_y2 { get { return (GRGEN_MODEL.IBLink)_node_y2; } set { _node_y2 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_y3 { get { return (GRGEN_MODEL.IBLink)_node_y3; } set { _node_y3 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_y1 { get { return (GRGEN_MODEL.IBLink)_node_y1; } set { _node_y1 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_n_left { get { return (GRGEN_MODEL.IBLink)_node_n_left; } set { _node_n_left = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBEdge node_e0 { get { return (GRGEN_MODEL.IBEdge)_node_e0; } set { _node_e0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_LGSP.LGSPNode _node_v0;
			public GRGEN_LGSP.LGSPNode _node_r0;
			public GRGEN_LGSP.LGSPNode _node_v4;
			public GRGEN_LGSP.LGSPNode _node_v7;
			public GRGEN_LGSP.LGSPNode _node_v14;
			public GRGEN_LGSP.LGSPNode _node_v0_p0;
			public GRGEN_LGSP.LGSPNode _node_v1;
			public GRGEN_LGSP.LGSPNode _node_v2;
			public GRGEN_LGSP.LGSPNode _node_v3;
			public GRGEN_LGSP.LGSPNode _node_v4_p0;
			public GRGEN_LGSP.LGSPNode _node_v5;
			public GRGEN_LGSP.LGSPNode _node_v6;
			public GRGEN_LGSP.LGSPNode _node_v7_p0;
			public GRGEN_LGSP.LGSPNode _node_v8;
			public GRGEN_LGSP.LGSPNode _node_v9;
			public GRGEN_LGSP.LGSPNode _node_v14_p0;
			public GRGEN_LGSP.LGSPNode _node_v15;
			public GRGEN_LGSP.LGSPNode _node_v1_p0;
			public GRGEN_LGSP.LGSPNode _node_v2_p0;
			public GRGEN_LGSP.LGSPNode _node_v5_p0;
			public GRGEN_LGSP.LGSPNode _node_v8_p0;
			public GRGEN_LGSP.LGSPNode _node_v10;
			public GRGEN_LGSP.LGSPNode _node_v16;
			public GRGEN_LGSP.LGSPNode _node_v10_p0;
			public GRGEN_LGSP.LGSPNode _node_v11;
			public GRGEN_LGSP.LGSPNode _node_v13;
			public GRGEN_LGSP.LGSPNode _node_v16_p0;
			public GRGEN_LGSP.LGSPNode _node_v17;
			public GRGEN_LGSP.LGSPNode _node_v19;
			public GRGEN_LGSP.LGSPNode _node_v12;
			public GRGEN_LGSP.LGSPNode _node_v18;
			public GRGEN_LGSP.LGSPNode _node_v12_p0;
			public GRGEN_LGSP.LGSPNode _node_v18_p0;
			public GRGEN_LGSP.LGSPNode _node_y0;
			public GRGEN_LGSP.LGSPNode _node_n_right;
			public GRGEN_LGSP.LGSPNode _node_y2;
			public GRGEN_LGSP.LGSPNode _node_y3;
			public GRGEN_LGSP.LGSPNode _node_y1;
			public GRGEN_LGSP.LGSPNode _node_n_left;
			public GRGEN_LGSP.LGSPNode _node_e0;
			public enum initMvmt_NodeNums { @v0, @r0, @v4, @v7, @v14, @v0_p0, @v1, @v2, @v3, @v4_p0, @v5, @v6, @v7_p0, @v8, @v9, @v14_p0, @v15, @v1_p0, @v2_p0, @v5_p0, @v8_p0, @v10, @v16, @v10_p0, @v11, @v13, @v16_p0, @v17, @v19, @v12, @v18, @v12_p0, @v18_p0, @y0, @n_right, @y2, @y3, @y1, @n_left, @e0, END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.INode> Nodes { get { return new GRGEN_LGSP.Nodes_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.INode> NodesEnumerator { get { return new GRGEN_LGSP.Nodes_Enumerator(this); } }
			public override int NumberOfNodes { get { return 40; } }
			public override GRGEN_LIBGR.INode getNodeAt(int index)
			{
				switch(index) {
				case (int)initMvmt_NodeNums.@v0: return _node_v0;
				case (int)initMvmt_NodeNums.@r0: return _node_r0;
				case (int)initMvmt_NodeNums.@v4: return _node_v4;
				case (int)initMvmt_NodeNums.@v7: return _node_v7;
				case (int)initMvmt_NodeNums.@v14: return _node_v14;
				case (int)initMvmt_NodeNums.@v0_p0: return _node_v0_p0;
				case (int)initMvmt_NodeNums.@v1: return _node_v1;
				case (int)initMvmt_NodeNums.@v2: return _node_v2;
				case (int)initMvmt_NodeNums.@v3: return _node_v3;
				case (int)initMvmt_NodeNums.@v4_p0: return _node_v4_p0;
				case (int)initMvmt_NodeNums.@v5: return _node_v5;
				case (int)initMvmt_NodeNums.@v6: return _node_v6;
				case (int)initMvmt_NodeNums.@v7_p0: return _node_v7_p0;
				case (int)initMvmt_NodeNums.@v8: return _node_v8;
				case (int)initMvmt_NodeNums.@v9: return _node_v9;
				case (int)initMvmt_NodeNums.@v14_p0: return _node_v14_p0;
				case (int)initMvmt_NodeNums.@v15: return _node_v15;
				case (int)initMvmt_NodeNums.@v1_p0: return _node_v1_p0;
				case (int)initMvmt_NodeNums.@v2_p0: return _node_v2_p0;
				case (int)initMvmt_NodeNums.@v5_p0: return _node_v5_p0;
				case (int)initMvmt_NodeNums.@v8_p0: return _node_v8_p0;
				case (int)initMvmt_NodeNums.@v10: return _node_v10;
				case (int)initMvmt_NodeNums.@v16: return _node_v16;
				case (int)initMvmt_NodeNums.@v10_p0: return _node_v10_p0;
				case (int)initMvmt_NodeNums.@v11: return _node_v11;
				case (int)initMvmt_NodeNums.@v13: return _node_v13;
				case (int)initMvmt_NodeNums.@v16_p0: return _node_v16_p0;
				case (int)initMvmt_NodeNums.@v17: return _node_v17;
				case (int)initMvmt_NodeNums.@v19: return _node_v19;
				case (int)initMvmt_NodeNums.@v12: return _node_v12;
				case (int)initMvmt_NodeNums.@v18: return _node_v18;
				case (int)initMvmt_NodeNums.@v12_p0: return _node_v12_p0;
				case (int)initMvmt_NodeNums.@v18_p0: return _node_v18_p0;
				case (int)initMvmt_NodeNums.@y0: return _node_y0;
				case (int)initMvmt_NodeNums.@n_right: return _node_n_right;
				case (int)initMvmt_NodeNums.@y2: return _node_y2;
				case (int)initMvmt_NodeNums.@y3: return _node_y3;
				case (int)initMvmt_NodeNums.@y1: return _node_y1;
				case (int)initMvmt_NodeNums.@n_left: return _node_n_left;
				case (int)initMvmt_NodeNums.@e0: return _node_e0;
				default: return null;
				}
			}
			public override GRGEN_LIBGR.INode getNode(string name)
			{
				switch(name) {
				case "v0": return _node_v0;
				case "r0": return _node_r0;
				case "v4": return _node_v4;
				case "v7": return _node_v7;
				case "v14": return _node_v14;
				case "v0_p0": return _node_v0_p0;
				case "v1": return _node_v1;
				case "v2": return _node_v2;
				case "v3": return _node_v3;
				case "v4_p0": return _node_v4_p0;
				case "v5": return _node_v5;
				case "v6": return _node_v6;
				case "v7_p0": return _node_v7_p0;
				case "v8": return _node_v8;
				case "v9": return _node_v9;
				case "v14_p0": return _node_v14_p0;
				case "v15": return _node_v15;
				case "v1_p0": return _node_v1_p0;
				case "v2_p0": return _node_v2_p0;
				case "v5_p0": return _node_v5_p0;
				case "v8_p0": return _node_v8_p0;
				case "v10": return _node_v10;
				case "v16": return _node_v16;
				case "v10_p0": return _node_v10_p0;
				case "v11": return _node_v11;
				case "v13": return _node_v13;
				case "v16_p0": return _node_v16_p0;
				case "v17": return _node_v17;
				case "v19": return _node_v19;
				case "v12": return _node_v12;
				case "v18": return _node_v18;
				case "v12_p0": return _node_v12_p0;
				case "v18_p0": return _node_v18_p0;
				case "y0": return _node_y0;
				case "n_right": return _node_n_right;
				case "y2": return _node_y2;
				case "y3": return _node_y3;
				case "y1": return _node_y1;
				case "n_left": return _node_n_left;
				case "e0": return _node_e0;
				default: return null;
				}
			}
			public override void SetNode(string name, GRGEN_LIBGR.INode value)
			{
				switch(name) {
				case "v0": _node_v0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "r0": _node_r0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v4": _node_v4 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v7": _node_v7 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v14": _node_v14 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v0_p0": _node_v0_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v1": _node_v1 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v2": _node_v2 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v3": _node_v3 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v4_p0": _node_v4_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v5": _node_v5 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v6": _node_v6 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v7_p0": _node_v7_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v8": _node_v8 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v9": _node_v9 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v14_p0": _node_v14_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v15": _node_v15 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v1_p0": _node_v1_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v2_p0": _node_v2_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v5_p0": _node_v5_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v8_p0": _node_v8_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v10": _node_v10 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v16": _node_v16 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v10_p0": _node_v10_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v11": _node_v11 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v13": _node_v13 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v16_p0": _node_v16_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v17": _node_v17 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v19": _node_v19 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v12": _node_v12 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v18": _node_v18 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v12_p0": _node_v12_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v18_p0": _node_v18_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "y0": _node_y0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "n_right": _node_n_right = (GRGEN_LGSP.LGSPNode)value; break;
				case "y2": _node_y2 = (GRGEN_LGSP.LGSPNode)value; break;
				case "y3": _node_y3 = (GRGEN_LGSP.LGSPNode)value; break;
				case "y1": _node_y1 = (GRGEN_LGSP.LGSPNode)value; break;
				case "n_left": _node_n_left = (GRGEN_LGSP.LGSPNode)value; break;
				case "e0": _node_e0 = (GRGEN_LGSP.LGSPNode)value; break;
				default: break;
				}
			}

			public GRGEN_MODEL.IbPrnt edge_c0 { get { return (GRGEN_MODEL.IbPrnt)_edge_c0; } set { _edge_c0 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c1 { get { return (GRGEN_MODEL.IbPrnt)_edge_c1; } set { _edge_c1 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c2 { get { return (GRGEN_MODEL.IbPrnt)_edge_c2; } set { _edge_c2 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c3 { get { return (GRGEN_MODEL.IbPrnt)_edge_c3; } set { _edge_c3 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c4 { get { return (GRGEN_MODEL.IbNode)_edge_c4; } set { _edge_c4 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c5 { get { return (GRGEN_MODEL.IbPrnt)_edge_c5; } set { _edge_c5 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c6 { get { return (GRGEN_MODEL.IbPrnt)_edge_c6; } set { _edge_c6 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c7 { get { return (GRGEN_MODEL.IbPrnt)_edge_c7; } set { _edge_c7 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c8 { get { return (GRGEN_MODEL.IbNode)_edge_c8; } set { _edge_c8 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c9 { get { return (GRGEN_MODEL.IbPrnt)_edge_c9; } set { _edge_c9 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c10 { get { return (GRGEN_MODEL.IbPrnt)_edge_c10; } set { _edge_c10 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c11 { get { return (GRGEN_MODEL.IbNode)_edge_c11; } set { _edge_c11 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c12 { get { return (GRGEN_MODEL.IbPrnt)_edge_c12; } set { _edge_c12 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c13 { get { return (GRGEN_MODEL.IbPrnt)_edge_c13; } set { _edge_c13 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c14 { get { return (GRGEN_MODEL.IbNode)_edge_c14; } set { _edge_c14 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c15 { get { return (GRGEN_MODEL.IbPrnt)_edge_c15; } set { _edge_c15 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c16 { get { return (GRGEN_MODEL.IbNode)_edge_c16; } set { _edge_c16 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c17 { get { return (GRGEN_MODEL.IbNode)_edge_c17; } set { _edge_c17 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c18 { get { return (GRGEN_MODEL.IbNode)_edge_c18; } set { _edge_c18 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c19 { get { return (GRGEN_MODEL.IbNode)_edge_c19; } set { _edge_c19 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c20 { get { return (GRGEN_MODEL.IbPrnt)_edge_c20; } set { _edge_c20 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c21 { get { return (GRGEN_MODEL.IbPrnt)_edge_c21; } set { _edge_c21 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c22 { get { return (GRGEN_MODEL.IbNode)_edge_c22; } set { _edge_c22 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c23 { get { return (GRGEN_MODEL.IbPrnt)_edge_c23; } set { _edge_c23 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c24 { get { return (GRGEN_MODEL.IbPrnt)_edge_c24; } set { _edge_c24 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c25 { get { return (GRGEN_MODEL.IbNode)_edge_c25; } set { _edge_c25 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c26 { get { return (GRGEN_MODEL.IbPrnt)_edge_c26; } set { _edge_c26 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c27 { get { return (GRGEN_MODEL.IbPrnt)_edge_c27; } set { _edge_c27 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c28 { get { return (GRGEN_MODEL.IbPrnt)_edge_c28; } set { _edge_c28 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c29 { get { return (GRGEN_MODEL.IbPrnt)_edge_c29; } set { _edge_c29 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c30 { get { return (GRGEN_MODEL.IbNode)_edge_c30; } set { _edge_c30 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c31 { get { return (GRGEN_MODEL.IbNode)_edge_c31; } set { _edge_c31 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge0 { get { return (GRGEN_MODEL.IbLink)_edge__edge0; } set { _edge__edge0 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge1 { get { return (GRGEN_MODEL.IbLink)_edge__edge1; } set { _edge__edge1 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge2 { get { return (GRGEN_MODEL.IbLink)_edge__edge2; } set { _edge__edge2 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge3 { get { return (GRGEN_MODEL.IbLink)_edge__edge3; } set { _edge__edge3 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge4 { get { return (GRGEN_MODEL.IbLink)_edge__edge4; } set { _edge__edge4 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge5 { get { return (GRGEN_MODEL.IbLink)_edge__edge5; } set { _edge__edge5 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge6 { get { return (GRGEN_MODEL.IbLink)_edge__edge6; } set { _edge__edge6 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge7 { get { return (GRGEN_MODEL.IbLink)_edge__edge7; } set { _edge__edge7 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge8 { get { return (GRGEN_MODEL.IbLink)_edge__edge8; } set { _edge__edge8 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge9 { get { return (GRGEN_MODEL.IbLink)_edge__edge9; } set { _edge__edge9 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge10 { get { return (GRGEN_MODEL.IbLink)_edge__edge10; } set { _edge__edge10 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge11 { get { return (GRGEN_MODEL.IbLink)_edge__edge11; } set { _edge__edge11 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_LGSP.LGSPEdge _edge_c0;
			public GRGEN_LGSP.LGSPEdge _edge_c1;
			public GRGEN_LGSP.LGSPEdge _edge_c2;
			public GRGEN_LGSP.LGSPEdge _edge_c3;
			public GRGEN_LGSP.LGSPEdge _edge_c4;
			public GRGEN_LGSP.LGSPEdge _edge_c5;
			public GRGEN_LGSP.LGSPEdge _edge_c6;
			public GRGEN_LGSP.LGSPEdge _edge_c7;
			public GRGEN_LGSP.LGSPEdge _edge_c8;
			public GRGEN_LGSP.LGSPEdge _edge_c9;
			public GRGEN_LGSP.LGSPEdge _edge_c10;
			public GRGEN_LGSP.LGSPEdge _edge_c11;
			public GRGEN_LGSP.LGSPEdge _edge_c12;
			public GRGEN_LGSP.LGSPEdge _edge_c13;
			public GRGEN_LGSP.LGSPEdge _edge_c14;
			public GRGEN_LGSP.LGSPEdge _edge_c15;
			public GRGEN_LGSP.LGSPEdge _edge_c16;
			public GRGEN_LGSP.LGSPEdge _edge_c17;
			public GRGEN_LGSP.LGSPEdge _edge_c18;
			public GRGEN_LGSP.LGSPEdge _edge_c19;
			public GRGEN_LGSP.LGSPEdge _edge_c20;
			public GRGEN_LGSP.LGSPEdge _edge_c21;
			public GRGEN_LGSP.LGSPEdge _edge_c22;
			public GRGEN_LGSP.LGSPEdge _edge_c23;
			public GRGEN_LGSP.LGSPEdge _edge_c24;
			public GRGEN_LGSP.LGSPEdge _edge_c25;
			public GRGEN_LGSP.LGSPEdge _edge_c26;
			public GRGEN_LGSP.LGSPEdge _edge_c27;
			public GRGEN_LGSP.LGSPEdge _edge_c28;
			public GRGEN_LGSP.LGSPEdge _edge_c29;
			public GRGEN_LGSP.LGSPEdge _edge_c30;
			public GRGEN_LGSP.LGSPEdge _edge_c31;
			public GRGEN_LGSP.LGSPEdge _edge__edge0;
			public GRGEN_LGSP.LGSPEdge _edge__edge1;
			public GRGEN_LGSP.LGSPEdge _edge__edge2;
			public GRGEN_LGSP.LGSPEdge _edge__edge3;
			public GRGEN_LGSP.LGSPEdge _edge__edge4;
			public GRGEN_LGSP.LGSPEdge _edge__edge5;
			public GRGEN_LGSP.LGSPEdge _edge__edge6;
			public GRGEN_LGSP.LGSPEdge _edge__edge7;
			public GRGEN_LGSP.LGSPEdge _edge__edge8;
			public GRGEN_LGSP.LGSPEdge _edge__edge9;
			public GRGEN_LGSP.LGSPEdge _edge__edge10;
			public GRGEN_LGSP.LGSPEdge _edge__edge11;
			public enum initMvmt_EdgeNums { @c0, @c1, @c2, @c3, @c4, @c5, @c6, @c7, @c8, @c9, @c10, @c11, @c12, @c13, @c14, @c15, @c16, @c17, @c18, @c19, @c20, @c21, @c22, @c23, @c24, @c25, @c26, @c27, @c28, @c29, @c30, @c31, @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, @_edge6, @_edge7, @_edge8, @_edge9, @_edge10, @_edge11, END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IEdge> Edges { get { return new GRGEN_LGSP.Edges_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IEdge> EdgesEnumerator { get { return new GRGEN_LGSP.Edges_Enumerator(this); } }
			public override int NumberOfEdges { get { return 44; } }
			public override GRGEN_LIBGR.IEdge getEdgeAt(int index)
			{
				switch(index) {
				case (int)initMvmt_EdgeNums.@c0: return _edge_c0;
				case (int)initMvmt_EdgeNums.@c1: return _edge_c1;
				case (int)initMvmt_EdgeNums.@c2: return _edge_c2;
				case (int)initMvmt_EdgeNums.@c3: return _edge_c3;
				case (int)initMvmt_EdgeNums.@c4: return _edge_c4;
				case (int)initMvmt_EdgeNums.@c5: return _edge_c5;
				case (int)initMvmt_EdgeNums.@c6: return _edge_c6;
				case (int)initMvmt_EdgeNums.@c7: return _edge_c7;
				case (int)initMvmt_EdgeNums.@c8: return _edge_c8;
				case (int)initMvmt_EdgeNums.@c9: return _edge_c9;
				case (int)initMvmt_EdgeNums.@c10: return _edge_c10;
				case (int)initMvmt_EdgeNums.@c11: return _edge_c11;
				case (int)initMvmt_EdgeNums.@c12: return _edge_c12;
				case (int)initMvmt_EdgeNums.@c13: return _edge_c13;
				case (int)initMvmt_EdgeNums.@c14: return _edge_c14;
				case (int)initMvmt_EdgeNums.@c15: return _edge_c15;
				case (int)initMvmt_EdgeNums.@c16: return _edge_c16;
				case (int)initMvmt_EdgeNums.@c17: return _edge_c17;
				case (int)initMvmt_EdgeNums.@c18: return _edge_c18;
				case (int)initMvmt_EdgeNums.@c19: return _edge_c19;
				case (int)initMvmt_EdgeNums.@c20: return _edge_c20;
				case (int)initMvmt_EdgeNums.@c21: return _edge_c21;
				case (int)initMvmt_EdgeNums.@c22: return _edge_c22;
				case (int)initMvmt_EdgeNums.@c23: return _edge_c23;
				case (int)initMvmt_EdgeNums.@c24: return _edge_c24;
				case (int)initMvmt_EdgeNums.@c25: return _edge_c25;
				case (int)initMvmt_EdgeNums.@c26: return _edge_c26;
				case (int)initMvmt_EdgeNums.@c27: return _edge_c27;
				case (int)initMvmt_EdgeNums.@c28: return _edge_c28;
				case (int)initMvmt_EdgeNums.@c29: return _edge_c29;
				case (int)initMvmt_EdgeNums.@c30: return _edge_c30;
				case (int)initMvmt_EdgeNums.@c31: return _edge_c31;
				case (int)initMvmt_EdgeNums.@_edge0: return _edge__edge0;
				case (int)initMvmt_EdgeNums.@_edge1: return _edge__edge1;
				case (int)initMvmt_EdgeNums.@_edge2: return _edge__edge2;
				case (int)initMvmt_EdgeNums.@_edge3: return _edge__edge3;
				case (int)initMvmt_EdgeNums.@_edge4: return _edge__edge4;
				case (int)initMvmt_EdgeNums.@_edge5: return _edge__edge5;
				case (int)initMvmt_EdgeNums.@_edge6: return _edge__edge6;
				case (int)initMvmt_EdgeNums.@_edge7: return _edge__edge7;
				case (int)initMvmt_EdgeNums.@_edge8: return _edge__edge8;
				case (int)initMvmt_EdgeNums.@_edge9: return _edge__edge9;
				case (int)initMvmt_EdgeNums.@_edge10: return _edge__edge10;
				case (int)initMvmt_EdgeNums.@_edge11: return _edge__edge11;
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IEdge getEdge(string name)
			{
				switch(name) {
				case "c0": return _edge_c0;
				case "c1": return _edge_c1;
				case "c2": return _edge_c2;
				case "c3": return _edge_c3;
				case "c4": return _edge_c4;
				case "c5": return _edge_c5;
				case "c6": return _edge_c6;
				case "c7": return _edge_c7;
				case "c8": return _edge_c8;
				case "c9": return _edge_c9;
				case "c10": return _edge_c10;
				case "c11": return _edge_c11;
				case "c12": return _edge_c12;
				case "c13": return _edge_c13;
				case "c14": return _edge_c14;
				case "c15": return _edge_c15;
				case "c16": return _edge_c16;
				case "c17": return _edge_c17;
				case "c18": return _edge_c18;
				case "c19": return _edge_c19;
				case "c20": return _edge_c20;
				case "c21": return _edge_c21;
				case "c22": return _edge_c22;
				case "c23": return _edge_c23;
				case "c24": return _edge_c24;
				case "c25": return _edge_c25;
				case "c26": return _edge_c26;
				case "c27": return _edge_c27;
				case "c28": return _edge_c28;
				case "c29": return _edge_c29;
				case "c30": return _edge_c30;
				case "c31": return _edge_c31;
				case "_edge0": return _edge__edge0;
				case "_edge1": return _edge__edge1;
				case "_edge2": return _edge__edge2;
				case "_edge3": return _edge__edge3;
				case "_edge4": return _edge__edge4;
				case "_edge5": return _edge__edge5;
				case "_edge6": return _edge__edge6;
				case "_edge7": return _edge__edge7;
				case "_edge8": return _edge__edge8;
				case "_edge9": return _edge__edge9;
				case "_edge10": return _edge__edge10;
				case "_edge11": return _edge__edge11;
				default: return null;
				}
			}
			public override void SetEdge(string name, GRGEN_LIBGR.IEdge value)
			{
				switch(name) {
				case "c0": _edge_c0 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c1": _edge_c1 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c2": _edge_c2 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c3": _edge_c3 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c4": _edge_c4 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c5": _edge_c5 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c6": _edge_c6 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c7": _edge_c7 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c8": _edge_c8 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c9": _edge_c9 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c10": _edge_c10 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c11": _edge_c11 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c12": _edge_c12 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c13": _edge_c13 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c14": _edge_c14 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c15": _edge_c15 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c16": _edge_c16 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c17": _edge_c17 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c18": _edge_c18 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c19": _edge_c19 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c20": _edge_c20 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c21": _edge_c21 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c22": _edge_c22 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c23": _edge_c23 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c24": _edge_c24 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c25": _edge_c25 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c26": _edge_c26 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c27": _edge_c27 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c28": _edge_c28 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c29": _edge_c29 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c30": _edge_c30 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c31": _edge_c31 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge0": _edge__edge0 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge1": _edge__edge1 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge2": _edge__edge2 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge3": _edge__edge3 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge4": _edge__edge4 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge5": _edge__edge5 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge6": _edge__edge6 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge7": _edge__edge7 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge8": _edge__edge8 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge9": _edge__edge9 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge10": _edge__edge10 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge11": _edge__edge11 = (GRGEN_LGSP.LGSPEdge)value; break;
				default: break;
				}
			}

			public enum initMvmt_VariableNums { END_OF_ENUM };
			public override IEnumerable<object> Variables { get { return new GRGEN_LGSP.Variables_Enumerable(this); } }
			public override IEnumerator<object> VariablesEnumerator { get { return new GRGEN_LGSP.Variables_Enumerator(this); } }
			public override int NumberOfVariables { get { return 0; } }
			public override object getVariableAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override object getVariable(string name)
			{
				switch(name) {
				default: return null;
				}
			}
			public override void SetVariable(string name, object value)
			{
				switch(name) {
				default: break;
				}
			}

			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat0 { get { return @_pat0; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat1 { get { return @_pat1; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat2 { get { return @_pat2; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat3 { get { return @_pat3; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat4 { get { return @_pat4; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat5 { get { return @_pat5; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat6 { get { return @_pat6; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat7 { get { return @_pat7; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat8 { get { return @_pat8; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat9 { get { return @_pat9; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat10 { get { return @_pat10; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat11 { get { return @_pat11; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat12 { get { return @_pat12; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat13 { get { return @_pat13; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat14 { get { return @_pat14; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat15 { get { return @_pat15; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat0;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat1;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat2;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat3;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat4;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat5;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat6;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat7;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat8;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat9;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat10;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat11;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat12;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat13;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat14;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat15;
			public enum initMvmt_SubNums { @pat0, @pat1, @pat2, @pat3, @pat4, @pat5, @pat6, @pat7, @pat8, @pat9, @pat10, @pat11, @pat12, @pat13, @pat14, @pat15, END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> EmbeddedGraphs { get { return new GRGEN_LGSP.EmbeddedGraphs_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> EmbeddedGraphsEnumerator { get { return new GRGEN_LGSP.EmbeddedGraphs_Enumerator(this); } }
			public override int NumberOfEmbeddedGraphs { get { return 16; } }
			public override GRGEN_LIBGR.IMatch getEmbeddedGraphAt(int index)
			{
				switch(index) {
				case (int)initMvmt_SubNums.@pat0: return _pat0;
				case (int)initMvmt_SubNums.@pat1: return _pat1;
				case (int)initMvmt_SubNums.@pat2: return _pat2;
				case (int)initMvmt_SubNums.@pat3: return _pat3;
				case (int)initMvmt_SubNums.@pat4: return _pat4;
				case (int)initMvmt_SubNums.@pat5: return _pat5;
				case (int)initMvmt_SubNums.@pat6: return _pat6;
				case (int)initMvmt_SubNums.@pat7: return _pat7;
				case (int)initMvmt_SubNums.@pat8: return _pat8;
				case (int)initMvmt_SubNums.@pat9: return _pat9;
				case (int)initMvmt_SubNums.@pat10: return _pat10;
				case (int)initMvmt_SubNums.@pat11: return _pat11;
				case (int)initMvmt_SubNums.@pat12: return _pat12;
				case (int)initMvmt_SubNums.@pat13: return _pat13;
				case (int)initMvmt_SubNums.@pat14: return _pat14;
				case (int)initMvmt_SubNums.@pat15: return _pat15;
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getEmbeddedGraph(string name)
			{
				switch(name) {
				case "pat0": return _pat0;
				case "pat1": return _pat1;
				case "pat2": return _pat2;
				case "pat3": return _pat3;
				case "pat4": return _pat4;
				case "pat5": return _pat5;
				case "pat6": return _pat6;
				case "pat7": return _pat7;
				case "pat8": return _pat8;
				case "pat9": return _pat9;
				case "pat10": return _pat10;
				case "pat11": return _pat11;
				case "pat12": return _pat12;
				case "pat13": return _pat13;
				case "pat14": return _pat14;
				case "pat15": return _pat15;
				default: return null;
				}
			}

			public enum initMvmt_AltNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> Alternatives { get { return new GRGEN_LGSP.Alternatives_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> AlternativesEnumerator { get { return new GRGEN_LGSP.Alternatives_Enumerator(this); } }
			public override int NumberOfAlternatives { get { return 0; } }
			public override GRGEN_LIBGR.IMatch getAlternativeAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getAlternative(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public enum initMvmt_IterNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatches> Iterateds { get { return new GRGEN_LGSP.Iterateds_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatches> IteratedsEnumerator { get { return new GRGEN_LGSP.Iterateds_Enumerator(this); } }
			public override int NumberOfIterateds { get { return 0; } }
			public override GRGEN_LIBGR.IMatches getIteratedAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatches getIterated(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public enum initMvmt_IdptNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> Independents { get { return new GRGEN_LGSP.Independents_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> IndependentsEnumerator { get { return new GRGEN_LGSP.Independents_Enumerator(this); } }
			public override int NumberOfIndependents { get { return 0; } }
			public override GRGEN_LIBGR.IMatch getIndependentAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getIndependent(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public override GRGEN_LIBGR.IPatternGraph Pattern { get { return Rule_initMvmt.instance.pat_initMvmt; } }
			public override GRGEN_LIBGR.IMatchClass MatchClass { get { return null; } }
			public override GRGEN_LIBGR.IMatch Clone() { return new Match_initMvmt(this); }
			public override GRGEN_LIBGR.IMatch Clone(IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap) { return new Match_initMvmt(this, oldToNewMap); }
			public void SetMatchOfEnclosingPattern(GRGEN_LIBGR.IMatch matchOfEnclosingPattern) { _matchOfEnclosingPattern = matchOfEnclosingPattern; }
			public Match_initMvmt nextWithSameHash;
			public void CleanNextWithSameHash() {
				Match_initMvmt cur = this;
				while(cur != null) {
					Match_initMvmt next = cur.nextWithSameHash;
					cur.nextWithSameHash = null;
					cur = next;
				}
			}

			public void AssignContent(Match_initMvmt that)
			{
				_node_v0 = that._node_v0;
				_node_r0 = that._node_r0;
				_node_v4 = that._node_v4;
				_node_v7 = that._node_v7;
				_node_v14 = that._node_v14;
				_node_v0_p0 = that._node_v0_p0;
				_node_v1 = that._node_v1;
				_node_v2 = that._node_v2;
				_node_v3 = that._node_v3;
				_node_v4_p0 = that._node_v4_p0;
				_node_v5 = that._node_v5;
				_node_v6 = that._node_v6;
				_node_v7_p0 = that._node_v7_p0;
				_node_v8 = that._node_v8;
				_node_v9 = that._node_v9;
				_node_v14_p0 = that._node_v14_p0;
				_node_v15 = that._node_v15;
				_node_v1_p0 = that._node_v1_p0;
				_node_v2_p0 = that._node_v2_p0;
				_node_v5_p0 = that._node_v5_p0;
				_node_v8_p0 = that._node_v8_p0;
				_node_v10 = that._node_v10;
				_node_v16 = that._node_v16;
				_node_v10_p0 = that._node_v10_p0;
				_node_v11 = that._node_v11;
				_node_v13 = that._node_v13;
				_node_v16_p0 = that._node_v16_p0;
				_node_v17 = that._node_v17;
				_node_v19 = that._node_v19;
				_node_v12 = that._node_v12;
				_node_v18 = that._node_v18;
				_node_v12_p0 = that._node_v12_p0;
				_node_v18_p0 = that._node_v18_p0;
				_node_y0 = that._node_y0;
				_node_n_right = that._node_n_right;
				_node_y2 = that._node_y2;
				_node_y3 = that._node_y3;
				_node_y1 = that._node_y1;
				_node_n_left = that._node_n_left;
				_node_e0 = that._node_e0;
				_edge_c0 = that._edge_c0;
				_edge_c1 = that._edge_c1;
				_edge_c2 = that._edge_c2;
				_edge_c3 = that._edge_c3;
				_edge_c4 = that._edge_c4;
				_edge_c5 = that._edge_c5;
				_edge_c6 = that._edge_c6;
				_edge_c7 = that._edge_c7;
				_edge_c8 = that._edge_c8;
				_edge_c9 = that._edge_c9;
				_edge_c10 = that._edge_c10;
				_edge_c11 = that._edge_c11;
				_edge_c12 = that._edge_c12;
				_edge_c13 = that._edge_c13;
				_edge_c14 = that._edge_c14;
				_edge_c15 = that._edge_c15;
				_edge_c16 = that._edge_c16;
				_edge_c17 = that._edge_c17;
				_edge_c18 = that._edge_c18;
				_edge_c19 = that._edge_c19;
				_edge_c20 = that._edge_c20;
				_edge_c21 = that._edge_c21;
				_edge_c22 = that._edge_c22;
				_edge_c23 = that._edge_c23;
				_edge_c24 = that._edge_c24;
				_edge_c25 = that._edge_c25;
				_edge_c26 = that._edge_c26;
				_edge_c27 = that._edge_c27;
				_edge_c28 = that._edge_c28;
				_edge_c29 = that._edge_c29;
				_edge_c30 = that._edge_c30;
				_edge_c31 = that._edge_c31;
				_edge__edge0 = that._edge__edge0;
				_edge__edge1 = that._edge__edge1;
				_edge__edge2 = that._edge__edge2;
				_edge__edge3 = that._edge__edge3;
				_edge__edge4 = that._edge__edge4;
				_edge__edge5 = that._edge__edge5;
				_edge__edge6 = that._edge__edge6;
				_edge__edge7 = that._edge__edge7;
				_edge__edge8 = that._edge__edge8;
				_edge__edge9 = that._edge__edge9;
				_edge__edge10 = that._edge__edge10;
				_edge__edge11 = that._edge__edge11;
				@_pat0 = that.@_pat0;
				@_pat1 = that.@_pat1;
				@_pat2 = that.@_pat2;
				@_pat3 = that.@_pat3;
				@_pat4 = that.@_pat4;
				@_pat5 = that.@_pat5;
				@_pat6 = that.@_pat6;
				@_pat7 = that.@_pat7;
				@_pat8 = that.@_pat8;
				@_pat9 = that.@_pat9;
				@_pat10 = that.@_pat10;
				@_pat11 = that.@_pat11;
				@_pat12 = that.@_pat12;
				@_pat13 = that.@_pat13;
				@_pat14 = that.@_pat14;
				@_pat15 = that.@_pat15;
			}

			public Match_initMvmt(Match_initMvmt that)
			{
				AssignContent(that);
			}
			public void AssignContent(Match_initMvmt that, IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap)
			{
				_node_v0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v0];
				_node_r0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_r0];
				_node_v4 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v4];
				_node_v7 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v7];
				_node_v14 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v14];
				_node_v0_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v0_p0];
				_node_v1 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v1];
				_node_v2 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v2];
				_node_v3 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v3];
				_node_v4_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v4_p0];
				_node_v5 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v5];
				_node_v6 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v6];
				_node_v7_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v7_p0];
				_node_v8 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v8];
				_node_v9 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v9];
				_node_v14_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v14_p0];
				_node_v15 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v15];
				_node_v1_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v1_p0];
				_node_v2_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v2_p0];
				_node_v5_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v5_p0];
				_node_v8_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v8_p0];
				_node_v10 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v10];
				_node_v16 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v16];
				_node_v10_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v10_p0];
				_node_v11 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v11];
				_node_v13 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v13];
				_node_v16_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v16_p0];
				_node_v17 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v17];
				_node_v19 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v19];
				_node_v12 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v12];
				_node_v18 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v18];
				_node_v12_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v12_p0];
				_node_v18_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v18_p0];
				_node_y0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_y0];
				_node_n_right = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_n_right];
				_node_y2 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_y2];
				_node_y3 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_y3];
				_node_y1 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_y1];
				_node_n_left = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_n_left];
				_node_e0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_e0];
				_edge_c0 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c0];
				_edge_c1 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c1];
				_edge_c2 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c2];
				_edge_c3 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c3];
				_edge_c4 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c4];
				_edge_c5 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c5];
				_edge_c6 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c6];
				_edge_c7 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c7];
				_edge_c8 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c8];
				_edge_c9 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c9];
				_edge_c10 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c10];
				_edge_c11 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c11];
				_edge_c12 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c12];
				_edge_c13 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c13];
				_edge_c14 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c14];
				_edge_c15 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c15];
				_edge_c16 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c16];
				_edge_c17 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c17];
				_edge_c18 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c18];
				_edge_c19 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c19];
				_edge_c20 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c20];
				_edge_c21 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c21];
				_edge_c22 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c22];
				_edge_c23 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c23];
				_edge_c24 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c24];
				_edge_c25 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c25];
				_edge_c26 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c26];
				_edge_c27 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c27];
				_edge_c28 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c28];
				_edge_c29 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c29];
				_edge_c30 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c30];
				_edge_c31 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c31];
				_edge__edge0 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge0];
				_edge__edge1 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge1];
				_edge__edge2 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge2];
				_edge__edge3 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge3];
				_edge__edge4 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge4];
				_edge__edge5 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge5];
				_edge__edge6 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge6];
				_edge__edge7 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge7];
				_edge__edge8 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge8];
				_edge__edge9 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge9];
				_edge__edge10 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge10];
				_edge__edge11 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge11];
				@_pat0 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat0, oldToNewMap);
				@_pat1 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat1, oldToNewMap);
				@_pat2 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat2, oldToNewMap);
				@_pat3 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat3, oldToNewMap);
				@_pat4 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat4, oldToNewMap);
				@_pat5 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat5, oldToNewMap);
				@_pat6 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat6, oldToNewMap);
				@_pat7 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat7, oldToNewMap);
				@_pat8 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat8, oldToNewMap);
				@_pat9 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat9, oldToNewMap);
				@_pat10 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat10, oldToNewMap);
				@_pat11 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat11, oldToNewMap);
				@_pat12 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat12, oldToNewMap);
				@_pat13 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat13, oldToNewMap);
				@_pat14 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat14, oldToNewMap);
				@_pat15 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat15, oldToNewMap);
			}

			public Match_initMvmt(Match_initMvmt that, IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap)
			{
				AssignContent(that, oldToNewMap);
			}
			public Match_initMvmt()
			{
			}

			public bool IsEqual(Match_initMvmt that)
			{
				if(that==null) return false;
				if(_node_v0 != that._node_v0) return false;
				if(_node_r0 != that._node_r0) return false;
				if(_node_v4 != that._node_v4) return false;
				if(_node_v7 != that._node_v7) return false;
				if(_node_v14 != that._node_v14) return false;
				if(_node_v0_p0 != that._node_v0_p0) return false;
				if(_node_v1 != that._node_v1) return false;
				if(_node_v2 != that._node_v2) return false;
				if(_node_v3 != that._node_v3) return false;
				if(_node_v4_p0 != that._node_v4_p0) return false;
				if(_node_v5 != that._node_v5) return false;
				if(_node_v6 != that._node_v6) return false;
				if(_node_v7_p0 != that._node_v7_p0) return false;
				if(_node_v8 != that._node_v8) return false;
				if(_node_v9 != that._node_v9) return false;
				if(_node_v14_p0 != that._node_v14_p0) return false;
				if(_node_v15 != that._node_v15) return false;
				if(_node_v1_p0 != that._node_v1_p0) return false;
				if(_node_v2_p0 != that._node_v2_p0) return false;
				if(_node_v5_p0 != that._node_v5_p0) return false;
				if(_node_v8_p0 != that._node_v8_p0) return false;
				if(_node_v10 != that._node_v10) return false;
				if(_node_v16 != that._node_v16) return false;
				if(_node_v10_p0 != that._node_v10_p0) return false;
				if(_node_v11 != that._node_v11) return false;
				if(_node_v13 != that._node_v13) return false;
				if(_node_v16_p0 != that._node_v16_p0) return false;
				if(_node_v17 != that._node_v17) return false;
				if(_node_v19 != that._node_v19) return false;
				if(_node_v12 != that._node_v12) return false;
				if(_node_v18 != that._node_v18) return false;
				if(_node_v12_p0 != that._node_v12_p0) return false;
				if(_node_v18_p0 != that._node_v18_p0) return false;
				if(_node_y0 != that._node_y0) return false;
				if(_node_n_right != that._node_n_right) return false;
				if(_node_y2 != that._node_y2) return false;
				if(_node_y3 != that._node_y3) return false;
				if(_node_y1 != that._node_y1) return false;
				if(_node_n_left != that._node_n_left) return false;
				if(_node_e0 != that._node_e0) return false;
				if(_edge_c0 != that._edge_c0) return false;
				if(_edge_c1 != that._edge_c1) return false;
				if(_edge_c2 != that._edge_c2) return false;
				if(_edge_c3 != that._edge_c3) return false;
				if(_edge_c4 != that._edge_c4) return false;
				if(_edge_c5 != that._edge_c5) return false;
				if(_edge_c6 != that._edge_c6) return false;
				if(_edge_c7 != that._edge_c7) return false;
				if(_edge_c8 != that._edge_c8) return false;
				if(_edge_c9 != that._edge_c9) return false;
				if(_edge_c10 != that._edge_c10) return false;
				if(_edge_c11 != that._edge_c11) return false;
				if(_edge_c12 != that._edge_c12) return false;
				if(_edge_c13 != that._edge_c13) return false;
				if(_edge_c14 != that._edge_c14) return false;
				if(_edge_c15 != that._edge_c15) return false;
				if(_edge_c16 != that._edge_c16) return false;
				if(_edge_c17 != that._edge_c17) return false;
				if(_edge_c18 != that._edge_c18) return false;
				if(_edge_c19 != that._edge_c19) return false;
				if(_edge_c20 != that._edge_c20) return false;
				if(_edge_c21 != that._edge_c21) return false;
				if(_edge_c22 != that._edge_c22) return false;
				if(_edge_c23 != that._edge_c23) return false;
				if(_edge_c24 != that._edge_c24) return false;
				if(_edge_c25 != that._edge_c25) return false;
				if(_edge_c26 != that._edge_c26) return false;
				if(_edge_c27 != that._edge_c27) return false;
				if(_edge_c28 != that._edge_c28) return false;
				if(_edge_c29 != that._edge_c29) return false;
				if(_edge_c30 != that._edge_c30) return false;
				if(_edge_c31 != that._edge_c31) return false;
				if(_edge__edge0 != that._edge__edge0) return false;
				if(_edge__edge1 != that._edge__edge1) return false;
				if(_edge__edge2 != that._edge__edge2) return false;
				if(_edge__edge3 != that._edge__edge3) return false;
				if(_edge__edge4 != that._edge__edge4) return false;
				if(_edge__edge5 != that._edge__edge5) return false;
				if(_edge__edge6 != that._edge__edge6) return false;
				if(_edge__edge7 != that._edge__edge7) return false;
				if(_edge__edge8 != that._edge__edge8) return false;
				if(_edge__edge9 != that._edge__edge9) return false;
				if(_edge__edge10 != that._edge__edge10) return false;
				if(_edge__edge11 != that._edge__edge11) return false;
				if(!@_pat0.IsEqual(that.@_pat0)) return false;
				if(!@_pat1.IsEqual(that.@_pat1)) return false;
				if(!@_pat2.IsEqual(that.@_pat2)) return false;
				if(!@_pat3.IsEqual(that.@_pat3)) return false;
				if(!@_pat4.IsEqual(that.@_pat4)) return false;
				if(!@_pat5.IsEqual(that.@_pat5)) return false;
				if(!@_pat6.IsEqual(that.@_pat6)) return false;
				if(!@_pat7.IsEqual(that.@_pat7)) return false;
				if(!@_pat8.IsEqual(that.@_pat8)) return false;
				if(!@_pat9.IsEqual(that.@_pat9)) return false;
				if(!@_pat10.IsEqual(that.@_pat10)) return false;
				if(!@_pat11.IsEqual(that.@_pat11)) return false;
				if(!@_pat12.IsEqual(that.@_pat12)) return false;
				if(!@_pat13.IsEqual(that.@_pat13)) return false;
				if(!@_pat14.IsEqual(that.@_pat14)) return false;
				if(!@_pat15.IsEqual(that.@_pat15)) return false;
				return true;
			}
		}


		public class Extractor
		{
			public static List<GRGEN_MODEL.ILocale> Extract_v0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.ILocale> resultList = new List<GRGEN_MODEL.ILocale>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v0);
				return resultList;
			}
			public static List<GRGEN_LIBGR.INode> Extract_r0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_LIBGR.INode> resultList = new List<GRGEN_LIBGR.INode>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_r0);
				return resultList;
			}
			public static List<GRGEN_MODEL.ILocale> Extract_v4(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.ILocale> resultList = new List<GRGEN_MODEL.ILocale>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v4);
				return resultList;
			}
			public static List<GRGEN_MODEL.ILocale> Extract_v7(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.ILocale> resultList = new List<GRGEN_MODEL.ILocale>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v7);
				return resultList;
			}
			public static List<GRGEN_MODEL.ILocale> Extract_v14(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.ILocale> resultList = new List<GRGEN_MODEL.ILocale>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v14);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v0_p0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v0_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IRoute> Extract_v1(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IRoute> resultList = new List<GRGEN_MODEL.IRoute>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v1);
				return resultList;
			}
			public static List<GRGEN_MODEL.IRoute> Extract_v2(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IRoute> resultList = new List<GRGEN_MODEL.IRoute>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v2);
				return resultList;
			}
			public static List<GRGEN_MODEL.IOccupiedBy> Extract_v3(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IOccupiedBy> resultList = new List<GRGEN_MODEL.IOccupiedBy>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v3);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v4_p0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v4_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IRoute> Extract_v5(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IRoute> resultList = new List<GRGEN_MODEL.IRoute>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v5);
				return resultList;
			}
			public static List<GRGEN_MODEL.IOccupiedBy> Extract_v6(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IOccupiedBy> resultList = new List<GRGEN_MODEL.IOccupiedBy>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v6);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v7_p0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v7_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IRoute> Extract_v8(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IRoute> resultList = new List<GRGEN_MODEL.IRoute>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v8);
				return resultList;
			}
			public static List<GRGEN_MODEL.IOccupiedBy> Extract_v9(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IOccupiedBy> resultList = new List<GRGEN_MODEL.IOccupiedBy>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v9);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v14_p0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v14_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IOccupiedBy> Extract_v15(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IOccupiedBy> resultList = new List<GRGEN_MODEL.IOccupiedBy>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v15);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v1_p0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v1_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v2_p0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v2_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v5_p0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v5_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v8_p0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v8_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IRobot> Extract_v10(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IRobot> resultList = new List<GRGEN_MODEL.IRobot>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v10);
				return resultList;
			}
			public static List<GRGEN_MODEL.IRobot> Extract_v16(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IRobot> resultList = new List<GRGEN_MODEL.IRobot>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v16);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v10_p0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v10_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.ISLck> Extract_v11(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.ISLck> resultList = new List<GRGEN_MODEL.ISLck>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v11);
				return resultList;
			}
			public static List<GRGEN_MODEL.IMvmt> Extract_v13(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IMvmt> resultList = new List<GRGEN_MODEL.IMvmt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v13);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v16_p0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v16_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.ISLck> Extract_v17(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.ISLck> resultList = new List<GRGEN_MODEL.ISLck>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v17);
				return resultList;
			}
			public static List<GRGEN_MODEL.IMvmt> Extract_v19(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IMvmt> resultList = new List<GRGEN_MODEL.IMvmt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v19);
				return resultList;
			}
			public static List<GRGEN_MODEL.ISLckRef> Extract_v12(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.ISLckRef> resultList = new List<GRGEN_MODEL.ISLckRef>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v12);
				return resultList;
			}
			public static List<GRGEN_MODEL.ISLckRef> Extract_v18(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.ISLckRef> resultList = new List<GRGEN_MODEL.ISLckRef>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v18);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v12_p0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v12_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v18_p0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_v18_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_y0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_y0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_n_right(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_n_right);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_y2(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_y2);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_y3(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_y3);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_y1(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_y1);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_n_left(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_n_left);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBEdge> Extract_e0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IBEdge> resultList = new List<GRGEN_MODEL.IBEdge>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.node_e0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c1(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c1);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c2(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c2);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c3(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c3);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c4(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c4);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c5(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c5);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c6(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c6);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c7(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c7);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c8(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c8);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c9(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c9);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c10(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c10);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c11(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c11);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c12(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c12);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c13(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c13);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c14(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c14);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c15(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c15);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c16(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c16);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c17(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c17);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c18(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c18);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c19(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c19);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c20(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c20);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c21(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c21);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c22(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c22);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c23(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c23);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c24(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c24);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c25(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c25);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c26(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c26);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c27(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c27);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c28(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c28);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c29(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c29);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c30(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c30);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c31(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge_c31);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge0(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge__edge0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge1(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge__edge1);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge2(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge__edge2);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge3(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge__edge3);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge4(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge__edge4);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge5(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge__edge5);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge6(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge__edge6);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge7(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge__edge7);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge8(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge__edge8);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge9(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge__edge9);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge10(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge__edge10);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge11(List<IMatch_initMvmt> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_initMvmt match in matchList)
					resultList.Add(match.edge__edge11);
				return resultList;
			}
		}


		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> ConvertAsNeeded(object parameter)
		{
			if(parameter is List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>)
				return ((List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>)parameter);
			else
				return GRGEN_LIBGR.MatchListHelper.ToList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>((IList<GRGEN_LIBGR.IMatch>)parameter);
		}
	}

	
	public partial class ArrayHelper
	{
		private static GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt instanceBearingAttributeForSearch_initMvmt = new GRGEN_ACTIONS.Rule_initMvmt.Match_initMvmt();
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v0)) {
					seenValues[list[pos].@node_v0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_r0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_LIBGR.INode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_LIBGR.INode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_r0)) {
					seenValues[list[pos].@node_r0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_r0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_r0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_r0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_r0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_r0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_LIBGR.INode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_r0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_r0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_LIBGR.INode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_r0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_r0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_LIBGR.INode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_r0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_r0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_LIBGR.INode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_r0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v4(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v4)) {
					seenValues[list[pos].@node_v4].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v4, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v4(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v4)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v4, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v4(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v4(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v4(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v4(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v4.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v7(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v7)) {
					seenValues[list[pos].@node_v7].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v7, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v7(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v7)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v7, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v7(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v7(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v7(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v7(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v7.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v14(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v14)) {
					seenValues[list[pos].@node_v14].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v14, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v14(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v14)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v14, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v14(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v14(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v14(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v14(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v14.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v0_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v0_p0)) {
					seenValues[list[pos].@node_v0_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v0_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v0_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v0_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v0_p0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v0_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v0_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v0_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v0_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v0_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v0_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v0_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v0_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v1(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IRoute, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IRoute, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v1)) {
					seenValues[list[pos].@node_v1].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v1, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v1(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IRoute, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IRoute, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v1)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v1, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v1(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRoute entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v1(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRoute entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v1(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRoute entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v1(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRoute entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v1.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v2(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IRoute, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IRoute, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v2)) {
					seenValues[list[pos].@node_v2].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v2, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v2(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IRoute, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IRoute, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v2)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v2, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v2(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRoute entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v2(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRoute entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v2(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRoute entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v2(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRoute entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v2.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v3(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v3)) {
					seenValues[list[pos].@node_v3].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v3, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v3(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v3)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v3, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v3(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v3(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v3(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v3(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v3.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v4_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v4_p0)) {
					seenValues[list[pos].@node_v4_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v4_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v4_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v4_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v4_p0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v4_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v4_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v4_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v4_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v4_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v4_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v4_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v4_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v5(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IRoute, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IRoute, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v5)) {
					seenValues[list[pos].@node_v5].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v5, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v5(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IRoute, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IRoute, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v5)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v5, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v5(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRoute entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v5(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRoute entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v5(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRoute entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v5(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRoute entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v5.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v6(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v6)) {
					seenValues[list[pos].@node_v6].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v6, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v6(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v6)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v6, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v6(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v6(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v6(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v6(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v6.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v7_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v7_p0)) {
					seenValues[list[pos].@node_v7_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v7_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v7_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v7_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v7_p0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v7_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v7_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v7_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v7_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v7_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v7_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v7_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v7_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v8(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IRoute, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IRoute, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v8)) {
					seenValues[list[pos].@node_v8].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v8, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v8(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IRoute, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IRoute, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v8)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v8, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v8(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRoute entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v8(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRoute entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v8(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRoute entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v8(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRoute entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v8.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v9(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v9)) {
					seenValues[list[pos].@node_v9].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v9, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v9(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v9)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v9, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v9(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v9(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v9(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v9(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v9.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v14_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v14_p0)) {
					seenValues[list[pos].@node_v14_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v14_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v14_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v14_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v14_p0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v14_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v14_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v14_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v14_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v14_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v14_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v14_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v14_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v15(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v15)) {
					seenValues[list[pos].@node_v15].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v15, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v15(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v15)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v15, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v15(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v15(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v15(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v15(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v15.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v1_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v1_p0)) {
					seenValues[list[pos].@node_v1_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v1_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v1_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v1_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v1_p0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v1_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v1_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v1_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v1_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v1_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v1_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v1_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v1_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v2_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v2_p0)) {
					seenValues[list[pos].@node_v2_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v2_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v2_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v2_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v2_p0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v2_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v2_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v2_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v2_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v2_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v2_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v2_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v2_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v5_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v5_p0)) {
					seenValues[list[pos].@node_v5_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v5_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v5_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v5_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v5_p0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v5_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v5_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v5_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v5_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v5_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v5_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v5_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v5_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v8_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v8_p0)) {
					seenValues[list[pos].@node_v8_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v8_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v8_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v8_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v8_p0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v8_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v8_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v8_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v8_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v8_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v8_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v8_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v8_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v10(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IRobot, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IRobot, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v10)) {
					seenValues[list[pos].@node_v10].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v10, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v10(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IRobot, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IRobot, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v10)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v10, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v10(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRobot entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v10(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRobot entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v10(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRobot entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v10(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRobot entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v10.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v16(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IRobot, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IRobot, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v16)) {
					seenValues[list[pos].@node_v16].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v16, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v16(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IRobot, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IRobot, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v16)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v16, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v16(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRobot entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v16(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRobot entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v16(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRobot entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v16(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IRobot entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v16.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v10_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v10_p0)) {
					seenValues[list[pos].@node_v10_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v10_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v10_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v10_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v10_p0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v10_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v10_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v10_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v10_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v10_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v10_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v10_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v10_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v11(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.ISLck, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.ISLck, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v11)) {
					seenValues[list[pos].@node_v11].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v11, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v11(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.ISLck, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ISLck, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v11)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v11, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v11(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ISLck entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v11(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ISLck entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v11(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ISLck entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v11(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ISLck entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v11.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v13(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IMvmt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IMvmt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v13)) {
					seenValues[list[pos].@node_v13].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v13, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v13(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IMvmt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IMvmt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v13)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v13, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v13(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IMvmt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v13(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IMvmt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v13(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IMvmt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v13(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IMvmt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v13.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v16_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v16_p0)) {
					seenValues[list[pos].@node_v16_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v16_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v16_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v16_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v16_p0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v16_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v16_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v16_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v16_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v16_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v16_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v16_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v16_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v17(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.ISLck, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.ISLck, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v17)) {
					seenValues[list[pos].@node_v17].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v17, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v17(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.ISLck, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ISLck, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v17)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v17, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v17(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ISLck entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v17.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v17(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ISLck entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v17.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v17(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ISLck entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v17.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v17(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ISLck entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v17.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v19(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IMvmt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IMvmt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v19)) {
					seenValues[list[pos].@node_v19].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v19, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v19(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IMvmt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IMvmt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v19)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v19, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v19(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IMvmt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v19.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v19(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IMvmt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v19.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v19(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IMvmt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v19.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v19(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IMvmt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v19.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v12(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.ISLckRef, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.ISLckRef, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v12)) {
					seenValues[list[pos].@node_v12].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v12, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v12(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.ISLckRef, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ISLckRef, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v12)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v12, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v12(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ISLckRef entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v12(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ISLckRef entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v12(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ISLckRef entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v12(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ISLckRef entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v12.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v18(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.ISLckRef, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.ISLckRef, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v18)) {
					seenValues[list[pos].@node_v18].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v18, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v18(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.ISLckRef, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ISLckRef, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v18)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v18, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v18(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ISLckRef entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v18.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v18(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ISLckRef entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v18.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v18(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ISLckRef entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v18.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v18(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.ISLckRef entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v18.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v12_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v12_p0)) {
					seenValues[list[pos].@node_v12_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v12_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v12_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v12_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v12_p0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v12_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v12_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v12_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v12_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v12_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v12_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v12_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v12_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_v18_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v18_p0)) {
					seenValues[list[pos].@node_v18_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v18_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_v18_p0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v18_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v18_p0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_v18_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v18_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_v18_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v18_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v18_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v18_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_v18_p0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v18_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_y0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_y0)) {
					seenValues[list[pos].@node_y0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_y0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_y0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_y0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_y0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_y0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_y0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_y0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_y0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_y0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_y0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_y0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_y0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_n_right(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_n_right)) {
					seenValues[list[pos].@node_n_right].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_n_right, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_n_right(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_n_right)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_n_right, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_n_right(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_n_right.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_n_right(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_n_right.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_n_right(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_n_right.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_n_right(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_n_right.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_y2(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_y2)) {
					seenValues[list[pos].@node_y2].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_y2, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_y2(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_y2)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_y2, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_y2(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_y2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_y2(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_y2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_y2(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_y2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_y2(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_y2.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_y3(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_y3)) {
					seenValues[list[pos].@node_y3].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_y3, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_y3(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_y3)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_y3, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_y3(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_y3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_y3(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_y3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_y3(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_y3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_y3(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_y3.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_y1(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_y1)) {
					seenValues[list[pos].@node_y1].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_y1, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_y1(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_y1)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_y1, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_y1(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_y1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_y1(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_y1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_y1(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_y1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_y1(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_y1.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_n_left(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_n_left)) {
					seenValues[list[pos].@node_n_left].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_n_left, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_n_left(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_n_left)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_n_left, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_n_left(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_n_left.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_n_left(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_n_left.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_n_left(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_n_left.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_n_left(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_n_left.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_e0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IBEdge, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IBEdge, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_e0)) {
					seenValues[list[pos].@node_e0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_e0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_e0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IBEdge, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBEdge, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_e0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_e0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_e0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBEdge entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_e0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_e0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBEdge entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_e0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_e0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBEdge entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_e0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_e0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IBEdge entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_e0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c0)) {
					seenValues[list[pos].@edge_c0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c1(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c1)) {
					seenValues[list[pos].@edge_c1].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c1, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c1(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c1)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c1, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c1(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c1(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c1(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c1(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c1.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c2(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c2)) {
					seenValues[list[pos].@edge_c2].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c2, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c2(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c2)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c2, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c2(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c2(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c2(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c2(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c2.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c3(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c3)) {
					seenValues[list[pos].@edge_c3].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c3, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c3(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c3)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c3, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c3(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c3(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c3(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c3(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c3.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c4(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c4)) {
					seenValues[list[pos].@edge_c4].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c4, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c4(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c4)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c4, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c4(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c4(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c4(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c4(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c4.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c5(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c5)) {
					seenValues[list[pos].@edge_c5].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c5, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c5(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c5)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c5, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c5(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c5(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c5(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c5(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c5.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c6(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c6)) {
					seenValues[list[pos].@edge_c6].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c6, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c6(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c6)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c6, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c6(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c6(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c6(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c6(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c6.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c7(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c7)) {
					seenValues[list[pos].@edge_c7].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c7, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c7(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c7)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c7, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c7(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c7(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c7(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c7(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c7.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c8(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c8)) {
					seenValues[list[pos].@edge_c8].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c8, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c8(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c8)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c8, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c8(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c8(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c8(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c8(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c8.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c9(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c9)) {
					seenValues[list[pos].@edge_c9].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c9, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c9(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c9)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c9, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c9(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c9(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c9(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c9(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c9.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c10(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c10)) {
					seenValues[list[pos].@edge_c10].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c10, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c10(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c10)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c10, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c10(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c10(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c10(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c10(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c10.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c11(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c11)) {
					seenValues[list[pos].@edge_c11].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c11, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c11(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c11)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c11, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c11(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c11(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c11(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c11(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c11.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c12(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c12)) {
					seenValues[list[pos].@edge_c12].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c12, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c12(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c12)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c12, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c12(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c12(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c12(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c12(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c12.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c13(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c13)) {
					seenValues[list[pos].@edge_c13].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c13, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c13(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c13)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c13, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c13(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c13(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c13(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c13(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c13.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c14(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c14)) {
					seenValues[list[pos].@edge_c14].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c14, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c14(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c14)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c14, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c14(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c14(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c14(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c14(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c14.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c15(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c15)) {
					seenValues[list[pos].@edge_c15].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c15, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c15(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c15)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c15, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c15(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c15(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c15(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c15(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c15.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c16(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c16)) {
					seenValues[list[pos].@edge_c16].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c16, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c16(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c16)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c16, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c16(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c16(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c16(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c16(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c16.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c17(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c17)) {
					seenValues[list[pos].@edge_c17].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c17, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c17(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c17)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c17, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c17(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c17.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c17(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c17.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c17(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c17.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c17(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c17.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c18(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c18)) {
					seenValues[list[pos].@edge_c18].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c18, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c18(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c18)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c18, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c18(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c18.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c18(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c18.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c18(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c18.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c18(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c18.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c19(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c19)) {
					seenValues[list[pos].@edge_c19].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c19, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c19(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c19)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c19, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c19(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c19.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c19(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c19.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c19(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c19.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c19(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c19.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c20(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c20)) {
					seenValues[list[pos].@edge_c20].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c20, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c20(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c20)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c20, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c20(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c20.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c20(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c20.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c20(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c20.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c20(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c20.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c21(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c21)) {
					seenValues[list[pos].@edge_c21].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c21, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c21(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c21)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c21, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c21(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c21.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c21(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c21.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c21(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c21.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c21(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c21.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c22(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c22)) {
					seenValues[list[pos].@edge_c22].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c22, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c22(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c22)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c22, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c22(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c22.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c22(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c22.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c22(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c22.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c22(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c22.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c23(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c23)) {
					seenValues[list[pos].@edge_c23].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c23, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c23(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c23)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c23, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c23(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c23.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c23(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c23.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c23(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c23.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c23(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c23.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c24(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c24)) {
					seenValues[list[pos].@edge_c24].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c24, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c24(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c24)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c24, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c24(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c24.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c24(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c24.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c24(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c24.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c24(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c24.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c25(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c25)) {
					seenValues[list[pos].@edge_c25].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c25, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c25(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c25)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c25, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c25(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c25.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c25(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c25.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c25(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c25.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c25(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c25.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c26(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c26)) {
					seenValues[list[pos].@edge_c26].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c26, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c26(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c26)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c26, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c26(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c26.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c26(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c26.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c26(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c26.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c26(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c26.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c27(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c27)) {
					seenValues[list[pos].@edge_c27].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c27, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c27(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c27)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c27, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c27(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c27.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c27(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c27.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c27(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c27.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c27(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c27.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c28(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c28)) {
					seenValues[list[pos].@edge_c28].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c28, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c28(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c28)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c28, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c28(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c28.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c28(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c28.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c28(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c28.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c28(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c28.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c29(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c29)) {
					seenValues[list[pos].@edge_c29].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c29, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c29(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c29)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c29, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c29(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c29.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c29(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c29.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c29(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c29.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c29(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c29.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c30(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c30)) {
					seenValues[list[pos].@edge_c30].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c30, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c30(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c30)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c30, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c30(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c30.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c30(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c30.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c30(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c30.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c30(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c30.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy_c31(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c31)) {
					seenValues[list[pos].@edge_c31].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c31, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy_c31(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c31)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c31, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy_c31(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c31.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy_c31(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c31.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c31(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c31.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy_c31(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c31.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy__edge0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge0)) {
					seenValues[list[pos].@edge__edge0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy__edge0(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge0, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy__edge0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy__edge0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge0(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy__edge1(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge1)) {
					seenValues[list[pos].@edge__edge1].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge1, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy__edge1(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge1)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge1, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy__edge1(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy__edge1(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge1(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge1(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge1.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy__edge2(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge2)) {
					seenValues[list[pos].@edge__edge2].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge2, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy__edge2(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge2)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge2, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy__edge2(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy__edge2(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge2(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge2(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge2.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy__edge3(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge3)) {
					seenValues[list[pos].@edge__edge3].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge3, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy__edge3(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge3)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge3, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy__edge3(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy__edge3(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge3(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge3(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge3.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy__edge4(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge4)) {
					seenValues[list[pos].@edge__edge4].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge4, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy__edge4(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge4)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge4, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy__edge4(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy__edge4(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge4(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge4(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge4.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy__edge5(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge5)) {
					seenValues[list[pos].@edge__edge5].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge5, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy__edge5(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge5)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge5, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy__edge5(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy__edge5(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge5(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge5(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge5.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy__edge6(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge6)) {
					seenValues[list[pos].@edge__edge6].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge6, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy__edge6(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge6)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge6, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy__edge6(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy__edge6(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge6(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge6(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge6.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy__edge7(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge7)) {
					seenValues[list[pos].@edge__edge7].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge7, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy__edge7(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge7)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge7, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy__edge7(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy__edge7(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge7(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge7(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge7.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy__edge8(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge8)) {
					seenValues[list[pos].@edge__edge8].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge8, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy__edge8(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge8)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge8, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy__edge8(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy__edge8(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge8(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge8(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge8.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy__edge9(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge9)) {
					seenValues[list[pos].@edge__edge9].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge9, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy__edge9(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge9)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge9, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy__edge9(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy__edge9(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge9(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge9(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge9.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy__edge10(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge10)) {
					seenValues[list[pos].@edge__edge10].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge10, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy__edge10(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge10)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge10, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy__edge10(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy__edge10(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge10(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge10(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge10.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_groupBy__edge11(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge11)) {
					seenValues[list[pos].@edge__edge11].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> tempList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge11, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			foreach(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> Array_initMvmt_keepOneForEachBy__edge11(List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list)
		{
			List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> newList = new List<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge11)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge11, null);
				}
			}
			return newList;
		}
		public static int Array_initMvmt_indexOfBy__edge11(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_indexOfBy__edge11(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge11(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_initMvmt_lastIndexOfBy__edge11(IList<GRGEN_ACTIONS.Rule_initMvmt.IMatch_initMvmt> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge11.Equals(entry))
					return i;
			return -1;
		}
	}

	public class Rule_move : GRGEN_LGSP.LGSPRulePattern
	{
		private static Rule_move instance = null;
		public static Rule_move Instance { get { if(instance==null) { instance = new Rule_move(); instance.initialize(); } return instance; } }

		public static GRGEN_LIBGR.NodeType[] move_node_v0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_r0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_v9_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_v0_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_v1_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_v3_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_v9_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_v10_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_v1_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_v2_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_v4_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_v2_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_v4_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_v5_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_v7_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_v6_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_v8_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_v6_p0_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_src_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_tgt_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_n_id_AllowedTypes = null;
		public static GRGEN_LIBGR.NodeType[] move_node_ref_AllowedTypes = null;
		public static bool[] move_node_v0_IsAllowedType = null;
		public static bool[] move_node_r0_IsAllowedType = null;
		public static bool[] move_node_v9_IsAllowedType = null;
		public static bool[] move_node_v0_p0_IsAllowedType = null;
		public static bool[] move_node_v1_IsAllowedType = null;
		public static bool[] move_node_v3_IsAllowedType = null;
		public static bool[] move_node_v9_p0_IsAllowedType = null;
		public static bool[] move_node_v10_IsAllowedType = null;
		public static bool[] move_node_v1_p0_IsAllowedType = null;
		public static bool[] move_node_v2_IsAllowedType = null;
		public static bool[] move_node_v4_IsAllowedType = null;
		public static bool[] move_node_v2_p0_IsAllowedType = null;
		public static bool[] move_node_v4_p0_IsAllowedType = null;
		public static bool[] move_node_v5_IsAllowedType = null;
		public static bool[] move_node_v7_IsAllowedType = null;
		public static bool[] move_node_v6_IsAllowedType = null;
		public static bool[] move_node_v8_IsAllowedType = null;
		public static bool[] move_node_v6_p0_IsAllowedType = null;
		public static bool[] move_node_src_IsAllowedType = null;
		public static bool[] move_node_tgt_IsAllowedType = null;
		public static bool[] move_node_n_id_IsAllowedType = null;
		public static bool[] move_node_ref_IsAllowedType = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge_c0_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge_c1_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge_c2_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge_c3_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge_c4_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge_c5_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge_c6_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge_c7_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge_c8_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge_c9_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge_c10_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge_c11_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge_c12_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge_c13_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge_c14_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge_c15_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge_c16_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge__edge0_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge__edge1_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge__edge2_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge__edge3_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge__edge4_AllowedTypes = null;
		public static GRGEN_LIBGR.EdgeType[] move_edge__edge5_AllowedTypes = null;
		public static bool[] move_edge_c0_IsAllowedType = null;
		public static bool[] move_edge_c1_IsAllowedType = null;
		public static bool[] move_edge_c2_IsAllowedType = null;
		public static bool[] move_edge_c3_IsAllowedType = null;
		public static bool[] move_edge_c4_IsAllowedType = null;
		public static bool[] move_edge_c5_IsAllowedType = null;
		public static bool[] move_edge_c6_IsAllowedType = null;
		public static bool[] move_edge_c7_IsAllowedType = null;
		public static bool[] move_edge_c8_IsAllowedType = null;
		public static bool[] move_edge_c9_IsAllowedType = null;
		public static bool[] move_edge_c10_IsAllowedType = null;
		public static bool[] move_edge_c11_IsAllowedType = null;
		public static bool[] move_edge_c12_IsAllowedType = null;
		public static bool[] move_edge_c13_IsAllowedType = null;
		public static bool[] move_edge_c14_IsAllowedType = null;
		public static bool[] move_edge_c15_IsAllowedType = null;
		public static bool[] move_edge_c16_IsAllowedType = null;
		public static bool[] move_edge__edge0_IsAllowedType = null;
		public static bool[] move_edge__edge1_IsAllowedType = null;
		public static bool[] move_edge__edge2_IsAllowedType = null;
		public static bool[] move_edge__edge3_IsAllowedType = null;
		public static bool[] move_edge__edge4_IsAllowedType = null;
		public static bool[] move_edge__edge5_IsAllowedType = null;
		public enum move_NodeNums { @v0, @r0, @v9, @v0_p0, @v1, @v3, @v9_p0, @v10, @v1_p0, @v2, @v4, @v2_p0, @v4_p0, @v5, @v7, @v6, @v8, @v6_p0, @src, @tgt, @n_id, @ref, };
		public enum move_EdgeNums { @c0, @c1, @c2, @c3, @c4, @c5, @c6, @c7, @c8, @c9, @c10, @c11, @c12, @c13, @c14, @c15, @c16, @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, };
		public enum move_VariableNums { };
		public enum move_SubNums { @pat0, @pat1, @pat2, @pat3, @pat4, @pat5, @pat6, };
		public enum move_AltNums { };
		public enum move_IterNums { };





		public static Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> fill_anonymous_set_12384(GRGEN_LIBGR.INode item0, GRGEN_LIBGR.INode item1, GRGEN_LIBGR.INode item2, GRGEN_LIBGR.INode item3, GRGEN_LIBGR.INode item4, GRGEN_LIBGR.INode item5, GRGEN_LIBGR.INode item6, GRGEN_LIBGR.INode item7, GRGEN_LIBGR.INode item8, GRGEN_LIBGR.INode item9, GRGEN_LIBGR.INode item10, GRGEN_LIBGR.INode item11) {
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> anonymous_set_12384 = new Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType>();
			anonymous_set_12384[item0] = null;
			anonymous_set_12384[item1] = null;
			anonymous_set_12384[item2] = null;
			anonymous_set_12384[item3] = null;
			anonymous_set_12384[item4] = null;
			anonymous_set_12384[item5] = null;
			anonymous_set_12384[item6] = null;
			anonymous_set_12384[item7] = null;
			anonymous_set_12384[item8] = null;
			anonymous_set_12384[item9] = null;
			anonymous_set_12384[item10] = null;
			anonymous_set_12384[item11] = null;
			return anonymous_set_12384;
		}
		public static Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.INode> fill_anonymous_map_12409(GRGEN_LIBGR.INode itemkey0,GRGEN_LIBGR.INode itemvalue0, GRGEN_LIBGR.INode itemkey1,GRGEN_LIBGR.INode itemvalue1, GRGEN_LIBGR.INode itemkey2,GRGEN_LIBGR.INode itemvalue2, GRGEN_LIBGR.INode itemkey3,GRGEN_LIBGR.INode itemvalue3) {
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.INode> anonymous_map_12409 = new Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.INode>();
			anonymous_map_12409[itemkey0] = itemvalue0;
			anonymous_map_12409[itemkey1] = itemvalue1;
			anonymous_map_12409[itemkey2] = itemvalue2;
			anonymous_map_12409[itemkey3] = itemvalue3;
			return anonymous_map_12409;
		}
		public static Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.INode> fill_anonymous_map_12414() {
			Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.INode> anonymous_map_12414 = new Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.INode>();
			return anonymous_map_12414;
		}

		public GRGEN_LGSP.PatternGraph pat_move;


		private Rule_move()
			: base("move",
				new GRGEN_LIBGR.GrGenType[] { },
				new string[] { },
				new GRGEN_LIBGR.GrGenType[] { },
				new string[] { },
				new GRGEN_LIBGR.GrGenType[] { },
				new GRGEN_LGSP.LGSPFilter[] {
					new GRGEN_LGSP.LGSPFilterAutoSupplied("keepFirst", null, "keepFirst", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(int)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("keepLast", null, "keepLast", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(int)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("keepFirstFraction", null, "keepFirstFraction", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(double)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("keepLastFraction", null, "keepLastFraction", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(double)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("removeFirst", null, "removeFirst", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(int)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("removeLast", null, "removeLast", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(int)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("removeFirstFraction", null, "removeFirstFraction", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(double)), }, new String[] {"param"}),
					new GRGEN_LGSP.LGSPFilterAutoSupplied("removeLastFraction", null, "removeLastFraction", null, new GRGEN_LIBGR.GrGenType[] {GRGEN_LIBGR.VarType.GetVarType(typeof(double)), }, new String[] {"param"}),
				},
				new GRGEN_LIBGR.MatchClassInfo[] { },
				"de.unika.ipd.grGen.Action_ruleset.Rule_move+IMatch_move",
				"de.unika.ipd.grGen.Action_ruleset.Rule_move+Match_move"
			)
		{
		}
		private void initialize()
		{
			bool[,] move_isNodeHomomorphicGlobal = new bool[22, 22] {
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
			};
			bool[,] move_isEdgeHomomorphicGlobal = new bool[23, 23] {
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
				{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
			};
			bool[] move_isNodeTotallyHomomorphic = new bool[22] { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,  };
			bool[] move_isEdgeTotallyHomomorphic = new bool[23] { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,  };
			GRGEN_LGSP.PatternNode move_node_v0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Locale, GRGEN_MODEL.NodeType_Locale.typeVar, "GRGEN_MODEL.ILocale", "move_node_v0", "v0", move_node_v0_AllowedTypes, move_node_v0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_r0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Node, GRGEN_MODEL.NodeType_Node.typeVar, "GRGEN_LIBGR.INode", "move_node_r0", "r0", move_node_r0_AllowedTypes, move_node_r0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_v9 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Locale, GRGEN_MODEL.NodeType_Locale.typeVar, "GRGEN_MODEL.ILocale", "move_node_v9", "v9", move_node_v9_AllowedTypes, move_node_v9_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_v0_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "move_node_v0_p0", "v0_p0", move_node_v0_p0_AllowedTypes, move_node_v0_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_v1 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@WayPoint, GRGEN_MODEL.NodeType_WayPoint.typeVar, "GRGEN_MODEL.IWayPoint", "move_node_v1", "v1", move_node_v1_AllowedTypes, move_node_v1_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_v3 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@OccupiedBy, GRGEN_MODEL.NodeType_OccupiedBy.typeVar, "GRGEN_MODEL.IOccupiedBy", "move_node_v3", "v3", move_node_v3_AllowedTypes, move_node_v3_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_v9_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "move_node_v9_p0", "v9_p0", move_node_v9_p0_AllowedTypes, move_node_v9_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_v10 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@OccupiedBy, GRGEN_MODEL.NodeType_OccupiedBy.typeVar, "GRGEN_MODEL.IOccupiedBy", "move_node_v10", "v10", move_node_v10_AllowedTypes, move_node_v10_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_v1_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "move_node_v1_p0", "v1_p0", move_node_v1_p0_AllowedTypes, move_node_v1_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_v2 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@SLckRef, GRGEN_MODEL.NodeType_SLckRef.typeVar, "GRGEN_MODEL.ISLckRef", "move_node_v2", "v2", move_node_v2_AllowedTypes, move_node_v2_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_v4 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Robot, GRGEN_MODEL.NodeType_Robot.typeVar, "GRGEN_MODEL.IRobot", "move_node_v4", "v4", move_node_v4_AllowedTypes, move_node_v4_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_v2_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "move_node_v2_p0", "v2_p0", move_node_v2_p0_AllowedTypes, move_node_v2_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_v4_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "move_node_v4_p0", "v4_p0", move_node_v4_p0_AllowedTypes, move_node_v4_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_v5 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@SLck, GRGEN_MODEL.NodeType_SLck.typeVar, "GRGEN_MODEL.ISLck", "move_node_v5", "v5", move_node_v5_AllowedTypes, move_node_v5_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_v7 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Mvmt, GRGEN_MODEL.NodeType_Mvmt.typeVar, "GRGEN_MODEL.IMvmt", "move_node_v7", "v7", move_node_v7_AllowedTypes, move_node_v7_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_v6 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@SLckRef, GRGEN_MODEL.NodeType_SLckRef.typeVar, "GRGEN_MODEL.ISLckRef", "move_node_v6", "v6", move_node_v6_AllowedTypes, move_node_v6_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_v8 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@Token, GRGEN_MODEL.NodeType_Token.typeVar, "GRGEN_MODEL.IToken", "move_node_v8", "v8", move_node_v8_AllowedTypes, move_node_v8_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_v6_p0 = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BPort, GRGEN_MODEL.NodeType_BPort.typeVar, "GRGEN_MODEL.IBPort", "move_node_v6_p0", "v6_p0", move_node_v6_p0_AllowedTypes, move_node_v6_p0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_src = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "move_node_src", "src", move_node_src_AllowedTypes, move_node_src_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_tgt = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "move_node_tgt", "tgt", move_node_tgt_AllowedTypes, move_node_tgt_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_n_id = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "move_node_n_id", "n_id", move_node_n_id_AllowedTypes, move_node_n_id_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternNode move_node_ref = new GRGEN_LGSP.PatternNode((int) GRGEN_MODEL.NodeTypes.@BLink, GRGEN_MODEL.NodeType_BLink.typeVar, "GRGEN_MODEL.IBLink", "move_node_ref", "ref", move_node_ref_AllowedTypes, move_node_ref_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge_c0 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "move_edge_c0", "c0", move_edge_c0_AllowedTypes, move_edge_c0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge_c1 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "move_edge_c1", "c1", move_edge_c1_AllowedTypes, move_edge_c1_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge_c2 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "move_edge_c2", "c2", move_edge_c2_AllowedTypes, move_edge_c2_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge_c3 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "move_edge_c3", "c3", move_edge_c3_AllowedTypes, move_edge_c3_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge_c4 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "move_edge_c4", "c4", move_edge_c4_AllowedTypes, move_edge_c4_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge_c5 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "move_edge_c5", "c5", move_edge_c5_AllowedTypes, move_edge_c5_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge_c6 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "move_edge_c6", "c6", move_edge_c6_AllowedTypes, move_edge_c6_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge_c7 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "move_edge_c7", "c7", move_edge_c7_AllowedTypes, move_edge_c7_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge_c8 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "move_edge_c8", "c8", move_edge_c8_AllowedTypes, move_edge_c8_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge_c9 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "move_edge_c9", "c9", move_edge_c9_AllowedTypes, move_edge_c9_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge_c10 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "move_edge_c10", "c10", move_edge_c10_AllowedTypes, move_edge_c10_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge_c11 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "move_edge_c11", "c11", move_edge_c11_AllowedTypes, move_edge_c11_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge_c12 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "move_edge_c12", "c12", move_edge_c12_AllowedTypes, move_edge_c12_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge_c13 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "move_edge_c13", "c13", move_edge_c13_AllowedTypes, move_edge_c13_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge_c14 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "move_edge_c14", "c14", move_edge_c14_AllowedTypes, move_edge_c14_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge_c15 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bPrnt, GRGEN_MODEL.EdgeType_bPrnt.typeVar, "GRGEN_MODEL.IbPrnt", "move_edge_c15", "c15", move_edge_c15_AllowedTypes, move_edge_c15_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge_c16 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bNode, GRGEN_MODEL.EdgeType_bNode.typeVar, "GRGEN_MODEL.IbNode", "move_edge_c16", "c16", move_edge_c16_AllowedTypes, move_edge_c16_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge__edge0 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "move_edge__edge0", "_edge0", move_edge__edge0_AllowedTypes, move_edge__edge0_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge__edge1 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "move_edge__edge1", "_edge1", move_edge__edge1_AllowedTypes, move_edge__edge1_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge__edge2 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "move_edge__edge2", "_edge2", move_edge__edge2_AllowedTypes, move_edge__edge2_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge__edge3 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "move_edge__edge3", "_edge3", move_edge__edge3_AllowedTypes, move_edge__edge3_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge__edge4 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "move_edge__edge4", "_edge4", move_edge__edge4_AllowedTypes, move_edge__edge4_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternEdge move_edge__edge5 = new GRGEN_LGSP.PatternEdge(true, (int) GRGEN_MODEL.EdgeTypes.@bLink, GRGEN_MODEL.EdgeType_bLink.typeVar, "GRGEN_MODEL.IbLink", "move_edge__edge5", "_edge5", move_edge__edge5_AllowedTypes, move_edge__edge5_IsAllowedType, 5.5F, -1, false, null, null, null, null, null, null, false, null);
			GRGEN_LGSP.PatternGraphEmbedding move_pat0 = new GRGEN_LGSP.PatternGraphEmbedding("pat0", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("move_node_v6"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "move_node_v6" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { move_node_v6 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding move_pat1 = new GRGEN_LGSP.PatternGraphEmbedding("pat1", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("move_node_v8"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "move_node_v8" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { move_node_v8 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding move_pat2 = new GRGEN_LGSP.PatternGraphEmbedding("pat2", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("move_node_v10"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "move_node_v10" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { move_node_v10 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding move_pat3 = new GRGEN_LGSP.PatternGraphEmbedding("pat3", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("move_node_v1"),
					new GRGEN_EXPR.Constant("1"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "move_node_v1" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { move_node_v1 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding move_pat4 = new GRGEN_LGSP.PatternGraphEmbedding("pat4", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("move_node_v2"),
					new GRGEN_EXPR.Constant("0"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "move_node_v2" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { move_node_v2 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding move_pat5 = new GRGEN_LGSP.PatternGraphEmbedding("pat5", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("move_node_v3"),
					new GRGEN_EXPR.Constant("1"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "move_node_v3" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { move_node_v3 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternGraphEmbedding move_pat6 = new GRGEN_LGSP.PatternGraphEmbedding("pat6", Pattern_nac_NodesWithoutSites.Instance, 
				new GRGEN_EXPR.Expression[] {
					new GRGEN_EXPR.GraphEntityExpression("move_node_v5"),
					new GRGEN_EXPR.Constant("1"),
				}, 
				new string[] { }, new GRGEN_LGSP.PatternElement[] { }, new GRGEN_LGSP.PatternVariable[] { },
				new string[] { "move_node_v5" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { move_node_v5 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition move_cond_0 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "move_node_v6_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "move_node_v6_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { move_node_v6_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition move_cond_1 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "move_node_v9_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "move_node_v9_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { move_node_v9_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition move_cond_2 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "move_node_v0_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "move_node_v0_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { move_node_v0_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition move_cond_3 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "move_node_v1_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "move_node_v1_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { move_node_v1_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition move_cond_4 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "move_node_v2_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "move_node_v2_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { move_node_v2_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			GRGEN_LGSP.PatternCondition move_cond_5 = new GRGEN_LGSP.PatternCondition(
				new GRGEN_EXPR.EQ(new GRGEN_EXPR.Qualification("GRGEN_MODEL.IBPort", true, "move_node_v4_p0", "ix"), new GRGEN_EXPR.Constant("0")),
				new string[] { "move_node_v4_p0" }, new string[] {  }, new string[] {  },
				new GRGEN_LGSP.PatternNode[] { move_node_v4_p0 }, new GRGEN_LGSP.PatternEdge[] {  }, new GRGEN_LGSP.PatternVariable[] {  });
			pat_move = new GRGEN_LGSP.PatternGraph(
				"move",
				"",
				null, "move",
				false, false,
				new GRGEN_LGSP.PatternNode[] { move_node_v0, move_node_r0, move_node_v9, move_node_v0_p0, move_node_v1, move_node_v3, move_node_v9_p0, move_node_v10, move_node_v1_p0, move_node_v2, move_node_v4, move_node_v2_p0, move_node_v4_p0, move_node_v5, move_node_v7, move_node_v6, move_node_v8, move_node_v6_p0, move_node_src, move_node_tgt, move_node_n_id, move_node_ref }, 
				new GRGEN_LGSP.PatternEdge[] { move_edge_c0, move_edge_c1, move_edge_c2, move_edge_c3, move_edge_c4, move_edge_c5, move_edge_c6, move_edge_c7, move_edge_c8, move_edge_c9, move_edge_c10, move_edge_c11, move_edge_c12, move_edge_c13, move_edge_c14, move_edge_c15, move_edge_c16, move_edge__edge0, move_edge__edge1, move_edge__edge2, move_edge__edge3, move_edge__edge4, move_edge__edge5 }, 
				new GRGEN_LGSP.PatternVariable[] {  }, 
				new GRGEN_LGSP.PatternGraphEmbedding[] { move_pat0, move_pat1, move_pat2, move_pat3, move_pat4, move_pat5, move_pat6 }, 
				new GRGEN_LGSP.Alternative[] {  }, 
				new GRGEN_LGSP.Iterated[] {  }, 
				new GRGEN_LGSP.PatternGraph[] {  }, 
				new GRGEN_LGSP.PatternGraph[] {  }, 
				new GRGEN_LGSP.PatternCondition[] { move_cond_0, move_cond_1, move_cond_2, move_cond_3, move_cond_4, move_cond_5,  }, 
				new GRGEN_LGSP.PatternYielding[] {  }, 
				new bool[22, 22] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				new bool[23, 23] {
					{ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, },
					{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, },
				},
				move_isNodeHomomorphicGlobal,
				move_isEdgeHomomorphicGlobal,
				move_isNodeTotallyHomomorphic,
				move_isEdgeTotallyHomomorphic
			);
			pat_move.edgeToSourceNode.Add(move_edge_c0, move_node_v0);
			pat_move.edgeToTargetNode.Add(move_edge_c0, move_node_r0);
			pat_move.edgeToSourceNode.Add(move_edge_c1, move_node_v9);
			pat_move.edgeToTargetNode.Add(move_edge_c1, move_node_r0);
			pat_move.edgeToSourceNode.Add(move_edge_c2, move_node_v0_p0);
			pat_move.edgeToTargetNode.Add(move_edge_c2, move_node_v0);
			pat_move.edgeToSourceNode.Add(move_edge_c3, move_node_v1);
			pat_move.edgeToTargetNode.Add(move_edge_c3, move_node_v0);
			pat_move.edgeToSourceNode.Add(move_edge_c4, move_node_v3);
			pat_move.edgeToTargetNode.Add(move_edge_c4, move_node_v0);
			pat_move.edgeToSourceNode.Add(move_edge_c5, move_node_v9_p0);
			pat_move.edgeToTargetNode.Add(move_edge_c5, move_node_v9);
			pat_move.edgeToSourceNode.Add(move_edge_c6, move_node_v10);
			pat_move.edgeToTargetNode.Add(move_edge_c6, move_node_v9);
			pat_move.edgeToSourceNode.Add(move_edge_c7, move_node_v1_p0);
			pat_move.edgeToTargetNode.Add(move_edge_c7, move_node_v1);
			pat_move.edgeToSourceNode.Add(move_edge_c8, move_node_v2);
			pat_move.edgeToTargetNode.Add(move_edge_c8, move_node_v1);
			pat_move.edgeToSourceNode.Add(move_edge_c9, move_node_v4);
			pat_move.edgeToTargetNode.Add(move_edge_c9, move_node_v3);
			pat_move.edgeToSourceNode.Add(move_edge_c10, move_node_v2_p0);
			pat_move.edgeToTargetNode.Add(move_edge_c10, move_node_v2);
			pat_move.edgeToSourceNode.Add(move_edge_c11, move_node_v4_p0);
			pat_move.edgeToTargetNode.Add(move_edge_c11, move_node_v4);
			pat_move.edgeToSourceNode.Add(move_edge_c12, move_node_v5);
			pat_move.edgeToTargetNode.Add(move_edge_c12, move_node_v4);
			pat_move.edgeToSourceNode.Add(move_edge_c13, move_node_v7);
			pat_move.edgeToTargetNode.Add(move_edge_c13, move_node_v4);
			pat_move.edgeToSourceNode.Add(move_edge_c14, move_node_v6);
			pat_move.edgeToTargetNode.Add(move_edge_c14, move_node_v5);
			pat_move.edgeToSourceNode.Add(move_edge_c15, move_node_v8);
			pat_move.edgeToTargetNode.Add(move_edge_c15, move_node_v7);
			pat_move.edgeToSourceNode.Add(move_edge_c16, move_node_v6_p0);
			pat_move.edgeToTargetNode.Add(move_edge_c16, move_node_v6);
			pat_move.edgeToSourceNode.Add(move_edge__edge0, move_node_v0_p0);
			pat_move.edgeToTargetNode.Add(move_edge__edge0, move_node_src);
			pat_move.edgeToSourceNode.Add(move_edge__edge1, move_node_v9_p0);
			pat_move.edgeToTargetNode.Add(move_edge__edge1, move_node_tgt);
			pat_move.edgeToSourceNode.Add(move_edge__edge2, move_node_v1_p0);
			pat_move.edgeToTargetNode.Add(move_edge__edge2, move_node_tgt);
			pat_move.edgeToSourceNode.Add(move_edge__edge3, move_node_v2_p0);
			pat_move.edgeToTargetNode.Add(move_edge__edge3, move_node_n_id);
			pat_move.edgeToSourceNode.Add(move_edge__edge4, move_node_v4_p0);
			pat_move.edgeToTargetNode.Add(move_edge__edge4, move_node_n_id);
			pat_move.edgeToSourceNode.Add(move_edge__edge5, move_node_v6_p0);
			pat_move.edgeToTargetNode.Add(move_edge__edge5, move_node_ref);

			move_node_v0.pointOfDefinition = pat_move;
			move_node_r0.pointOfDefinition = pat_move;
			move_node_v9.pointOfDefinition = pat_move;
			move_node_v0_p0.pointOfDefinition = pat_move;
			move_node_v1.pointOfDefinition = pat_move;
			move_node_v3.pointOfDefinition = pat_move;
			move_node_v9_p0.pointOfDefinition = pat_move;
			move_node_v10.pointOfDefinition = pat_move;
			move_node_v1_p0.pointOfDefinition = pat_move;
			move_node_v2.pointOfDefinition = pat_move;
			move_node_v4.pointOfDefinition = pat_move;
			move_node_v2_p0.pointOfDefinition = pat_move;
			move_node_v4_p0.pointOfDefinition = pat_move;
			move_node_v5.pointOfDefinition = pat_move;
			move_node_v7.pointOfDefinition = pat_move;
			move_node_v6.pointOfDefinition = pat_move;
			move_node_v8.pointOfDefinition = pat_move;
			move_node_v6_p0.pointOfDefinition = pat_move;
			move_node_src.pointOfDefinition = pat_move;
			move_node_tgt.pointOfDefinition = pat_move;
			move_node_n_id.pointOfDefinition = pat_move;
			move_node_ref.pointOfDefinition = pat_move;
			move_edge_c0.pointOfDefinition = pat_move;
			move_edge_c1.pointOfDefinition = pat_move;
			move_edge_c2.pointOfDefinition = pat_move;
			move_edge_c3.pointOfDefinition = pat_move;
			move_edge_c4.pointOfDefinition = pat_move;
			move_edge_c5.pointOfDefinition = pat_move;
			move_edge_c6.pointOfDefinition = pat_move;
			move_edge_c7.pointOfDefinition = pat_move;
			move_edge_c8.pointOfDefinition = pat_move;
			move_edge_c9.pointOfDefinition = pat_move;
			move_edge_c10.pointOfDefinition = pat_move;
			move_edge_c11.pointOfDefinition = pat_move;
			move_edge_c12.pointOfDefinition = pat_move;
			move_edge_c13.pointOfDefinition = pat_move;
			move_edge_c14.pointOfDefinition = pat_move;
			move_edge_c15.pointOfDefinition = pat_move;
			move_edge_c16.pointOfDefinition = pat_move;
			move_edge__edge0.pointOfDefinition = pat_move;
			move_edge__edge1.pointOfDefinition = pat_move;
			move_edge__edge2.pointOfDefinition = pat_move;
			move_edge__edge3.pointOfDefinition = pat_move;
			move_edge__edge4.pointOfDefinition = pat_move;
			move_edge__edge5.pointOfDefinition = pat_move;
			move_pat0.PointOfDefinition = pat_move;
			move_pat1.PointOfDefinition = pat_move;
			move_pat2.PointOfDefinition = pat_move;
			move_pat3.PointOfDefinition = pat_move;
			move_pat4.PointOfDefinition = pat_move;
			move_pat5.PointOfDefinition = pat_move;
			move_pat6.PointOfDefinition = pat_move;

			patternGraph = pat_move;
		}


		public void Modify(GRGEN_LGSP.LGSPActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatch _curMatch)
		{
			GRGEN_LGSP.LGSPGraph graph = actionEnv.graph;
			Match_move curMatch = (Match_move)_curMatch;
			GRGEN_LGSP.LGSPNode node_v6 = curMatch._node_v6;
			GRGEN_LGSP.LGSPNode node_v7 = curMatch._node_v7;
			GRGEN_LGSP.LGSPNode node_v8 = curMatch._node_v8;
			GRGEN_LGSP.LGSPNode node_v9 = curMatch._node_v9;
			GRGEN_LGSP.LGSPNode node_v10 = curMatch._node_v10;
			GRGEN_LGSP.LGSPNode node_v0 = curMatch._node_v0;
			GRGEN_LGSP.LGSPNode node_v1 = curMatch._node_v1;
			GRGEN_LGSP.LGSPNode node_v2 = curMatch._node_v2;
			GRGEN_LGSP.LGSPNode node_v3 = curMatch._node_v3;
			GRGEN_LGSP.LGSPNode node_r0 = curMatch._node_r0;
			GRGEN_LGSP.LGSPNode node_v4 = curMatch._node_v4;
			GRGEN_LGSP.LGSPNode node_v5 = curMatch._node_v5;
			GRGEN_LGSP.LGSPNode node_v6_p0 = curMatch._node_v6_p0;
			GRGEN_LGSP.LGSPNode node_ref = curMatch._node_ref;
			GRGEN_LGSP.LGSPNode node_v9_p0 = curMatch._node_v9_p0;
			GRGEN_LGSP.LGSPNode node_tgt = curMatch._node_tgt;
			GRGEN_LGSP.LGSPNode node_v0_p0 = curMatch._node_v0_p0;
			GRGEN_LGSP.LGSPNode node_src = curMatch._node_src;
			GRGEN_LGSP.LGSPNode node_v4_p0 = curMatch._node_v4_p0;
			GRGEN_LGSP.LGSPNode node_n_id = curMatch._node_n_id;
			GRGEN_LGSP.LGSPNode node_v1_p0 = curMatch._node_v1_p0;
			GRGEN_LGSP.LGSPNode node_v2_p0 = curMatch._node_v2_p0;
			GRGEN_LGSP.LGSPEdge edge_c3 = curMatch._edge_c3;
			GRGEN_LGSP.LGSPEdge edge_c7 = curMatch._edge_c7;
			GRGEN_LGSP.LGSPEdge edge_c8 = curMatch._edge_c8;
			GRGEN_LGSP.LGSPEdge edge_c9 = curMatch._edge_c9;
			GRGEN_LGSP.LGSPEdge edge_c10 = curMatch._edge_c10;
			GRGEN_LGSP.LGSPEdge edge_c15 = curMatch._edge_c15;
			GRGEN_LGSP.LGSPEdge edge__edge0 = curMatch._edge__edge0;
			GRGEN_LGSP.LGSPEdge edge__edge1 = curMatch._edge__edge1;
			GRGEN_LGSP.LGSPEdge edge__edge2 = curMatch._edge__edge2;
			GRGEN_LGSP.LGSPEdge edge__edge3 = curMatch._edge__edge3;
			GRGEN_LGSP.LGSPEdge edge__edge4 = curMatch._edge__edge4;
			GRGEN_LGSP.LGSPEdge edge__edge5 = curMatch._edge__edge5;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat0 = curMatch.@_pat0;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat1 = curMatch.@_pat1;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat2 = curMatch.@_pat2;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat3 = curMatch.@_pat3;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat4 = curMatch.@_pat4;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat5 = curMatch.@_pat5;
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites subpattern_pat6 = curMatch.@_pat6;
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> var_allMatchedNodes = fill_anonymous_set_12384(((GRGEN_LIBGR.INode) node_v6), ((GRGEN_LIBGR.INode) node_v7), ((GRGEN_LIBGR.INode) node_v8), ((GRGEN_LIBGR.INode) node_v9), ((GRGEN_LIBGR.INode) node_v10), ((GRGEN_LIBGR.INode) node_v0), ((GRGEN_LIBGR.INode) node_v1), ((GRGEN_LIBGR.INode) node_v2), ((GRGEN_LIBGR.INode) node_v3), (GRGEN_LIBGR.INode)(node_r0), ((GRGEN_LIBGR.INode) node_v4), ((GRGEN_LIBGR.INode) node_v5));
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.INode> var_indexMap = fill_anonymous_map_12409(((GRGEN_LIBGR.INode) node_v7), ((GRGEN_LIBGR.INode) node_v7), ((GRGEN_LIBGR.INode) node_v9), ((GRGEN_LIBGR.INode) node_v9), ((GRGEN_LIBGR.INode) node_v0), ((GRGEN_LIBGR.INode) node_v0), ((GRGEN_LIBGR.INode) node_v4), ((GRGEN_LIBGR.INode) node_v4));
			Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.INode> var_tasks = fill_anonymous_map_12414();
			graph.SettingAddedNodeNames( move_addedNodeNames );
			graph.SettingAddedEdgeNames( move_addedEdgeNames );
			GRGEN_MODEL.@bPrnt edge__edge6 = GRGEN_MODEL.@bPrnt.CreateEdge(graph, node_v4, node_v10);
			GRGEN_MODEL.@bLink edge__edge7 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v6_p0, node_ref);
			GRGEN_MODEL.@bLink edge__edge8 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v9_p0, node_tgt);
			GRGEN_MODEL.@bLink edge__edge9 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v0_p0, node_src);
			GRGEN_MODEL.@bLink edge__edge10 = GRGEN_MODEL.@bLink.CreateEdge(graph, node_v4_p0, node_n_id);
			{ // eval_0
				Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> var_nodesWithSites = (Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType>)(GRGEN_LIBGR.ContainerHelper.Domain(var_indexMap));
				foreach(KeyValuePair<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> entry_0 in var_nodesWithSites)
				{
					GRGEN_LIBGR.INode var_cur = (GRGEN_LIBGR.INode)entry_0.Key;
					object emit_value_1;
					emit_value_1 = var_cur;
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = "->";
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = (var_indexMap[var_cur]);
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = " ";
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = GRGEN_LIBGR.GraphHelper.CountAdjacentIncoming(graph, var_cur, GRGEN_MODEL.EdgeType_AEdge.typeVar, GRGEN_MODEL.NodeType_Node.typeVar);
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					emit_value_1 = "\n";
					if(emit_value_1 != null)
						((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_1, graph, false, null, null, null));
					if(((var_indexMap[var_cur]) == null)) {
						object emit_value_2;
						emit_value_2 = "Remove everything because there is no site mapping for the reactum";
						if(emit_value_2 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_2, graph, false, null, null, null));
						emit_value_2 = GRGEN_LIBGR.GraphHelper.AdjacentIncoming(var_cur, GRGEN_MODEL.EdgeType_AEdge.typeVar, GRGEN_MODEL.NodeType_Node.typeVar);
						if(emit_value_2 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_2, graph, false, null, null, null));
						emit_value_2 = "\n";
						if(emit_value_2 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_2, graph, false, null, null, null));
						GRGEN_LIBGR.INode node_3 = var_cur;
						foreach(GRGEN_LIBGR.IEdge edge_3 in node_3.GetCompatibleIncoming(GRGEN_MODEL.EdgeType_AEdge.typeVar))
						{
							if(!edge_3.Source.InstanceOf(GRGEN_MODEL.NodeType_Node.typeVar))
								continue;
							GRGEN_LIBGR.INode var_x__INTERN = (GRGEN_LIBGR.INode)edge_3.Source;
							if((((GRGEN_LGSP.LGSPNode)var_x__INTERN).lgspType != GRGEN_MODEL.NodeType_BPort.typeVar)) {
								graph.RemoveEdges((GRGEN_LIBGR.INode)var_x__INTERN);
								graph.Remove((GRGEN_LIBGR.INode)var_x__INTERN);
							}
						}
						continue;
					}
					if((var_cur != (var_indexMap[var_cur]))) {
						object emit_value_4;
						emit_value_4 = "Site mappings are different! Size of children: ";
						if(emit_value_4 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_4, graph, false, null, null, null));
						emit_value_4 = (GRGEN_LIBGR.GraphHelper.AdjacentIncoming(var_cur, GRGEN_MODEL.EdgeType_AEdge.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count;
						if(emit_value_4 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_4, graph, false, null, null, null));
						emit_value_4 = "\n";
						if(emit_value_4 != null)
							((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_4, graph, false, null, null, null));
						GRGEN_LIBGR.INode node_5 = var_cur;
						foreach(GRGEN_LIBGR.IEdge edge_5 in node_5.GetCompatibleIncoming(GRGEN_MODEL.EdgeType_AEdge.typeVar))
						{
							if(!edge_5.Source.InstanceOf(GRGEN_MODEL.NodeType_Node.typeVar))
								continue;
							GRGEN_LIBGR.INode var_x__INTERN = (GRGEN_LIBGR.INode)edge_5.Source;
							if(((((GRGEN_LGSP.LGSPNode)var_x__INTERN).lgspType != GRGEN_MODEL.NodeType_BPort.typeVar) && (! var_allMatchedNodes.ContainsKey(var_x__INTERN)))) {
								object emit_value_6;
								emit_value_6 = "\tchild = ";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = var_x__INTERN;
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = " ";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = ((GRGEN_LGSP.LGSPNode)var_x__INTERN).lgspType;
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = " ";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = (var_indexMap[var_cur]);
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = " ";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = GRGEN_LIBGR.GraphHelper.Outgoing(var_x__INTERN, GRGEN_MODEL.EdgeType_AEdge.typeVar, GRGEN_MODEL.NodeType_Node.typeVar);
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								emit_value_6 = "\n";
								if(emit_value_6 != null)
									((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_6, graph, false, null, null, null));
								GRGEN_LIBGR.INode node_7 = var_x__INTERN;
								foreach(GRGEN_LIBGR.IEdge edge_7 in node_7.GetCompatibleOutgoing(GRGEN_MODEL.EdgeType_AEdge.typeVar))
								{
									if(!edge_7.Target.InstanceOf(GRGEN_MODEL.NodeType_Node.typeVar))
										continue;
									GRGEN_LIBGR.IDEdge var_y = (GRGEN_LIBGR.IDEdge)edge_7;
									if((((GRGEN_LGSP.LGSPEdge)var_y).lgspType == GRGEN_MODEL.EdgeType_bPrnt.typeVar)) {
										object emit_value_8;
										emit_value_8 = "\ty";
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = var_y;
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = " ";
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = ((GRGEN_LGSP.LGSPEdge)var_y).lgspType;
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = " ";
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = GRGEN_LIBGR.GraphHelper.Nameof(var_y, graph);
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										emit_value_8 = "\n";
										if(emit_value_8 != null)
											((GRGEN_LGSP.LGSPGraphProcessingEnvironment)actionEnv).EmitWriter.Write(GRGEN_LIBGR.EmitHelper.ToStringNonNull(emit_value_8, graph, false, null, null, null));
										var_tasks[var_y] = (var_indexMap[var_cur]);
									}
								}
							}
						}
					}
				}
				Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.SetValueType> var_keyset = (Dictionary<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.SetValueType>)(GRGEN_LIBGR.ContainerHelper.Domain(var_tasks));
				foreach(KeyValuePair<GRGEN_LIBGR.IDEdge, GRGEN_LIBGR.SetValueType> entry_9 in var_keyset)
				{
					GRGEN_LIBGR.IDEdge var_k = (GRGEN_LIBGR.IDEdge)entry_9.Key;
					((GRGEN_LGSP.LGSPNamedGraph)graph).RedirectTarget((GRGEN_LIBGR.IEdge)var_k, (GRGEN_LIBGR.INode)(var_tasks[var_k]));
				}
			}
			graph.Remove(edge_c3);
			graph.Remove(edge_c7);
			graph.Remove(edge_c8);
			graph.Remove(edge_c9);
			graph.Remove(edge_c10);
			graph.Remove(edge_c15);
			graph.Remove(edge__edge0);
			graph.Remove(edge__edge1);
			graph.Remove(edge__edge2);
			graph.Remove(edge__edge3);
			graph.Remove(edge__edge4);
			graph.Remove(edge__edge5);
			graph.RemoveEdges(node_v1);
			graph.Remove(node_v1);
			graph.RemoveEdges(node_v1_p0);
			graph.Remove(node_v1_p0);
			graph.RemoveEdges(node_v2);
			graph.Remove(node_v2);
			graph.RemoveEdges(node_v2_p0);
			graph.Remove(node_v2_p0);
			graph.RemoveEdges(node_v8);
			graph.Remove(node_v8);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat0);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat1);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat2);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat3);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat4);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat5);
			GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.nac_NodesWithoutSites_Delete(actionEnv, subpattern_pat6);
			actionEnv.SelectedMatchRewritten();
			return;
		}
		private static string[] move_addedNodeNames = new string[] {  };
		private static string[] move_addedEdgeNames = new string[] { "_edge6", "_edge7", "_edge8", "_edge9", "_edge10" };

		static Rule_move() {
		}

		public interface IMatch_move : GRGEN_LIBGR.IMatch
		{
			//Nodes
			GRGEN_MODEL.ILocale node_v0 { get; set; }
			GRGEN_LIBGR.INode node_r0 { get; set; }
			GRGEN_MODEL.ILocale node_v9 { get; set; }
			GRGEN_MODEL.IBPort node_v0_p0 { get; set; }
			GRGEN_MODEL.IWayPoint node_v1 { get; set; }
			GRGEN_MODEL.IOccupiedBy node_v3 { get; set; }
			GRGEN_MODEL.IBPort node_v9_p0 { get; set; }
			GRGEN_MODEL.IOccupiedBy node_v10 { get; set; }
			GRGEN_MODEL.IBPort node_v1_p0 { get; set; }
			GRGEN_MODEL.ISLckRef node_v2 { get; set; }
			GRGEN_MODEL.IRobot node_v4 { get; set; }
			GRGEN_MODEL.IBPort node_v2_p0 { get; set; }
			GRGEN_MODEL.IBPort node_v4_p0 { get; set; }
			GRGEN_MODEL.ISLck node_v5 { get; set; }
			GRGEN_MODEL.IMvmt node_v7 { get; set; }
			GRGEN_MODEL.ISLckRef node_v6 { get; set; }
			GRGEN_MODEL.IToken node_v8 { get; set; }
			GRGEN_MODEL.IBPort node_v6_p0 { get; set; }
			GRGEN_MODEL.IBLink node_src { get; set; }
			GRGEN_MODEL.IBLink node_tgt { get; set; }
			GRGEN_MODEL.IBLink node_n_id { get; set; }
			GRGEN_MODEL.IBLink node_ref { get; set; }
			//Edges
			GRGEN_MODEL.IbPrnt edge_c0 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c1 { get; set; }
			GRGEN_MODEL.IbNode edge_c2 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c3 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c4 { get; set; }
			GRGEN_MODEL.IbNode edge_c5 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c6 { get; set; }
			GRGEN_MODEL.IbNode edge_c7 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c8 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c9 { get; set; }
			GRGEN_MODEL.IbNode edge_c10 { get; set; }
			GRGEN_MODEL.IbNode edge_c11 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c12 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c13 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c14 { get; set; }
			GRGEN_MODEL.IbPrnt edge_c15 { get; set; }
			GRGEN_MODEL.IbNode edge_c16 { get; set; }
			GRGEN_MODEL.IbLink edge__edge0 { get; set; }
			GRGEN_MODEL.IbLink edge__edge1 { get; set; }
			GRGEN_MODEL.IbLink edge__edge2 { get; set; }
			GRGEN_MODEL.IbLink edge__edge3 { get; set; }
			GRGEN_MODEL.IbLink edge__edge4 { get; set; }
			GRGEN_MODEL.IbLink edge__edge5 { get; set; }
			//Variables
			//EmbeddedGraphs
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat0 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat1 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat2 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat3 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat4 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat5 { get; }
			@GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat6 { get; }
			//Alternatives
			//Iterateds
			//Independents
			// further match object stuff
			void SetMatchOfEnclosingPattern(GRGEN_LIBGR.IMatch matchOfEnclosingPattern);
		}

		public class Match_move : GRGEN_LGSP.MatchListElement<Match_move>, IMatch_move
		{
			public GRGEN_MODEL.ILocale node_v0 { get { return (GRGEN_MODEL.ILocale)_node_v0; } set { _node_v0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_LIBGR.INode node_r0 { get { return (GRGEN_LIBGR.INode)_node_r0; } set { _node_r0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ILocale node_v9 { get { return (GRGEN_MODEL.ILocale)_node_v9; } set { _node_v9 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v0_p0 { get { return (GRGEN_MODEL.IBPort)_node_v0_p0; } set { _node_v0_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IWayPoint node_v1 { get { return (GRGEN_MODEL.IWayPoint)_node_v1; } set { _node_v1 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IOccupiedBy node_v3 { get { return (GRGEN_MODEL.IOccupiedBy)_node_v3; } set { _node_v3 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v9_p0 { get { return (GRGEN_MODEL.IBPort)_node_v9_p0; } set { _node_v9_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IOccupiedBy node_v10 { get { return (GRGEN_MODEL.IOccupiedBy)_node_v10; } set { _node_v10 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v1_p0 { get { return (GRGEN_MODEL.IBPort)_node_v1_p0; } set { _node_v1_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ISLckRef node_v2 { get { return (GRGEN_MODEL.ISLckRef)_node_v2; } set { _node_v2 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IRobot node_v4 { get { return (GRGEN_MODEL.IRobot)_node_v4; } set { _node_v4 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v2_p0 { get { return (GRGEN_MODEL.IBPort)_node_v2_p0; } set { _node_v2_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v4_p0 { get { return (GRGEN_MODEL.IBPort)_node_v4_p0; } set { _node_v4_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ISLck node_v5 { get { return (GRGEN_MODEL.ISLck)_node_v5; } set { _node_v5 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IMvmt node_v7 { get { return (GRGEN_MODEL.IMvmt)_node_v7; } set { _node_v7 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.ISLckRef node_v6 { get { return (GRGEN_MODEL.ISLckRef)_node_v6; } set { _node_v6 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IToken node_v8 { get { return (GRGEN_MODEL.IToken)_node_v8; } set { _node_v8 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBPort node_v6_p0 { get { return (GRGEN_MODEL.IBPort)_node_v6_p0; } set { _node_v6_p0 = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_src { get { return (GRGEN_MODEL.IBLink)_node_src; } set { _node_src = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_tgt { get { return (GRGEN_MODEL.IBLink)_node_tgt; } set { _node_tgt = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_n_id { get { return (GRGEN_MODEL.IBLink)_node_n_id; } set { _node_n_id = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_MODEL.IBLink node_ref { get { return (GRGEN_MODEL.IBLink)_node_ref; } set { _node_ref = (GRGEN_LGSP.LGSPNode)value; } }
			public GRGEN_LGSP.LGSPNode _node_v0;
			public GRGEN_LGSP.LGSPNode _node_r0;
			public GRGEN_LGSP.LGSPNode _node_v9;
			public GRGEN_LGSP.LGSPNode _node_v0_p0;
			public GRGEN_LGSP.LGSPNode _node_v1;
			public GRGEN_LGSP.LGSPNode _node_v3;
			public GRGEN_LGSP.LGSPNode _node_v9_p0;
			public GRGEN_LGSP.LGSPNode _node_v10;
			public GRGEN_LGSP.LGSPNode _node_v1_p0;
			public GRGEN_LGSP.LGSPNode _node_v2;
			public GRGEN_LGSP.LGSPNode _node_v4;
			public GRGEN_LGSP.LGSPNode _node_v2_p0;
			public GRGEN_LGSP.LGSPNode _node_v4_p0;
			public GRGEN_LGSP.LGSPNode _node_v5;
			public GRGEN_LGSP.LGSPNode _node_v7;
			public GRGEN_LGSP.LGSPNode _node_v6;
			public GRGEN_LGSP.LGSPNode _node_v8;
			public GRGEN_LGSP.LGSPNode _node_v6_p0;
			public GRGEN_LGSP.LGSPNode _node_src;
			public GRGEN_LGSP.LGSPNode _node_tgt;
			public GRGEN_LGSP.LGSPNode _node_n_id;
			public GRGEN_LGSP.LGSPNode _node_ref;
			public enum move_NodeNums { @v0, @r0, @v9, @v0_p0, @v1, @v3, @v9_p0, @v10, @v1_p0, @v2, @v4, @v2_p0, @v4_p0, @v5, @v7, @v6, @v8, @v6_p0, @src, @tgt, @n_id, @ref, END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.INode> Nodes { get { return new GRGEN_LGSP.Nodes_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.INode> NodesEnumerator { get { return new GRGEN_LGSP.Nodes_Enumerator(this); } }
			public override int NumberOfNodes { get { return 22; } }
			public override GRGEN_LIBGR.INode getNodeAt(int index)
			{
				switch(index) {
				case (int)move_NodeNums.@v0: return _node_v0;
				case (int)move_NodeNums.@r0: return _node_r0;
				case (int)move_NodeNums.@v9: return _node_v9;
				case (int)move_NodeNums.@v0_p0: return _node_v0_p0;
				case (int)move_NodeNums.@v1: return _node_v1;
				case (int)move_NodeNums.@v3: return _node_v3;
				case (int)move_NodeNums.@v9_p0: return _node_v9_p0;
				case (int)move_NodeNums.@v10: return _node_v10;
				case (int)move_NodeNums.@v1_p0: return _node_v1_p0;
				case (int)move_NodeNums.@v2: return _node_v2;
				case (int)move_NodeNums.@v4: return _node_v4;
				case (int)move_NodeNums.@v2_p0: return _node_v2_p0;
				case (int)move_NodeNums.@v4_p0: return _node_v4_p0;
				case (int)move_NodeNums.@v5: return _node_v5;
				case (int)move_NodeNums.@v7: return _node_v7;
				case (int)move_NodeNums.@v6: return _node_v6;
				case (int)move_NodeNums.@v8: return _node_v8;
				case (int)move_NodeNums.@v6_p0: return _node_v6_p0;
				case (int)move_NodeNums.@src: return _node_src;
				case (int)move_NodeNums.@tgt: return _node_tgt;
				case (int)move_NodeNums.@n_id: return _node_n_id;
				case (int)move_NodeNums.@ref: return _node_ref;
				default: return null;
				}
			}
			public override GRGEN_LIBGR.INode getNode(string name)
			{
				switch(name) {
				case "v0": return _node_v0;
				case "r0": return _node_r0;
				case "v9": return _node_v9;
				case "v0_p0": return _node_v0_p0;
				case "v1": return _node_v1;
				case "v3": return _node_v3;
				case "v9_p0": return _node_v9_p0;
				case "v10": return _node_v10;
				case "v1_p0": return _node_v1_p0;
				case "v2": return _node_v2;
				case "v4": return _node_v4;
				case "v2_p0": return _node_v2_p0;
				case "v4_p0": return _node_v4_p0;
				case "v5": return _node_v5;
				case "v7": return _node_v7;
				case "v6": return _node_v6;
				case "v8": return _node_v8;
				case "v6_p0": return _node_v6_p0;
				case "src": return _node_src;
				case "tgt": return _node_tgt;
				case "n_id": return _node_n_id;
				case "ref": return _node_ref;
				default: return null;
				}
			}
			public override void SetNode(string name, GRGEN_LIBGR.INode value)
			{
				switch(name) {
				case "v0": _node_v0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "r0": _node_r0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v9": _node_v9 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v0_p0": _node_v0_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v1": _node_v1 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v3": _node_v3 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v9_p0": _node_v9_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v10": _node_v10 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v1_p0": _node_v1_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v2": _node_v2 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v4": _node_v4 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v2_p0": _node_v2_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v4_p0": _node_v4_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v5": _node_v5 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v7": _node_v7 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v6": _node_v6 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v8": _node_v8 = (GRGEN_LGSP.LGSPNode)value; break;
				case "v6_p0": _node_v6_p0 = (GRGEN_LGSP.LGSPNode)value; break;
				case "src": _node_src = (GRGEN_LGSP.LGSPNode)value; break;
				case "tgt": _node_tgt = (GRGEN_LGSP.LGSPNode)value; break;
				case "n_id": _node_n_id = (GRGEN_LGSP.LGSPNode)value; break;
				case "ref": _node_ref = (GRGEN_LGSP.LGSPNode)value; break;
				default: break;
				}
			}

			public GRGEN_MODEL.IbPrnt edge_c0 { get { return (GRGEN_MODEL.IbPrnt)_edge_c0; } set { _edge_c0 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c1 { get { return (GRGEN_MODEL.IbPrnt)_edge_c1; } set { _edge_c1 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c2 { get { return (GRGEN_MODEL.IbNode)_edge_c2; } set { _edge_c2 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c3 { get { return (GRGEN_MODEL.IbPrnt)_edge_c3; } set { _edge_c3 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c4 { get { return (GRGEN_MODEL.IbPrnt)_edge_c4; } set { _edge_c4 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c5 { get { return (GRGEN_MODEL.IbNode)_edge_c5; } set { _edge_c5 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c6 { get { return (GRGEN_MODEL.IbPrnt)_edge_c6; } set { _edge_c6 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c7 { get { return (GRGEN_MODEL.IbNode)_edge_c7; } set { _edge_c7 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c8 { get { return (GRGEN_MODEL.IbPrnt)_edge_c8; } set { _edge_c8 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c9 { get { return (GRGEN_MODEL.IbPrnt)_edge_c9; } set { _edge_c9 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c10 { get { return (GRGEN_MODEL.IbNode)_edge_c10; } set { _edge_c10 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c11 { get { return (GRGEN_MODEL.IbNode)_edge_c11; } set { _edge_c11 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c12 { get { return (GRGEN_MODEL.IbPrnt)_edge_c12; } set { _edge_c12 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c13 { get { return (GRGEN_MODEL.IbPrnt)_edge_c13; } set { _edge_c13 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c14 { get { return (GRGEN_MODEL.IbPrnt)_edge_c14; } set { _edge_c14 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbPrnt edge_c15 { get { return (GRGEN_MODEL.IbPrnt)_edge_c15; } set { _edge_c15 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbNode edge_c16 { get { return (GRGEN_MODEL.IbNode)_edge_c16; } set { _edge_c16 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge0 { get { return (GRGEN_MODEL.IbLink)_edge__edge0; } set { _edge__edge0 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge1 { get { return (GRGEN_MODEL.IbLink)_edge__edge1; } set { _edge__edge1 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge2 { get { return (GRGEN_MODEL.IbLink)_edge__edge2; } set { _edge__edge2 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge3 { get { return (GRGEN_MODEL.IbLink)_edge__edge3; } set { _edge__edge3 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge4 { get { return (GRGEN_MODEL.IbLink)_edge__edge4; } set { _edge__edge4 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_MODEL.IbLink edge__edge5 { get { return (GRGEN_MODEL.IbLink)_edge__edge5; } set { _edge__edge5 = (GRGEN_LGSP.LGSPEdge)value; } }
			public GRGEN_LGSP.LGSPEdge _edge_c0;
			public GRGEN_LGSP.LGSPEdge _edge_c1;
			public GRGEN_LGSP.LGSPEdge _edge_c2;
			public GRGEN_LGSP.LGSPEdge _edge_c3;
			public GRGEN_LGSP.LGSPEdge _edge_c4;
			public GRGEN_LGSP.LGSPEdge _edge_c5;
			public GRGEN_LGSP.LGSPEdge _edge_c6;
			public GRGEN_LGSP.LGSPEdge _edge_c7;
			public GRGEN_LGSP.LGSPEdge _edge_c8;
			public GRGEN_LGSP.LGSPEdge _edge_c9;
			public GRGEN_LGSP.LGSPEdge _edge_c10;
			public GRGEN_LGSP.LGSPEdge _edge_c11;
			public GRGEN_LGSP.LGSPEdge _edge_c12;
			public GRGEN_LGSP.LGSPEdge _edge_c13;
			public GRGEN_LGSP.LGSPEdge _edge_c14;
			public GRGEN_LGSP.LGSPEdge _edge_c15;
			public GRGEN_LGSP.LGSPEdge _edge_c16;
			public GRGEN_LGSP.LGSPEdge _edge__edge0;
			public GRGEN_LGSP.LGSPEdge _edge__edge1;
			public GRGEN_LGSP.LGSPEdge _edge__edge2;
			public GRGEN_LGSP.LGSPEdge _edge__edge3;
			public GRGEN_LGSP.LGSPEdge _edge__edge4;
			public GRGEN_LGSP.LGSPEdge _edge__edge5;
			public enum move_EdgeNums { @c0, @c1, @c2, @c3, @c4, @c5, @c6, @c7, @c8, @c9, @c10, @c11, @c12, @c13, @c14, @c15, @c16, @_edge0, @_edge1, @_edge2, @_edge3, @_edge4, @_edge5, END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IEdge> Edges { get { return new GRGEN_LGSP.Edges_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IEdge> EdgesEnumerator { get { return new GRGEN_LGSP.Edges_Enumerator(this); } }
			public override int NumberOfEdges { get { return 23; } }
			public override GRGEN_LIBGR.IEdge getEdgeAt(int index)
			{
				switch(index) {
				case (int)move_EdgeNums.@c0: return _edge_c0;
				case (int)move_EdgeNums.@c1: return _edge_c1;
				case (int)move_EdgeNums.@c2: return _edge_c2;
				case (int)move_EdgeNums.@c3: return _edge_c3;
				case (int)move_EdgeNums.@c4: return _edge_c4;
				case (int)move_EdgeNums.@c5: return _edge_c5;
				case (int)move_EdgeNums.@c6: return _edge_c6;
				case (int)move_EdgeNums.@c7: return _edge_c7;
				case (int)move_EdgeNums.@c8: return _edge_c8;
				case (int)move_EdgeNums.@c9: return _edge_c9;
				case (int)move_EdgeNums.@c10: return _edge_c10;
				case (int)move_EdgeNums.@c11: return _edge_c11;
				case (int)move_EdgeNums.@c12: return _edge_c12;
				case (int)move_EdgeNums.@c13: return _edge_c13;
				case (int)move_EdgeNums.@c14: return _edge_c14;
				case (int)move_EdgeNums.@c15: return _edge_c15;
				case (int)move_EdgeNums.@c16: return _edge_c16;
				case (int)move_EdgeNums.@_edge0: return _edge__edge0;
				case (int)move_EdgeNums.@_edge1: return _edge__edge1;
				case (int)move_EdgeNums.@_edge2: return _edge__edge2;
				case (int)move_EdgeNums.@_edge3: return _edge__edge3;
				case (int)move_EdgeNums.@_edge4: return _edge__edge4;
				case (int)move_EdgeNums.@_edge5: return _edge__edge5;
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IEdge getEdge(string name)
			{
				switch(name) {
				case "c0": return _edge_c0;
				case "c1": return _edge_c1;
				case "c2": return _edge_c2;
				case "c3": return _edge_c3;
				case "c4": return _edge_c4;
				case "c5": return _edge_c5;
				case "c6": return _edge_c6;
				case "c7": return _edge_c7;
				case "c8": return _edge_c8;
				case "c9": return _edge_c9;
				case "c10": return _edge_c10;
				case "c11": return _edge_c11;
				case "c12": return _edge_c12;
				case "c13": return _edge_c13;
				case "c14": return _edge_c14;
				case "c15": return _edge_c15;
				case "c16": return _edge_c16;
				case "_edge0": return _edge__edge0;
				case "_edge1": return _edge__edge1;
				case "_edge2": return _edge__edge2;
				case "_edge3": return _edge__edge3;
				case "_edge4": return _edge__edge4;
				case "_edge5": return _edge__edge5;
				default: return null;
				}
			}
			public override void SetEdge(string name, GRGEN_LIBGR.IEdge value)
			{
				switch(name) {
				case "c0": _edge_c0 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c1": _edge_c1 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c2": _edge_c2 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c3": _edge_c3 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c4": _edge_c4 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c5": _edge_c5 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c6": _edge_c6 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c7": _edge_c7 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c8": _edge_c8 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c9": _edge_c9 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c10": _edge_c10 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c11": _edge_c11 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c12": _edge_c12 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c13": _edge_c13 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c14": _edge_c14 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c15": _edge_c15 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "c16": _edge_c16 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge0": _edge__edge0 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge1": _edge__edge1 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge2": _edge__edge2 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge3": _edge__edge3 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge4": _edge__edge4 = (GRGEN_LGSP.LGSPEdge)value; break;
				case "_edge5": _edge__edge5 = (GRGEN_LGSP.LGSPEdge)value; break;
				default: break;
				}
			}

			public enum move_VariableNums { END_OF_ENUM };
			public override IEnumerable<object> Variables { get { return new GRGEN_LGSP.Variables_Enumerable(this); } }
			public override IEnumerator<object> VariablesEnumerator { get { return new GRGEN_LGSP.Variables_Enumerator(this); } }
			public override int NumberOfVariables { get { return 0; } }
			public override object getVariableAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override object getVariable(string name)
			{
				switch(name) {
				default: return null;
				}
			}
			public override void SetVariable(string name, object value)
			{
				switch(name) {
				default: break;
				}
			}

			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat0 { get { return @_pat0; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat1 { get { return @_pat1; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat2 { get { return @_pat2; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat3 { get { return @_pat3; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat4 { get { return @_pat4; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat5 { get { return @_pat5; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @pat6 { get { return @_pat6; } }
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat0;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat1;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat2;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat3;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat4;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat5;
			public @GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites @_pat6;
			public enum move_SubNums { @pat0, @pat1, @pat2, @pat3, @pat4, @pat5, @pat6, END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> EmbeddedGraphs { get { return new GRGEN_LGSP.EmbeddedGraphs_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> EmbeddedGraphsEnumerator { get { return new GRGEN_LGSP.EmbeddedGraphs_Enumerator(this); } }
			public override int NumberOfEmbeddedGraphs { get { return 7; } }
			public override GRGEN_LIBGR.IMatch getEmbeddedGraphAt(int index)
			{
				switch(index) {
				case (int)move_SubNums.@pat0: return _pat0;
				case (int)move_SubNums.@pat1: return _pat1;
				case (int)move_SubNums.@pat2: return _pat2;
				case (int)move_SubNums.@pat3: return _pat3;
				case (int)move_SubNums.@pat4: return _pat4;
				case (int)move_SubNums.@pat5: return _pat5;
				case (int)move_SubNums.@pat6: return _pat6;
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getEmbeddedGraph(string name)
			{
				switch(name) {
				case "pat0": return _pat0;
				case "pat1": return _pat1;
				case "pat2": return _pat2;
				case "pat3": return _pat3;
				case "pat4": return _pat4;
				case "pat5": return _pat5;
				case "pat6": return _pat6;
				default: return null;
				}
			}

			public enum move_AltNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> Alternatives { get { return new GRGEN_LGSP.Alternatives_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> AlternativesEnumerator { get { return new GRGEN_LGSP.Alternatives_Enumerator(this); } }
			public override int NumberOfAlternatives { get { return 0; } }
			public override GRGEN_LIBGR.IMatch getAlternativeAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getAlternative(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public enum move_IterNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatches> Iterateds { get { return new GRGEN_LGSP.Iterateds_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatches> IteratedsEnumerator { get { return new GRGEN_LGSP.Iterateds_Enumerator(this); } }
			public override int NumberOfIterateds { get { return 0; } }
			public override GRGEN_LIBGR.IMatches getIteratedAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatches getIterated(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public enum move_IdptNums { END_OF_ENUM };
			public override IEnumerable<GRGEN_LIBGR.IMatch> Independents { get { return new GRGEN_LGSP.Independents_Enumerable(this); } }
			public override IEnumerator<GRGEN_LIBGR.IMatch> IndependentsEnumerator { get { return new GRGEN_LGSP.Independents_Enumerator(this); } }
			public override int NumberOfIndependents { get { return 0; } }
			public override GRGEN_LIBGR.IMatch getIndependentAt(int index)
			{
				switch(index) {
				default: return null;
				}
			}
			public override GRGEN_LIBGR.IMatch getIndependent(string name)
			{
				switch(name) {
				default: return null;
				}
			}

			public override GRGEN_LIBGR.IPatternGraph Pattern { get { return Rule_move.instance.pat_move; } }
			public override GRGEN_LIBGR.IMatchClass MatchClass { get { return null; } }
			public override GRGEN_LIBGR.IMatch Clone() { return new Match_move(this); }
			public override GRGEN_LIBGR.IMatch Clone(IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap) { return new Match_move(this, oldToNewMap); }
			public void SetMatchOfEnclosingPattern(GRGEN_LIBGR.IMatch matchOfEnclosingPattern) { _matchOfEnclosingPattern = matchOfEnclosingPattern; }
			public Match_move nextWithSameHash;
			public void CleanNextWithSameHash() {
				Match_move cur = this;
				while(cur != null) {
					Match_move next = cur.nextWithSameHash;
					cur.nextWithSameHash = null;
					cur = next;
				}
			}

			public void AssignContent(Match_move that)
			{
				_node_v0 = that._node_v0;
				_node_r0 = that._node_r0;
				_node_v9 = that._node_v9;
				_node_v0_p0 = that._node_v0_p0;
				_node_v1 = that._node_v1;
				_node_v3 = that._node_v3;
				_node_v9_p0 = that._node_v9_p0;
				_node_v10 = that._node_v10;
				_node_v1_p0 = that._node_v1_p0;
				_node_v2 = that._node_v2;
				_node_v4 = that._node_v4;
				_node_v2_p0 = that._node_v2_p0;
				_node_v4_p0 = that._node_v4_p0;
				_node_v5 = that._node_v5;
				_node_v7 = that._node_v7;
				_node_v6 = that._node_v6;
				_node_v8 = that._node_v8;
				_node_v6_p0 = that._node_v6_p0;
				_node_src = that._node_src;
				_node_tgt = that._node_tgt;
				_node_n_id = that._node_n_id;
				_node_ref = that._node_ref;
				_edge_c0 = that._edge_c0;
				_edge_c1 = that._edge_c1;
				_edge_c2 = that._edge_c2;
				_edge_c3 = that._edge_c3;
				_edge_c4 = that._edge_c4;
				_edge_c5 = that._edge_c5;
				_edge_c6 = that._edge_c6;
				_edge_c7 = that._edge_c7;
				_edge_c8 = that._edge_c8;
				_edge_c9 = that._edge_c9;
				_edge_c10 = that._edge_c10;
				_edge_c11 = that._edge_c11;
				_edge_c12 = that._edge_c12;
				_edge_c13 = that._edge_c13;
				_edge_c14 = that._edge_c14;
				_edge_c15 = that._edge_c15;
				_edge_c16 = that._edge_c16;
				_edge__edge0 = that._edge__edge0;
				_edge__edge1 = that._edge__edge1;
				_edge__edge2 = that._edge__edge2;
				_edge__edge3 = that._edge__edge3;
				_edge__edge4 = that._edge__edge4;
				_edge__edge5 = that._edge__edge5;
				@_pat0 = that.@_pat0;
				@_pat1 = that.@_pat1;
				@_pat2 = that.@_pat2;
				@_pat3 = that.@_pat3;
				@_pat4 = that.@_pat4;
				@_pat5 = that.@_pat5;
				@_pat6 = that.@_pat6;
			}

			public Match_move(Match_move that)
			{
				AssignContent(that);
			}
			public void AssignContent(Match_move that, IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap)
			{
				_node_v0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v0];
				_node_r0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_r0];
				_node_v9 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v9];
				_node_v0_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v0_p0];
				_node_v1 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v1];
				_node_v3 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v3];
				_node_v9_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v9_p0];
				_node_v10 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v10];
				_node_v1_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v1_p0];
				_node_v2 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v2];
				_node_v4 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v4];
				_node_v2_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v2_p0];
				_node_v4_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v4_p0];
				_node_v5 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v5];
				_node_v7 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v7];
				_node_v6 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v6];
				_node_v8 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v8];
				_node_v6_p0 = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_v6_p0];
				_node_src = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_src];
				_node_tgt = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_tgt];
				_node_n_id = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_n_id];
				_node_ref = (GRGEN_LGSP.LGSPNode)oldToNewMap[that._node_ref];
				_edge_c0 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c0];
				_edge_c1 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c1];
				_edge_c2 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c2];
				_edge_c3 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c3];
				_edge_c4 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c4];
				_edge_c5 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c5];
				_edge_c6 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c6];
				_edge_c7 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c7];
				_edge_c8 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c8];
				_edge_c9 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c9];
				_edge_c10 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c10];
				_edge_c11 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c11];
				_edge_c12 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c12];
				_edge_c13 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c13];
				_edge_c14 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c14];
				_edge_c15 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c15];
				_edge_c16 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge_c16];
				_edge__edge0 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge0];
				_edge__edge1 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge1];
				_edge__edge2 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge2];
				_edge__edge3 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge3];
				_edge__edge4 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge4];
				_edge__edge5 = (GRGEN_LGSP.LGSPEdge)oldToNewMap[that._edge__edge5];
				@_pat0 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat0, oldToNewMap);
				@_pat1 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat1, oldToNewMap);
				@_pat2 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat2, oldToNewMap);
				@_pat3 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat3, oldToNewMap);
				@_pat4 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat4, oldToNewMap);
				@_pat5 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat5, oldToNewMap);
				@_pat6 = new GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites(that.@_pat6, oldToNewMap);
			}

			public Match_move(Match_move that, IDictionary<GRGEN_LIBGR.IGraphElement, GRGEN_LIBGR.IGraphElement> oldToNewMap)
			{
				AssignContent(that, oldToNewMap);
			}
			public Match_move()
			{
			}

			public bool IsEqual(Match_move that)
			{
				if(that==null) return false;
				if(_node_v0 != that._node_v0) return false;
				if(_node_r0 != that._node_r0) return false;
				if(_node_v9 != that._node_v9) return false;
				if(_node_v0_p0 != that._node_v0_p0) return false;
				if(_node_v1 != that._node_v1) return false;
				if(_node_v3 != that._node_v3) return false;
				if(_node_v9_p0 != that._node_v9_p0) return false;
				if(_node_v10 != that._node_v10) return false;
				if(_node_v1_p0 != that._node_v1_p0) return false;
				if(_node_v2 != that._node_v2) return false;
				if(_node_v4 != that._node_v4) return false;
				if(_node_v2_p0 != that._node_v2_p0) return false;
				if(_node_v4_p0 != that._node_v4_p0) return false;
				if(_node_v5 != that._node_v5) return false;
				if(_node_v7 != that._node_v7) return false;
				if(_node_v6 != that._node_v6) return false;
				if(_node_v8 != that._node_v8) return false;
				if(_node_v6_p0 != that._node_v6_p0) return false;
				if(_node_src != that._node_src) return false;
				if(_node_tgt != that._node_tgt) return false;
				if(_node_n_id != that._node_n_id) return false;
				if(_node_ref != that._node_ref) return false;
				if(_edge_c0 != that._edge_c0) return false;
				if(_edge_c1 != that._edge_c1) return false;
				if(_edge_c2 != that._edge_c2) return false;
				if(_edge_c3 != that._edge_c3) return false;
				if(_edge_c4 != that._edge_c4) return false;
				if(_edge_c5 != that._edge_c5) return false;
				if(_edge_c6 != that._edge_c6) return false;
				if(_edge_c7 != that._edge_c7) return false;
				if(_edge_c8 != that._edge_c8) return false;
				if(_edge_c9 != that._edge_c9) return false;
				if(_edge_c10 != that._edge_c10) return false;
				if(_edge_c11 != that._edge_c11) return false;
				if(_edge_c12 != that._edge_c12) return false;
				if(_edge_c13 != that._edge_c13) return false;
				if(_edge_c14 != that._edge_c14) return false;
				if(_edge_c15 != that._edge_c15) return false;
				if(_edge_c16 != that._edge_c16) return false;
				if(_edge__edge0 != that._edge__edge0) return false;
				if(_edge__edge1 != that._edge__edge1) return false;
				if(_edge__edge2 != that._edge__edge2) return false;
				if(_edge__edge3 != that._edge__edge3) return false;
				if(_edge__edge4 != that._edge__edge4) return false;
				if(_edge__edge5 != that._edge__edge5) return false;
				if(!@_pat0.IsEqual(that.@_pat0)) return false;
				if(!@_pat1.IsEqual(that.@_pat1)) return false;
				if(!@_pat2.IsEqual(that.@_pat2)) return false;
				if(!@_pat3.IsEqual(that.@_pat3)) return false;
				if(!@_pat4.IsEqual(that.@_pat4)) return false;
				if(!@_pat5.IsEqual(that.@_pat5)) return false;
				if(!@_pat6.IsEqual(that.@_pat6)) return false;
				return true;
			}
		}


		public class Extractor
		{
			public static List<GRGEN_MODEL.ILocale> Extract_v0(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.ILocale> resultList = new List<GRGEN_MODEL.ILocale>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_v0);
				return resultList;
			}
			public static List<GRGEN_LIBGR.INode> Extract_r0(List<IMatch_move> matchList)
			{
				List<GRGEN_LIBGR.INode> resultList = new List<GRGEN_LIBGR.INode>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_r0);
				return resultList;
			}
			public static List<GRGEN_MODEL.ILocale> Extract_v9(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.ILocale> resultList = new List<GRGEN_MODEL.ILocale>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_v9);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v0_p0(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_v0_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IWayPoint> Extract_v1(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IWayPoint> resultList = new List<GRGEN_MODEL.IWayPoint>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_v1);
				return resultList;
			}
			public static List<GRGEN_MODEL.IOccupiedBy> Extract_v3(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IOccupiedBy> resultList = new List<GRGEN_MODEL.IOccupiedBy>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_v3);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v9_p0(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_v9_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IOccupiedBy> Extract_v10(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IOccupiedBy> resultList = new List<GRGEN_MODEL.IOccupiedBy>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_v10);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v1_p0(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_v1_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.ISLckRef> Extract_v2(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.ISLckRef> resultList = new List<GRGEN_MODEL.ISLckRef>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_v2);
				return resultList;
			}
			public static List<GRGEN_MODEL.IRobot> Extract_v4(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IRobot> resultList = new List<GRGEN_MODEL.IRobot>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_v4);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v2_p0(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_v2_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v4_p0(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_v4_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.ISLck> Extract_v5(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.ISLck> resultList = new List<GRGEN_MODEL.ISLck>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_v5);
				return resultList;
			}
			public static List<GRGEN_MODEL.IMvmt> Extract_v7(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IMvmt> resultList = new List<GRGEN_MODEL.IMvmt>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_v7);
				return resultList;
			}
			public static List<GRGEN_MODEL.ISLckRef> Extract_v6(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.ISLckRef> resultList = new List<GRGEN_MODEL.ISLckRef>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_v6);
				return resultList;
			}
			public static List<GRGEN_MODEL.IToken> Extract_v8(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IToken> resultList = new List<GRGEN_MODEL.IToken>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_v8);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBPort> Extract_v6_p0(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IBPort> resultList = new List<GRGEN_MODEL.IBPort>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_v6_p0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_src(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_src);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_tgt(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_tgt);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_n_id(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_n_id);
				return resultList;
			}
			public static List<GRGEN_MODEL.IBLink> Extract_ref(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IBLink> resultList = new List<GRGEN_MODEL.IBLink>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.node_ref);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c0(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge_c0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c1(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge_c1);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c2(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge_c2);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c3(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge_c3);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c4(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge_c4);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c5(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge_c5);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c6(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge_c6);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c7(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge_c7);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c8(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge_c8);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c9(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge_c9);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c10(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge_c10);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c11(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge_c11);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c12(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge_c12);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c13(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge_c13);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c14(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge_c14);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbPrnt> Extract_c15(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbPrnt> resultList = new List<GRGEN_MODEL.IbPrnt>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge_c15);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbNode> Extract_c16(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbNode> resultList = new List<GRGEN_MODEL.IbNode>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge_c16);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge0(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge__edge0);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge1(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge__edge1);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge2(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge__edge2);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge3(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge__edge3);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge4(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge__edge4);
				return resultList;
			}
			public static List<GRGEN_MODEL.IbLink> Extract__edge5(List<IMatch_move> matchList)
			{
				List<GRGEN_MODEL.IbLink> resultList = new List<GRGEN_MODEL.IbLink>(matchList.Count);
				foreach(IMatch_move match in matchList)
					resultList.Add(match.edge__edge5);
				return resultList;
			}
		}


		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> ConvertAsNeeded(object parameter)
		{
			if(parameter is List<GRGEN_ACTIONS.Rule_move.IMatch_move>)
				return ((List<GRGEN_ACTIONS.Rule_move.IMatch_move>)parameter);
			else
				return GRGEN_LIBGR.MatchListHelper.ToList<GRGEN_ACTIONS.Rule_move.IMatch_move>((IList<GRGEN_LIBGR.IMatch>)parameter);
		}
	}

	
	public partial class ArrayHelper
	{
		private static GRGEN_ACTIONS.Rule_move.IMatch_move instanceBearingAttributeForSearch_move = new GRGEN_ACTIONS.Rule_move.Match_move();
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_v0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v0)) {
					seenValues[list[pos].@node_v0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_v0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v0, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_v0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_v0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_r0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_LIBGR.INode, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_LIBGR.INode, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_r0)) {
					seenValues[list[pos].@node_r0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_r0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_r0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_LIBGR.INode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_r0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_r0, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_r0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_LIBGR.INode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_r0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_r0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_LIBGR.INode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_r0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_r0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_LIBGR.INode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_r0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_r0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_LIBGR.INode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_r0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_v9(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.ILocale, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v9)) {
					seenValues[list[pos].@node_v9].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v9, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_v9(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ILocale, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v9)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v9, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_v9(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_v9(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v9(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ILocale entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v9(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ILocale entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v9.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_v0_p0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v0_p0)) {
					seenValues[list[pos].@node_v0_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v0_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_v0_p0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v0_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v0_p0, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_v0_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v0_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_v0_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v0_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v0_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v0_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v0_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v0_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_v1(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IWayPoint, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IWayPoint, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v1)) {
					seenValues[list[pos].@node_v1].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v1, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_v1(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IWayPoint, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IWayPoint, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v1)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v1, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_v1(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IWayPoint entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_v1(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IWayPoint entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v1(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IWayPoint entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v1(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IWayPoint entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v1.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_v3(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v3)) {
					seenValues[list[pos].@node_v3].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v3, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_v3(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v3)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v3, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_v3(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_v3(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v3(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v3(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v3.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_v9_p0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v9_p0)) {
					seenValues[list[pos].@node_v9_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v9_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_v9_p0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v9_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v9_p0, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_v9_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v9_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_v9_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v9_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v9_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v9_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v9_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v9_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_v10(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IOccupiedBy, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v10)) {
					seenValues[list[pos].@node_v10].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v10, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_v10(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IOccupiedBy, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v10)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v10, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_v10(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_v10(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v10(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IOccupiedBy entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v10(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IOccupiedBy entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v10.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_v1_p0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v1_p0)) {
					seenValues[list[pos].@node_v1_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v1_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_v1_p0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v1_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v1_p0, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_v1_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v1_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_v1_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v1_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v1_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v1_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v1_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v1_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_v2(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.ISLckRef, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.ISLckRef, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v2)) {
					seenValues[list[pos].@node_v2].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v2, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_v2(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.ISLckRef, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ISLckRef, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v2)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v2, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_v2(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ISLckRef entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_v2(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ISLckRef entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v2(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ISLckRef entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v2(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ISLckRef entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v2.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_v4(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IRobot, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IRobot, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v4)) {
					seenValues[list[pos].@node_v4].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v4, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_v4(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IRobot, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IRobot, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v4)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v4, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_v4(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IRobot entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_v4(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IRobot entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v4(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IRobot entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v4(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IRobot entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v4.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_v2_p0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v2_p0)) {
					seenValues[list[pos].@node_v2_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v2_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_v2_p0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v2_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v2_p0, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_v2_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v2_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_v2_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v2_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v2_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v2_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v2_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v2_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_v4_p0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v4_p0)) {
					seenValues[list[pos].@node_v4_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v4_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_v4_p0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v4_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v4_p0, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_v4_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v4_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_v4_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v4_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v4_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v4_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v4_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v4_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_v5(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.ISLck, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.ISLck, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v5)) {
					seenValues[list[pos].@node_v5].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v5, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_v5(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.ISLck, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ISLck, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v5)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v5, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_v5(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ISLck entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_v5(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ISLck entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v5(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ISLck entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v5(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ISLck entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v5.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_v7(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IMvmt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IMvmt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v7)) {
					seenValues[list[pos].@node_v7].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v7, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_v7(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IMvmt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IMvmt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v7)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v7, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_v7(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IMvmt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_v7(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IMvmt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v7(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IMvmt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v7(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IMvmt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v7.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_v6(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.ISLckRef, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.ISLckRef, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v6)) {
					seenValues[list[pos].@node_v6].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v6, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_v6(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.ISLckRef, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.ISLckRef, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v6)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v6, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_v6(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ISLckRef entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_v6(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ISLckRef entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v6(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ISLckRef entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v6(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.ISLckRef entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v6.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_v8(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IToken, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IToken, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v8)) {
					seenValues[list[pos].@node_v8].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v8, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_v8(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IToken, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IToken, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v8)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v8, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_v8(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IToken entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_v8(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IToken entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v8(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IToken entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v8(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IToken entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v8.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_v6_p0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IBPort, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_v6_p0)) {
					seenValues[list[pos].@node_v6_p0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_v6_p0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_v6_p0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBPort, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_v6_p0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_v6_p0, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_v6_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_v6_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_v6_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_v6_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v6_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_v6_p0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_v6_p0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBPort entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_v6_p0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_src(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_src)) {
					seenValues[list[pos].@node_src].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_src, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_src(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_src)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_src, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_src(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_src.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_src(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_src.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_src(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_src.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_src(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_src.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_tgt(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_tgt)) {
					seenValues[list[pos].@node_tgt].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_tgt, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_tgt(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_tgt)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_tgt, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_tgt(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_tgt.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_tgt(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_tgt.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_tgt(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_tgt.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_tgt(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_tgt.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_n_id(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_n_id)) {
					seenValues[list[pos].@node_n_id].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_n_id, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_n_id(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_n_id)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_n_id, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_n_id(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_n_id.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_n_id(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_n_id.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_n_id(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_n_id.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_n_id(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_n_id.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_ref(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IBLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@node_ref)) {
					seenValues[list[pos].@node_ref].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@node_ref, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_ref(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IBLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@node_ref)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@node_ref, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_ref(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@node_ref.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_ref(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@node_ref.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_ref(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@node_ref.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_ref(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IBLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@node_ref.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_c0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c0)) {
					seenValues[list[pos].@edge_c0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_c0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c0, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_c0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_c0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_c1(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c1)) {
					seenValues[list[pos].@edge_c1].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c1, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_c1(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c1)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c1, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_c1(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_c1(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c1(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c1(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c1.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_c2(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c2)) {
					seenValues[list[pos].@edge_c2].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c2, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_c2(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c2)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c2, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_c2(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_c2(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c2(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c2(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c2.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_c3(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c3)) {
					seenValues[list[pos].@edge_c3].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c3, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_c3(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c3)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c3, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_c3(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_c3(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c3(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c3(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c3.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_c4(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c4)) {
					seenValues[list[pos].@edge_c4].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c4, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_c4(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c4)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c4, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_c4(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_c4(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c4(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c4(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c4.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_c5(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c5)) {
					seenValues[list[pos].@edge_c5].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c5, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_c5(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c5)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c5, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_c5(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_c5(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c5(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c5(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c5.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_c6(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c6)) {
					seenValues[list[pos].@edge_c6].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c6, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_c6(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c6)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c6, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_c6(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_c6(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c6(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c6.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c6(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c6.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_c7(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c7)) {
					seenValues[list[pos].@edge_c7].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c7, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_c7(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c7)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c7, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_c7(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_c7(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c7(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c7.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c7(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c7.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_c8(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c8)) {
					seenValues[list[pos].@edge_c8].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c8, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_c8(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c8)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c8, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_c8(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_c8(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c8(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c8.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c8(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c8.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_c9(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c9)) {
					seenValues[list[pos].@edge_c9].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c9, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_c9(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c9)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c9, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_c9(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_c9(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c9(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c9.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c9(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c9.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_c10(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c10)) {
					seenValues[list[pos].@edge_c10].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c10, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_c10(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c10)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c10, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_c10(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_c10(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c10(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c10.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c10(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c10.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_c11(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c11)) {
					seenValues[list[pos].@edge_c11].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c11, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_c11(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c11)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c11, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_c11(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_c11(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c11(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c11.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c11(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c11.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_c12(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c12)) {
					seenValues[list[pos].@edge_c12].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c12, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_c12(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c12)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c12, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_c12(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_c12(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c12(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c12.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c12(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c12.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_c13(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c13)) {
					seenValues[list[pos].@edge_c13].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c13, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_c13(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c13)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c13, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_c13(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_c13(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c13(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c13.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c13(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c13.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_c14(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c14)) {
					seenValues[list[pos].@edge_c14].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c14, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_c14(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c14)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c14, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_c14(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_c14(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c14(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c14.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c14(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c14.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_c15(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbPrnt, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c15)) {
					seenValues[list[pos].@edge_c15].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c15, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_c15(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbPrnt, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c15)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c15, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_c15(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_c15(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c15(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c15.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c15(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbPrnt entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c15.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy_c16(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbNode, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge_c16)) {
					seenValues[list[pos].@edge_c16].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge_c16, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy_c16(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbNode, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge_c16)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge_c16, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy_c16(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge_c16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy_c16(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge_c16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c16(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge_c16.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy_c16(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbNode entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge_c16.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy__edge0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge0)) {
					seenValues[list[pos].@edge__edge0].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge0, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy__edge0(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge0)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge0, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy__edge0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy__edge0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy__edge0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge0.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy__edge0(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge0.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy__edge1(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge1)) {
					seenValues[list[pos].@edge__edge1].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge1, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy__edge1(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge1)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge1, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy__edge1(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy__edge1(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy__edge1(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge1.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy__edge1(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge1.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy__edge2(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge2)) {
					seenValues[list[pos].@edge__edge2].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge2, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy__edge2(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge2)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge2, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy__edge2(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy__edge2(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy__edge2(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge2.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy__edge2(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge2.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy__edge3(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge3)) {
					seenValues[list[pos].@edge__edge3].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge3, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy__edge3(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge3)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge3, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy__edge3(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy__edge3(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy__edge3(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge3.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy__edge3(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge3.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy__edge4(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge4)) {
					seenValues[list[pos].@edge__edge4].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge4, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy__edge4(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge4)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge4, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy__edge4(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy__edge4(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy__edge4(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge4.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy__edge4(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge4.Equals(entry))
					return i;
			return -1;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_groupBy__edge5(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>> seenValues = new Dictionary<GRGEN_MODEL.IbLink, List<GRGEN_ACTIONS.Rule_move.IMatch_move>>();
			for(int pos = 0; pos < list.Count; ++pos)
			{
				if(seenValues.ContainsKey(list[pos].@edge__edge5)) {
					seenValues[list[pos].@edge__edge5].Add(list[pos]);
				} else {
					List<GRGEN_ACTIONS.Rule_move.IMatch_move> tempList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
					tempList.Add(list[pos]);
					seenValues.Add(list[pos].@edge__edge5, tempList);
				}
			}
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			foreach(List<GRGEN_ACTIONS.Rule_move.IMatch_move> entry in seenValues.Values)
			{
				newList.AddRange(entry);
			}
			return newList;
		}
		public static List<GRGEN_ACTIONS.Rule_move.IMatch_move> Array_move_keepOneForEachBy__edge5(List<GRGEN_ACTIONS.Rule_move.IMatch_move> list)
		{
			List<GRGEN_ACTIONS.Rule_move.IMatch_move> newList = new List<GRGEN_ACTIONS.Rule_move.IMatch_move>();
			Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType> alreadySeenMembers = new Dictionary<GRGEN_MODEL.IbLink, GRGEN_LIBGR.SetValueType>();
			foreach(GRGEN_ACTIONS.Rule_move.IMatch_move element in list)
			{
				if(!alreadySeenMembers.ContainsKey(element.@edge__edge5)) {
					newList.Add(element);
					alreadySeenMembers.Add(element.@edge__edge5, null);
				}
			}
			return newList;
		}
		public static int Array_move_indexOfBy__edge5(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i < list.Count; ++i)
				if(list[i].@edge__edge5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_indexOfBy__edge5(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = 0; i < list.Count; ++i)
				if(list[i].@edge__edge5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy__edge5(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry, int startIndex)
		{
			for(int i = startIndex; i >= 0; --i)
				if(list[i].@edge__edge5.Equals(entry))
					return i;
			return -1;
		}
		public static int Array_move_lastIndexOfBy__edge5(IList<GRGEN_ACTIONS.Rule_move.IMatch_move> list, GRGEN_MODEL.IbLink entry)
		{
			for(int i = list.Count - 1; i >= 0; --i)
				if(list[i].@edge__edge5.Equals(entry))
					return i;
			return -1;
		}
	}

	public class Functions
	{

		static Functions() {
		}

	}

	public class Procedures
	{

		static Procedures() {
		}

	}

	public partial class MatchFilters
	{

		static MatchFilters() {
		}

	}

	public partial class MatchClassFilters
	{

		static MatchClassFilters() {
		}

	}



	//-----------------------------------------------------------

	public class ruleset_RuleAndMatchingPatterns : GRGEN_LGSP.LGSPRuleAndMatchingPatterns
	{
		public ruleset_RuleAndMatchingPatterns()
		{
			subpatterns = new GRGEN_LGSP.LGSPMatchingPattern[1];
			rules = new GRGEN_LGSP.LGSPRulePattern[4];
			rulesAndSubpatterns = new GRGEN_LGSP.LGSPMatchingPattern[1+4];
			definedSequences = new GRGEN_LIBGR.DefinedSequenceInfo[0];
			functions = new GRGEN_LIBGR.FunctionInfo[0+0];
			procedures = new GRGEN_LIBGR.ProcedureInfo[0+0];
			matchClasses = new GRGEN_LIBGR.MatchClassInfo[0];
			packages = new string[0];
			subpatterns[0] = Pattern_nac_NodesWithoutSites.Instance;
			rulesAndSubpatterns[0] = Pattern_nac_NodesWithoutSites.Instance;
			rules[0] = Rule_es_0_1.Instance;
			rulesAndSubpatterns[1+0] = Rule_es_0_1.Instance;
			rules[1] = Rule_ss_1_0.Instance;
			rulesAndSubpatterns[1+1] = Rule_ss_1_0.Instance;
			rules[2] = Rule_initMvmt.Instance;
			rulesAndSubpatterns[1+2] = Rule_initMvmt.Instance;
			rules[3] = Rule_move.Instance;
			rulesAndSubpatterns[1+3] = Rule_move.Instance;
		}
		public override GRGEN_LGSP.LGSPRulePattern[] Rules { get { return rules; } }
		private GRGEN_LGSP.LGSPRulePattern[] rules;
		public override GRGEN_LGSP.LGSPMatchingPattern[] Subpatterns { get { return subpatterns; } }
		private GRGEN_LGSP.LGSPMatchingPattern[] subpatterns;
		public override GRGEN_LGSP.LGSPMatchingPattern[] RulesAndSubpatterns { get { return rulesAndSubpatterns; } }
		private GRGEN_LGSP.LGSPMatchingPattern[] rulesAndSubpatterns;
		public override GRGEN_LIBGR.DefinedSequenceInfo[] DefinedSequences { get { return definedSequences; } }
		private GRGEN_LIBGR.DefinedSequenceInfo[] definedSequences;
		public override GRGEN_LIBGR.FunctionInfo[] Functions { get { return functions; } }
		private GRGEN_LIBGR.FunctionInfo[] functions;
		public override GRGEN_LIBGR.ProcedureInfo[] Procedures { get { return procedures; } }
		private GRGEN_LIBGR.ProcedureInfo[] procedures;
		public override GRGEN_LIBGR.MatchClassInfo[] MatchClasses { get { return matchClasses; } }
		private GRGEN_LIBGR.MatchClassInfo[] matchClasses;
		public override string[] Packages { get { return packages; } }
		private string[] packages;
	}


    public class PatternAction_nac_NodesWithoutSites : GRGEN_LGSP.LGSPSubpatternAction
    {
        private PatternAction_nac_NodesWithoutSites(GRGEN_LGSP.LGSPActionExecutionEnvironment actionEnv_, Stack<GRGEN_LGSP.LGSPSubpatternAction> openTasks_)
            : base(null)
        {
            actionEnv = actionEnv_; openTasks = openTasks_;
            patternGraph = Pattern_nac_NodesWithoutSites.Instance.patternGraph;
        }

        public static PatternAction_nac_NodesWithoutSites getNewTask(GRGEN_LGSP.LGSPActionExecutionEnvironment actionEnv_, Stack<GRGEN_LGSP.LGSPSubpatternAction> openTasks_) {
            PatternAction_nac_NodesWithoutSites newTask;
            if(numFreeTasks>0) {
                newTask = freeListHead;
                newTask.actionEnv = actionEnv_; newTask.openTasks = openTasks_;
                freeListHead = newTask.next;
                newTask.next = null;
                --numFreeTasks;
            } else {
                newTask = new PatternAction_nac_NodesWithoutSites(actionEnv_, openTasks_);
            }
            return newTask;
        }

        public static void releaseTask(PatternAction_nac_NodesWithoutSites oldTask) {
            if(numFreeTasks<MAX_NUM_FREE_TASKS) {
                oldTask.next = freeListHead;
                oldTask.actionEnv = null; oldTask.openTasks = null;
                freeListHead = oldTask;
                ++numFreeTasks;
            }
        }

        private static PatternAction_nac_NodesWithoutSites freeListHead = null;
        private static int numFreeTasks = 0;
        private const int MAX_NUM_FREE_TASKS = 100;

        private PatternAction_nac_NodesWithoutSites next = null;

        public GRGEN_LGSP.LGSPNode nac_NodesWithoutSites_node_src;
        public System.Int32 nac_NodesWithoutSites_var_validChildCount;
        
        public override void myMatch(List<Stack<GRGEN_LIBGR.IMatch>> foundPartialMatches, int maxMatches, int isoSpace)
        {
            GRGEN_LGSP.LGSPGraph graph = actionEnv.graph;
            System.Int32 var_nac_NodesWithoutSites_var_validChildCount = (System.Int32)nac_NodesWithoutSites_var_validChildCount;
            openTasks.Pop();
            List<Stack<GRGEN_LIBGR.IMatch>> matchesList = foundPartialMatches;
            if(matchesList.Count!=0) throw new ApplicationException(); //debug assert
            // SubPreset nac_NodesWithoutSites_node_src 
            GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src = nac_NodesWithoutSites_node_src;
            // NegativePattern 
            {
                ++isoSpace;
                // Condition 
                if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount))) {
                    --isoSpace;
                    goto label0;
                }
                // negative pattern found
                --isoSpace;
                openTasks.Push(this);
                return;
                --isoSpace;
            }
label0: ;
            // Check whether there are subpattern matching tasks left to execute
            if(openTasks.Count==0)
            {
                Stack<GRGEN_LIBGR.IMatch> currentFoundPartialMatch = new Stack<GRGEN_LIBGR.IMatch>();
                foundPartialMatches.Add(currentFoundPartialMatch);
                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                match._node_src = candidate_nac_NodesWithoutSites_node_src;
                match._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount;
                currentFoundPartialMatch.Push(match);
                // if enough matches were found, we leave
                if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                {
                    openTasks.Push(this);
                    return;
                }
                openTasks.Push(this);
                return;
            }
            // Match subpatterns 
            openTasks.Peek().myMatch(matchesList, maxMatches - foundPartialMatches.Count, isoSpace);
            // Check whether subpatterns were found 
            if(matchesList.Count>0) {
                // subpatterns/alternatives were found, extend the partial matches by our local match object
                foreach(Stack<GRGEN_LIBGR.IMatch> currentFoundPartialMatch in matchesList)
                {
                    Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                    match._node_src = candidate_nac_NodesWithoutSites_node_src;
                    match._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount;
                    currentFoundPartialMatch.Push(match);
                }
                if(matchesList==foundPartialMatches) {
                    matchesList = new List<Stack<GRGEN_LIBGR.IMatch>>();
                } else {
                    foreach(Stack<GRGEN_LIBGR.IMatch> match in matchesList) {
                        foundPartialMatches.Add(match);
                    }
                    matchesList.Clear();
                }
                // if enough matches were found, we leave
                if(maxMatches > 0 && foundPartialMatches.Count >= maxMatches)
                {
                    openTasks.Push(this);
                    return;
                }
                openTasks.Push(this);
                return;
            }
            openTasks.Push(this);
            return;
        }
    }
    
    /// <summary>
    /// An object representing an executable rule - same as IAction, but with exact types and distinct parameters.
    /// </summary>
    public interface IAction_es_0_1
    {
        /// <summary> same as IAction.Match, but with exact types and distinct parameters. </summary>
        GRGEN_LIBGR.IMatchesExact<Rule_es_0_1.IMatch_es_0_1> Match(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int maxMatches);
        /// <summary> same as IAction.Modify, but with exact types and distinct parameters. </summary>
        void Modify(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, Rule_es_0_1.IMatch_es_0_1 match);
        /// <summary> same as IAction.ModifyAll, but with exact types and distinct parameters. </summary>
        void ModifyAll(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatchesExact<Rule_es_0_1.IMatch_es_0_1> matches);
        /// <summary> same as IAction.Apply, but with exact types and distinct parameters; returns true if applied </summary>
        bool Apply(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv);
        /// <summary> same as IAction.ApplyAll, but with exact types and distinct parameters; returns the number of matches found/applied. </summary>
        int ApplyAll(int maxMatches, GRGEN_LIBGR.IActionExecutionEnvironment actionEnv);
        /// <summary> same as IAction.ApplyStar, but with exact types and distinct parameters. </summary>
        bool ApplyStar(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv);
        /// <summary> same as IAction.ApplyPlus, but with exact types and distinct parameters. </summary>
        bool ApplyPlus(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv);
        /// <summary> same as IAction.ApplyMinMax, but with exact types and distinct parameters. </summary>
        bool ApplyMinMax(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int min, int max);
    }
    
    public class Action_es_0_1 : GRGEN_LGSP.LGSPAction, GRGEN_LIBGR.IAction, IAction_es_0_1
    {
        public Action_es_0_1()
            : base(Rule_es_0_1.Instance.patternGraph)
        {
            _rulePattern = Rule_es_0_1.Instance;
            DynamicMatch = myMatch;
        }

        public Rule_es_0_1 _rulePattern;
        public override GRGEN_LGSP.LGSPRulePattern rulePattern { get { return _rulePattern; } }
        public override string Name { get { return "es_0_1"; } }
        [ThreadStatic] private static GRGEN_LGSP.LGSPMatchesList<Rule_es_0_1.Match_es_0_1, Rule_es_0_1.IMatch_es_0_1> matches;

        // Performance optimization: saves us usage of new for the return array or the return arrays. In the object/string-style modify/apply methods of the action interface implementation.
        [ThreadStatic] public static object[] ReturnArray;
        [ThreadStatic] public static List<object[]> ReturnArrayListForAll;
        [ThreadStatic] public static List<object[]> AvailableReturnArrays;
        public static Action_es_0_1 Instance { get { return instance; } set { instance = value; } }
        private static Action_es_0_1 instance = new Action_es_0_1();
        
        public GRGEN_LIBGR.IMatchesExact<Rule_es_0_1.IMatch_es_0_1> myMatch(GRGEN_LGSP.LGSPActionExecutionEnvironment actionEnv, int maxMatches)
        {
            GRGEN_LGSP.LGSPGraph graph = actionEnv.graph;
            if(matches == null)
                matches = new GRGEN_LGSP.LGSPMatchesList<Rule_es_0_1.Match_es_0_1, Rule_es_0_1.IMatch_es_0_1>(this);
            matches.Clear();
            if(ReturnArray == null)
                ReturnArray = new object[0];
            int isoSpace = 0;
            Stack<GRGEN_LGSP.LGSPSubpatternAction> openTasks = new Stack<GRGEN_LGSP.LGSPSubpatternAction>();
            List<Stack<GRGEN_LIBGR.IMatch>> foundPartialMatches = new List<Stack<GRGEN_LIBGR.IMatch>>();
            List<Stack<GRGEN_LIBGR.IMatch>> matchesList = foundPartialMatches;
            // Lookup es_0_1_edge_c0 
            int type_id_candidate_es_0_1_edge_c0 = 3;
            for(GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c0 = graph.edgesByTypeHeads[type_id_candidate_es_0_1_edge_c0], candidate_es_0_1_edge_c0 = head_candidate_es_0_1_edge_c0.lgspTypeNext; candidate_es_0_1_edge_c0 != head_candidate_es_0_1_edge_c0; candidate_es_0_1_edge_c0 = candidate_es_0_1_edge_c0.lgspTypeNext)
            {
                uint prev__candidate_es_0_1_edge_c0;
                prev__candidate_es_0_1_edge_c0 = candidate_es_0_1_edge_c0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                candidate_es_0_1_edge_c0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                // Implicit Source es_0_1_node_v0 from es_0_1_edge_c0 
                GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v0 = candidate_es_0_1_edge_c0.lgspSource;
                if(candidate_es_0_1_node_v0.lgspType.TypeID!=15) {
                    candidate_es_0_1_edge_c0.lgspFlags = candidate_es_0_1_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c0;
                    continue;
                }
                uint prev__candidate_es_0_1_node_v0;
                prev__candidate_es_0_1_node_v0 = candidate_es_0_1_node_v0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                candidate_es_0_1_node_v0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                // Implicit Target es_0_1_node_r0 from es_0_1_edge_c0 
                GRGEN_LGSP.LGSPNode candidate_es_0_1_node_r0 = candidate_es_0_1_edge_c0.lgspTarget;
                if((candidate_es_0_1_node_r0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                {
                    candidate_es_0_1_node_v0.lgspFlags = candidate_es_0_1_node_v0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v0;
                    candidate_es_0_1_edge_c0.lgspFlags = candidate_es_0_1_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c0;
                    continue;
                }
                uint prev__candidate_es_0_1_node_r0;
                prev__candidate_es_0_1_node_r0 = candidate_es_0_1_node_r0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                candidate_es_0_1_node_r0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                // Extend Incoming es_0_1_edge_c2 from es_0_1_node_v0 
                GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c2 = candidate_es_0_1_node_v0.lgspInhead;
                if(head_candidate_es_0_1_edge_c2 != null)
                {
                    GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c2 = head_candidate_es_0_1_edge_c2;
                    do
                    {
                        if(candidate_es_0_1_edge_c2.lgspType.TypeID!=5) {
                            continue;
                        }
                        uint prev__candidate_es_0_1_edge_c2;
                        prev__candidate_es_0_1_edge_c2 = candidate_es_0_1_edge_c2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                        candidate_es_0_1_edge_c2.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                        // Implicit Source es_0_1_node_v0_p0 from es_0_1_edge_c2 
                        GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v0_p0 = candidate_es_0_1_edge_c2.lgspSource;
                        if(candidate_es_0_1_node_v0_p0.lgspType.TypeID!=7) {
                            candidate_es_0_1_edge_c2.lgspFlags = candidate_es_0_1_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c2;
                            continue;
                        }
                        if((candidate_es_0_1_node_v0_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                        {
                            candidate_es_0_1_edge_c2.lgspFlags = candidate_es_0_1_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c2;
                            continue;
                        }
                        uint prev__candidate_es_0_1_node_v0_p0;
                        prev__candidate_es_0_1_node_v0_p0 = candidate_es_0_1_node_v0_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                        candidate_es_0_1_node_v0_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                        // Condition 
                        if(!((((GRGEN_MODEL.IBPort)candidate_es_0_1_node_v0_p0).@ix == 0))) {
                            candidate_es_0_1_node_v0_p0.lgspFlags = candidate_es_0_1_node_v0_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v0_p0;
                            candidate_es_0_1_edge_c2.lgspFlags = candidate_es_0_1_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c2;
                            continue;
                        }
                        // Extend Incoming es_0_1_edge_c3 from es_0_1_node_v0 
                        GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c3 = candidate_es_0_1_node_v0.lgspInhead;
                        if(head_candidate_es_0_1_edge_c3 != null)
                        {
                            GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c3 = head_candidate_es_0_1_edge_c3;
                            do
                            {
                                if(candidate_es_0_1_edge_c3.lgspType.TypeID!=3) {
                                    continue;
                                }
                                if((candidate_es_0_1_edge_c3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                {
                                    continue;
                                }
                                uint prev__candidate_es_0_1_edge_c3;
                                prev__candidate_es_0_1_edge_c3 = candidate_es_0_1_edge_c3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                candidate_es_0_1_edge_c3.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                // Implicit Source es_0_1_node_v1 from es_0_1_edge_c3 
                                GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v1 = candidate_es_0_1_edge_c3.lgspSource;
                                if(candidate_es_0_1_node_v1.lgspType.TypeID!=16) {
                                    candidate_es_0_1_edge_c3.lgspFlags = candidate_es_0_1_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c3;
                                    continue;
                                }
                                if((candidate_es_0_1_node_v1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                {
                                    candidate_es_0_1_edge_c3.lgspFlags = candidate_es_0_1_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c3;
                                    continue;
                                }
                                uint prev__candidate_es_0_1_node_v1;
                                prev__candidate_es_0_1_node_v1 = candidate_es_0_1_node_v1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                candidate_es_0_1_node_v1.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat8_8 assigned from expression 0 
                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat8_8 = (System.Int32)0;
                                // Element nac_NodesWithoutSites_node_src_inlined_pat8_8 assigned from other element es_0_1_node_v1 
                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat8_8 = candidate_es_0_1_node_v1;
                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat8_8.lgspType.TypeID]) {
                                    candidate_es_0_1_node_v1.lgspFlags = candidate_es_0_1_node_v1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v1;
                                    candidate_es_0_1_edge_c3.lgspFlags = candidate_es_0_1_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c3;
                                    continue;
                                }
                                // NegativePattern 
                                {
                                    ++isoSpace;
                                    // Condition 
                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat8_8, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat8_8))) {
                                        --isoSpace;
                                        goto label1;
                                    }
                                    // negative pattern found
                                    --isoSpace;
                                    candidate_es_0_1_node_v1.lgspFlags = candidate_es_0_1_node_v1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v1;
                                    candidate_es_0_1_edge_c3.lgspFlags = candidate_es_0_1_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c3;
                                    goto label2;
                                    --isoSpace;
                                }
label1: ;
                                // Extend Incoming es_0_1_edge_c4 from es_0_1_node_v0 
                                GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c4 = candidate_es_0_1_node_v0.lgspInhead;
                                if(head_candidate_es_0_1_edge_c4 != null)
                                {
                                    GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c4 = head_candidate_es_0_1_edge_c4;
                                    do
                                    {
                                        if(candidate_es_0_1_edge_c4.lgspType.TypeID!=3) {
                                            continue;
                                        }
                                        if((candidate_es_0_1_edge_c4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                        {
                                            continue;
                                        }
                                        uint prev__candidate_es_0_1_edge_c4;
                                        prev__candidate_es_0_1_edge_c4 = candidate_es_0_1_edge_c4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                        candidate_es_0_1_edge_c4.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                        // Implicit Source es_0_1_node_v2 from es_0_1_edge_c4 
                                        GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v2 = candidate_es_0_1_edge_c4.lgspSource;
                                        if(candidate_es_0_1_node_v2.lgspType.TypeID!=18) {
                                            candidate_es_0_1_edge_c4.lgspFlags = candidate_es_0_1_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c4;
                                            continue;
                                        }
                                        if((candidate_es_0_1_node_v2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                        {
                                            candidate_es_0_1_edge_c4.lgspFlags = candidate_es_0_1_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c4;
                                            continue;
                                        }
                                        uint prev__candidate_es_0_1_node_v2;
                                        prev__candidate_es_0_1_node_v2 = candidate_es_0_1_node_v2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                        candidate_es_0_1_node_v2.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat10_10 assigned from expression 1 
                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat10_10 = (System.Int32)1;
                                        // Element nac_NodesWithoutSites_node_src_inlined_pat10_10 assigned from other element es_0_1_node_v2 
                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat10_10 = candidate_es_0_1_node_v2;
                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat10_10.lgspType.TypeID]) {
                                            candidate_es_0_1_node_v2.lgspFlags = candidate_es_0_1_node_v2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v2;
                                            candidate_es_0_1_edge_c4.lgspFlags = candidate_es_0_1_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c4;
                                            continue;
                                        }
                                        // NegativePattern 
                                        {
                                            ++isoSpace;
                                            // Condition 
                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat10_10, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat10_10))) {
                                                --isoSpace;
                                                goto label3;
                                            }
                                            // negative pattern found
                                            --isoSpace;
                                            candidate_es_0_1_node_v2.lgspFlags = candidate_es_0_1_node_v2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v2;
                                            candidate_es_0_1_edge_c4.lgspFlags = candidate_es_0_1_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c4;
                                            goto label4;
                                            --isoSpace;
                                        }
label3: ;
                                        // Extend Incoming es_0_1_edge_c1 from es_0_1_node_r0 
                                        GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c1 = candidate_es_0_1_node_r0.lgspInhead;
                                        if(head_candidate_es_0_1_edge_c1 != null)
                                        {
                                            GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c1 = head_candidate_es_0_1_edge_c1;
                                            do
                                            {
                                                if(candidate_es_0_1_edge_c1.lgspType.TypeID!=3) {
                                                    continue;
                                                }
                                                if((candidate_es_0_1_edge_c1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                {
                                                    continue;
                                                }
                                                uint prev__candidate_es_0_1_edge_c1;
                                                prev__candidate_es_0_1_edge_c1 = candidate_es_0_1_edge_c1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                candidate_es_0_1_edge_c1.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                // Implicit Source es_0_1_node_v9 from es_0_1_edge_c1 
                                                GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v9 = candidate_es_0_1_edge_c1.lgspSource;
                                                if(candidate_es_0_1_node_v9.lgspType.TypeID!=15) {
                                                    candidate_es_0_1_edge_c1.lgspFlags = candidate_es_0_1_edge_c1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c1;
                                                    continue;
                                                }
                                                if((candidate_es_0_1_node_v9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                {
                                                    candidate_es_0_1_edge_c1.lgspFlags = candidate_es_0_1_edge_c1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c1;
                                                    continue;
                                                }
                                                uint prev__candidate_es_0_1_node_v9;
                                                prev__candidate_es_0_1_node_v9 = candidate_es_0_1_node_v9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                candidate_es_0_1_node_v9.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                // Extend Outgoing es_0_1_edge__edge0 from es_0_1_node_v0_p0 
                                                GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge__edge0 = candidate_es_0_1_node_v0_p0.lgspOuthead;
                                                if(head_candidate_es_0_1_edge__edge0 != null)
                                                {
                                                    GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge__edge0 = head_candidate_es_0_1_edge__edge0;
                                                    do
                                                    {
                                                        if(candidate_es_0_1_edge__edge0.lgspType.TypeID!=7) {
                                                            continue;
                                                        }
                                                        uint prev__candidate_es_0_1_edge__edge0;
                                                        prev__candidate_es_0_1_edge__edge0 = candidate_es_0_1_edge__edge0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                        candidate_es_0_1_edge__edge0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                        // Implicit Target es_0_1_node_left from es_0_1_edge__edge0 
                                                        GRGEN_LGSP.LGSPNode candidate_es_0_1_node_left = candidate_es_0_1_edge__edge0.lgspTarget;
                                                        if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_es_0_1_node_left.lgspType.TypeID]) {
                                                            candidate_es_0_1_edge__edge0.lgspFlags = candidate_es_0_1_edge__edge0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge0;
                                                            continue;
                                                        }
                                                        if((candidate_es_0_1_node_left.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                        {
                                                            candidate_es_0_1_edge__edge0.lgspFlags = candidate_es_0_1_edge__edge0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge0;
                                                            continue;
                                                        }
                                                        uint prev__candidate_es_0_1_node_left;
                                                        prev__candidate_es_0_1_node_left = candidate_es_0_1_node_left.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                        candidate_es_0_1_node_left.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                        // Extend Incoming es_0_1_edge_c7 from es_0_1_node_v1 
                                                        GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c7 = candidate_es_0_1_node_v1.lgspInhead;
                                                        if(head_candidate_es_0_1_edge_c7 != null)
                                                        {
                                                            GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c7 = head_candidate_es_0_1_edge_c7;
                                                            do
                                                            {
                                                                if(candidate_es_0_1_edge_c7.lgspType.TypeID!=5) {
                                                                    continue;
                                                                }
                                                                if((candidate_es_0_1_edge_c7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                {
                                                                    continue;
                                                                }
                                                                uint prev__candidate_es_0_1_edge_c7;
                                                                prev__candidate_es_0_1_edge_c7 = candidate_es_0_1_edge_c7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                candidate_es_0_1_edge_c7.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                // Implicit Source es_0_1_node_v1_p0 from es_0_1_edge_c7 
                                                                GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v1_p0 = candidate_es_0_1_edge_c7.lgspSource;
                                                                if(candidate_es_0_1_node_v1_p0.lgspType.TypeID!=7) {
                                                                    candidate_es_0_1_edge_c7.lgspFlags = candidate_es_0_1_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c7;
                                                                    continue;
                                                                }
                                                                if((candidate_es_0_1_node_v1_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                {
                                                                    candidate_es_0_1_edge_c7.lgspFlags = candidate_es_0_1_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c7;
                                                                    continue;
                                                                }
                                                                uint prev__candidate_es_0_1_node_v1_p0;
                                                                prev__candidate_es_0_1_node_v1_p0 = candidate_es_0_1_node_v1_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                candidate_es_0_1_node_v1_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                // Condition 
                                                                if(!((((GRGEN_MODEL.IBPort)candidate_es_0_1_node_v1_p0).@ix == 0))) {
                                                                    candidate_es_0_1_node_v1_p0.lgspFlags = candidate_es_0_1_node_v1_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v1_p0;
                                                                    candidate_es_0_1_edge_c7.lgspFlags = candidate_es_0_1_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c7;
                                                                    continue;
                                                                }
                                                                // Extend Incoming es_0_1_edge_c8 from es_0_1_node_v2 
                                                                GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c8 = candidate_es_0_1_node_v2.lgspInhead;
                                                                if(head_candidate_es_0_1_edge_c8 != null)
                                                                {
                                                                    GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c8 = head_candidate_es_0_1_edge_c8;
                                                                    do
                                                                    {
                                                                        if(candidate_es_0_1_edge_c8.lgspType.TypeID!=3) {
                                                                            continue;
                                                                        }
                                                                        if((candidate_es_0_1_edge_c8.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_es_0_1_edge_c8;
                                                                        prev__candidate_es_0_1_edge_c8 = candidate_es_0_1_edge_c8.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                        candidate_es_0_1_edge_c8.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                        // Implicit Source es_0_1_node_v3 from es_0_1_edge_c8 
                                                                        GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v3 = candidate_es_0_1_edge_c8.lgspSource;
                                                                        if(candidate_es_0_1_node_v3.lgspType.TypeID!=19) {
                                                                            candidate_es_0_1_edge_c8.lgspFlags = candidate_es_0_1_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c8;
                                                                            continue;
                                                                        }
                                                                        if((candidate_es_0_1_node_v3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                        {
                                                                            candidate_es_0_1_edge_c8.lgspFlags = candidate_es_0_1_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c8;
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_es_0_1_node_v3;
                                                                        prev__candidate_es_0_1_node_v3 = candidate_es_0_1_node_v3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                        candidate_es_0_1_node_v3.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                        // Extend Incoming es_0_1_edge_c5 from es_0_1_node_v9 
                                                                        GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c5 = candidate_es_0_1_node_v9.lgspInhead;
                                                                        if(head_candidate_es_0_1_edge_c5 != null)
                                                                        {
                                                                            GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c5 = head_candidate_es_0_1_edge_c5;
                                                                            do
                                                                            {
                                                                                if(candidate_es_0_1_edge_c5.lgspType.TypeID!=5) {
                                                                                    continue;
                                                                                }
                                                                                if((candidate_es_0_1_edge_c5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                uint prev__candidate_es_0_1_edge_c5;
                                                                                prev__candidate_es_0_1_edge_c5 = candidate_es_0_1_edge_c5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                candidate_es_0_1_edge_c5.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                // Implicit Source es_0_1_node_v9_p0 from es_0_1_edge_c5 
                                                                                GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v9_p0 = candidate_es_0_1_edge_c5.lgspSource;
                                                                                if(candidate_es_0_1_node_v9_p0.lgspType.TypeID!=7) {
                                                                                    candidate_es_0_1_edge_c5.lgspFlags = candidate_es_0_1_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c5;
                                                                                    continue;
                                                                                }
                                                                                if((candidate_es_0_1_node_v9_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                {
                                                                                    candidate_es_0_1_edge_c5.lgspFlags = candidate_es_0_1_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c5;
                                                                                    continue;
                                                                                }
                                                                                uint prev__candidate_es_0_1_node_v9_p0;
                                                                                prev__candidate_es_0_1_node_v9_p0 = candidate_es_0_1_node_v9_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                candidate_es_0_1_node_v9_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                // Condition 
                                                                                if(!((((GRGEN_MODEL.IBPort)candidate_es_0_1_node_v9_p0).@ix == 0))) {
                                                                                    candidate_es_0_1_node_v9_p0.lgspFlags = candidate_es_0_1_node_v9_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v9_p0;
                                                                                    candidate_es_0_1_edge_c5.lgspFlags = candidate_es_0_1_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c5;
                                                                                    continue;
                                                                                }
                                                                                // Extend Incoming es_0_1_edge_c6 from es_0_1_node_v9 
                                                                                GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c6 = candidate_es_0_1_node_v9.lgspInhead;
                                                                                if(head_candidate_es_0_1_edge_c6 != null)
                                                                                {
                                                                                    GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c6 = head_candidate_es_0_1_edge_c6;
                                                                                    do
                                                                                    {
                                                                                        if(candidate_es_0_1_edge_c6.lgspType.TypeID!=3) {
                                                                                            continue;
                                                                                        }
                                                                                        if((candidate_es_0_1_edge_c6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        uint prev__candidate_es_0_1_edge_c6;
                                                                                        prev__candidate_es_0_1_edge_c6 = candidate_es_0_1_edge_c6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                        candidate_es_0_1_edge_c6.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                        // Implicit Source es_0_1_node_v10 from es_0_1_edge_c6 
                                                                                        GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v10 = candidate_es_0_1_edge_c6.lgspSource;
                                                                                        if(candidate_es_0_1_node_v10.lgspType.TypeID!=18) {
                                                                                            candidate_es_0_1_edge_c6.lgspFlags = candidate_es_0_1_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c6;
                                                                                            continue;
                                                                                        }
                                                                                        if((candidate_es_0_1_node_v10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                        {
                                                                                            candidate_es_0_1_edge_c6.lgspFlags = candidate_es_0_1_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c6;
                                                                                            continue;
                                                                                        }
                                                                                        uint prev__candidate_es_0_1_node_v10;
                                                                                        prev__candidate_es_0_1_node_v10 = candidate_es_0_1_node_v10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                        candidate_es_0_1_node_v10.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat3_3 assigned from expression 1 
                                                                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat3_3 = (System.Int32)1;
                                                                                        // Element nac_NodesWithoutSites_node_src_inlined_pat3_3 assigned from other element es_0_1_node_v10 
                                                                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat3_3 = candidate_es_0_1_node_v10;
                                                                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat3_3.lgspType.TypeID]) {
                                                                                            candidate_es_0_1_node_v10.lgspFlags = candidate_es_0_1_node_v10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v10;
                                                                                            candidate_es_0_1_edge_c6.lgspFlags = candidate_es_0_1_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c6;
                                                                                            continue;
                                                                                        }
                                                                                        // NegativePattern 
                                                                                        {
                                                                                            ++isoSpace;
                                                                                            // Condition 
                                                                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat3_3, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat3_3))) {
                                                                                                --isoSpace;
                                                                                                goto label5;
                                                                                            }
                                                                                            // negative pattern found
                                                                                            --isoSpace;
                                                                                            candidate_es_0_1_node_v10.lgspFlags = candidate_es_0_1_node_v10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v10;
                                                                                            candidate_es_0_1_edge_c6.lgspFlags = candidate_es_0_1_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c6;
                                                                                            goto label6;
                                                                                            --isoSpace;
                                                                                        }
label5: ;
                                                                                        // Extend Outgoing es_0_1_edge__edge5 from es_0_1_node_v1_p0 
                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge__edge5 = candidate_es_0_1_node_v1_p0.lgspOuthead;
                                                                                        if(head_candidate_es_0_1_edge__edge5 != null)
                                                                                        {
                                                                                            GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge__edge5 = head_candidate_es_0_1_edge__edge5;
                                                                                            do
                                                                                            {
                                                                                                if(candidate_es_0_1_edge__edge5.lgspType.TypeID!=7) {
                                                                                                    continue;
                                                                                                }
                                                                                                if((candidate_es_0_1_edge__edge5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                uint prev__candidate_es_0_1_edge__edge5;
                                                                                                prev__candidate_es_0_1_edge__edge5 = candidate_es_0_1_edge__edge5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                candidate_es_0_1_edge__edge5.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                // Extend Incoming es_0_1_edge_c10 from es_0_1_node_v3 
                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c10 = candidate_es_0_1_node_v3.lgspInhead;
                                                                                                if(head_candidate_es_0_1_edge_c10 != null)
                                                                                                {
                                                                                                    GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c10 = head_candidate_es_0_1_edge_c10;
                                                                                                    do
                                                                                                    {
                                                                                                        if(candidate_es_0_1_edge_c10.lgspType.TypeID!=5) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        if((candidate_es_0_1_edge_c10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        uint prev__candidate_es_0_1_edge_c10;
                                                                                                        prev__candidate_es_0_1_edge_c10 = candidate_es_0_1_edge_c10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                        candidate_es_0_1_edge_c10.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                        // Implicit Source es_0_1_node_v3_p0 from es_0_1_edge_c10 
                                                                                                        GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v3_p0 = candidate_es_0_1_edge_c10.lgspSource;
                                                                                                        if(candidate_es_0_1_node_v3_p0.lgspType.TypeID!=7) {
                                                                                                            candidate_es_0_1_edge_c10.lgspFlags = candidate_es_0_1_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c10;
                                                                                                            continue;
                                                                                                        }
                                                                                                        if((candidate_es_0_1_node_v3_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                        {
                                                                                                            candidate_es_0_1_edge_c10.lgspFlags = candidate_es_0_1_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c10;
                                                                                                            continue;
                                                                                                        }
                                                                                                        uint prev__candidate_es_0_1_node_v3_p0;
                                                                                                        prev__candidate_es_0_1_node_v3_p0 = candidate_es_0_1_node_v3_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                        candidate_es_0_1_node_v3_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                        // Condition 
                                                                                                        if(!((((GRGEN_MODEL.IBPort)candidate_es_0_1_node_v3_p0).@ix == 0))) {
                                                                                                            candidate_es_0_1_node_v3_p0.lgspFlags = candidate_es_0_1_node_v3_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v3_p0;
                                                                                                            candidate_es_0_1_edge_c10.lgspFlags = candidate_es_0_1_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c10;
                                                                                                            continue;
                                                                                                        }
                                                                                                        // Extend Incoming es_0_1_edge_c11 from es_0_1_node_v3 
                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c11 = candidate_es_0_1_node_v3.lgspInhead;
                                                                                                        if(head_candidate_es_0_1_edge_c11 != null)
                                                                                                        {
                                                                                                            GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c11 = head_candidate_es_0_1_edge_c11;
                                                                                                            do
                                                                                                            {
                                                                                                                if(candidate_es_0_1_edge_c11.lgspType.TypeID!=3) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((candidate_es_0_1_edge_c11.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                uint prev__candidate_es_0_1_edge_c11;
                                                                                                                prev__candidate_es_0_1_edge_c11 = candidate_es_0_1_edge_c11.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                candidate_es_0_1_edge_c11.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                // Implicit Source es_0_1_node_v4 from es_0_1_edge_c11 
                                                                                                                GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v4 = candidate_es_0_1_edge_c11.lgspSource;
                                                                                                                if(candidate_es_0_1_node_v4.lgspType.TypeID!=20) {
                                                                                                                    candidate_es_0_1_edge_c11.lgspFlags = candidate_es_0_1_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c11;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((candidate_es_0_1_node_v4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                {
                                                                                                                    candidate_es_0_1_edge_c11.lgspFlags = candidate_es_0_1_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c11;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                uint prev__candidate_es_0_1_node_v4;
                                                                                                                prev__candidate_es_0_1_node_v4 = candidate_es_0_1_node_v4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                candidate_es_0_1_node_v4.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat11_11 assigned from expression 1 
                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat11_11 = (System.Int32)1;
                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat11_11 assigned from other element es_0_1_node_v4 
                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat11_11 = candidate_es_0_1_node_v4;
                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat11_11.lgspType.TypeID]) {
                                                                                                                    candidate_es_0_1_node_v4.lgspFlags = candidate_es_0_1_node_v4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v4;
                                                                                                                    candidate_es_0_1_edge_c11.lgspFlags = candidate_es_0_1_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c11;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                // NegativePattern 
                                                                                                                {
                                                                                                                    ++isoSpace;
                                                                                                                    // Condition 
                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat11_11, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat11_11))) {
                                                                                                                        --isoSpace;
                                                                                                                        goto label7;
                                                                                                                    }
                                                                                                                    // negative pattern found
                                                                                                                    --isoSpace;
                                                                                                                    candidate_es_0_1_node_v4.lgspFlags = candidate_es_0_1_node_v4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v4;
                                                                                                                    candidate_es_0_1_edge_c11.lgspFlags = candidate_es_0_1_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c11;
                                                                                                                    goto label8;
                                                                                                                    --isoSpace;
                                                                                                                }
label7: ;
                                                                                                                // Extend Incoming es_0_1_edge_c12 from es_0_1_node_v3 
                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c12 = candidate_es_0_1_node_v3.lgspInhead;
                                                                                                                if(head_candidate_es_0_1_edge_c12 != null)
                                                                                                                {
                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c12 = head_candidate_es_0_1_edge_c12;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        if(candidate_es_0_1_edge_c12.lgspType.TypeID!=3) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if((candidate_es_0_1_edge_c12.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        uint prev__candidate_es_0_1_edge_c12;
                                                                                                                        prev__candidate_es_0_1_edge_c12 = candidate_es_0_1_edge_c12.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                        candidate_es_0_1_edge_c12.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                        // Implicit Source es_0_1_node_v6 from es_0_1_edge_c12 
                                                                                                                        GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v6 = candidate_es_0_1_edge_c12.lgspSource;
                                                                                                                        if(candidate_es_0_1_node_v6.lgspType.TypeID!=34) {
                                                                                                                            candidate_es_0_1_edge_c12.lgspFlags = candidate_es_0_1_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c12;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if((candidate_es_0_1_node_v6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                        {
                                                                                                                            candidate_es_0_1_edge_c12.lgspFlags = candidate_es_0_1_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c12;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        uint prev__candidate_es_0_1_node_v6;
                                                                                                                        prev__candidate_es_0_1_node_v6 = candidate_es_0_1_node_v6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                        candidate_es_0_1_node_v6.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat0_0 assigned from expression 1 
                                                                                                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat0_0 = (System.Int32)1;
                                                                                                                        // Element nac_NodesWithoutSites_node_src_inlined_pat0_0 assigned from other element es_0_1_node_v6 
                                                                                                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat0_0 = candidate_es_0_1_node_v6;
                                                                                                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat0_0.lgspType.TypeID]) {
                                                                                                                            candidate_es_0_1_node_v6.lgspFlags = candidate_es_0_1_node_v6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v6;
                                                                                                                            candidate_es_0_1_edge_c12.lgspFlags = candidate_es_0_1_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c12;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        // NegativePattern 
                                                                                                                        {
                                                                                                                            ++isoSpace;
                                                                                                                            // Condition 
                                                                                                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat0_0, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat0_0))) {
                                                                                                                                --isoSpace;
                                                                                                                                goto label9;
                                                                                                                            }
                                                                                                                            // negative pattern found
                                                                                                                            --isoSpace;
                                                                                                                            candidate_es_0_1_node_v6.lgspFlags = candidate_es_0_1_node_v6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v6;
                                                                                                                            candidate_es_0_1_edge_c12.lgspFlags = candidate_es_0_1_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c12;
                                                                                                                            goto label10;
                                                                                                                            --isoSpace;
                                                                                                                        }
label9: ;
                                                                                                                        // Extend Incoming es_0_1_edge_c13 from es_0_1_node_v3 
                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c13 = candidate_es_0_1_node_v3.lgspInhead;
                                                                                                                        if(head_candidate_es_0_1_edge_c13 != null)
                                                                                                                        {
                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c13 = head_candidate_es_0_1_edge_c13;
                                                                                                                            do
                                                                                                                            {
                                                                                                                                if(candidate_es_0_1_edge_c13.lgspType.TypeID!=3) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if((candidate_es_0_1_edge_c13.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                uint prev__candidate_es_0_1_edge_c13;
                                                                                                                                prev__candidate_es_0_1_edge_c13 = candidate_es_0_1_edge_c13.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                candidate_es_0_1_edge_c13.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                // Implicit Source es_0_1_node_v8 from es_0_1_edge_c13 
                                                                                                                                GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v8 = candidate_es_0_1_edge_c13.lgspSource;
                                                                                                                                if(candidate_es_0_1_node_v8.lgspType.TypeID!=36) {
                                                                                                                                    candidate_es_0_1_edge_c13.lgspFlags = candidate_es_0_1_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c13;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if((candidate_es_0_1_node_v8.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                {
                                                                                                                                    candidate_es_0_1_edge_c13.lgspFlags = candidate_es_0_1_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c13;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                uint prev__candidate_es_0_1_node_v8;
                                                                                                                                prev__candidate_es_0_1_node_v8 = candidate_es_0_1_node_v8.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                candidate_es_0_1_node_v8.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat2_2 assigned from expression 0 
                                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat2_2 = (System.Int32)0;
                                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat2_2 assigned from other element es_0_1_node_v8 
                                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat2_2 = candidate_es_0_1_node_v8;
                                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat2_2.lgspType.TypeID]) {
                                                                                                                                    candidate_es_0_1_node_v8.lgspFlags = candidate_es_0_1_node_v8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v8;
                                                                                                                                    candidate_es_0_1_edge_c13.lgspFlags = candidate_es_0_1_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c13;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                // NegativePattern 
                                                                                                                                {
                                                                                                                                    ++isoSpace;
                                                                                                                                    // Condition 
                                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat2_2, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat2_2))) {
                                                                                                                                        --isoSpace;
                                                                                                                                        goto label11;
                                                                                                                                    }
                                                                                                                                    // negative pattern found
                                                                                                                                    --isoSpace;
                                                                                                                                    candidate_es_0_1_node_v8.lgspFlags = candidate_es_0_1_node_v8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v8;
                                                                                                                                    candidate_es_0_1_edge_c13.lgspFlags = candidate_es_0_1_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c13;
                                                                                                                                    goto label12;
                                                                                                                                    --isoSpace;
                                                                                                                                }
label11: ;
                                                                                                                                // Extend Outgoing es_0_1_edge__edge4 from es_0_1_node_v9_p0 
                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge__edge4 = candidate_es_0_1_node_v9_p0.lgspOuthead;
                                                                                                                                if(head_candidate_es_0_1_edge__edge4 != null)
                                                                                                                                {
                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge__edge4 = head_candidate_es_0_1_edge__edge4;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                        if(candidate_es_0_1_edge__edge4.lgspType.TypeID!=7) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if((candidate_es_0_1_edge__edge4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        uint prev__candidate_es_0_1_edge__edge4;
                                                                                                                                        prev__candidate_es_0_1_edge__edge4 = candidate_es_0_1_edge__edge4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                        candidate_es_0_1_edge__edge4.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                        // Implicit Target es_0_1_node_right from es_0_1_edge__edge4 
                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_es_0_1_node_right = candidate_es_0_1_edge__edge4.lgspTarget;
                                                                                                                                        if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_es_0_1_node_right.lgspType.TypeID]) {
                                                                                                                                            candidate_es_0_1_edge__edge4.lgspFlags = candidate_es_0_1_edge__edge4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge4;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if(candidate_es_0_1_edge__edge5.lgspTarget != candidate_es_0_1_node_right) {
                                                                                                                                            candidate_es_0_1_edge__edge4.lgspFlags = candidate_es_0_1_edge__edge4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge4;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if((candidate_es_0_1_node_right.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                        {
                                                                                                                                            candidate_es_0_1_edge__edge4.lgspFlags = candidate_es_0_1_edge__edge4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge4;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        uint prev__candidate_es_0_1_node_right;
                                                                                                                                        prev__candidate_es_0_1_node_right = candidate_es_0_1_node_right.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                        candidate_es_0_1_node_right.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                        // Extend Incoming es_0_1_edge_c9 from es_0_1_node_v10 
                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c9 = candidate_es_0_1_node_v10.lgspInhead;
                                                                                                                                        if(head_candidate_es_0_1_edge_c9 != null)
                                                                                                                                        {
                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c9 = head_candidate_es_0_1_edge_c9;
                                                                                                                                            do
                                                                                                                                            {
                                                                                                                                                if(candidate_es_0_1_edge_c9.lgspType.TypeID!=3) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if((candidate_es_0_1_edge_c9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                uint prev__candidate_es_0_1_edge_c9;
                                                                                                                                                prev__candidate_es_0_1_edge_c9 = candidate_es_0_1_edge_c9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                candidate_es_0_1_edge_c9.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                // Implicit Source es_0_1_node_v11 from es_0_1_edge_c9 
                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v11 = candidate_es_0_1_edge_c9.lgspSource;
                                                                                                                                                if(candidate_es_0_1_node_v11.lgspType.TypeID!=19) {
                                                                                                                                                    candidate_es_0_1_edge_c9.lgspFlags = candidate_es_0_1_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c9;
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if((candidate_es_0_1_node_v11.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                {
                                                                                                                                                    candidate_es_0_1_edge_c9.lgspFlags = candidate_es_0_1_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c9;
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                uint prev__candidate_es_0_1_node_v11;
                                                                                                                                                prev__candidate_es_0_1_node_v11 = candidate_es_0_1_node_v11.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                candidate_es_0_1_node_v11.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                // Extend Outgoing es_0_1_edge__edge1 from es_0_1_node_v3_p0 
                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge__edge1 = candidate_es_0_1_node_v3_p0.lgspOuthead;
                                                                                                                                                if(head_candidate_es_0_1_edge__edge1 != null)
                                                                                                                                                {
                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge__edge1 = head_candidate_es_0_1_edge__edge1;
                                                                                                                                                    do
                                                                                                                                                    {
                                                                                                                                                        if(candidate_es_0_1_edge__edge1.lgspType.TypeID!=7) {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if((candidate_es_0_1_edge__edge1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        uint prev__candidate_es_0_1_edge__edge1;
                                                                                                                                                        prev__candidate_es_0_1_edge__edge1 = candidate_es_0_1_edge__edge1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                        candidate_es_0_1_edge__edge1.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                        // Implicit Target es_0_1_node_rn0 from es_0_1_edge__edge1 
                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_es_0_1_node_rn0 = candidate_es_0_1_edge__edge1.lgspTarget;
                                                                                                                                                        if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_es_0_1_node_rn0.lgspType.TypeID]) {
                                                                                                                                                            candidate_es_0_1_edge__edge1.lgspFlags = candidate_es_0_1_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge1;
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if((candidate_es_0_1_node_rn0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                        {
                                                                                                                                                            candidate_es_0_1_edge__edge1.lgspFlags = candidate_es_0_1_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge1;
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        uint prev__candidate_es_0_1_node_rn0;
                                                                                                                                                        prev__candidate_es_0_1_node_rn0 = candidate_es_0_1_node_rn0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                        candidate_es_0_1_node_rn0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                        // Extend Incoming es_0_1_edge_c18 from es_0_1_node_v4 
                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c18 = candidate_es_0_1_node_v4.lgspInhead;
                                                                                                                                                        if(head_candidate_es_0_1_edge_c18 != null)
                                                                                                                                                        {
                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c18 = head_candidate_es_0_1_edge_c18;
                                                                                                                                                            do
                                                                                                                                                            {
                                                                                                                                                                if(candidate_es_0_1_edge_c18.lgspType.TypeID!=3) {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if((candidate_es_0_1_edge_c18.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                uint prev__candidate_es_0_1_edge_c18;
                                                                                                                                                                prev__candidate_es_0_1_edge_c18 = candidate_es_0_1_edge_c18.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                candidate_es_0_1_edge_c18.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                // Implicit Source es_0_1_node_v5 from es_0_1_edge_c18 
                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v5 = candidate_es_0_1_edge_c18.lgspSource;
                                                                                                                                                                if(candidate_es_0_1_node_v5.lgspType.TypeID!=21) {
                                                                                                                                                                    candidate_es_0_1_edge_c18.lgspFlags = candidate_es_0_1_edge_c18.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c18;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if((candidate_es_0_1_node_v5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                {
                                                                                                                                                                    candidate_es_0_1_edge_c18.lgspFlags = candidate_es_0_1_edge_c18.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c18;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                uint prev__candidate_es_0_1_node_v5;
                                                                                                                                                                prev__candidate_es_0_1_node_v5 = candidate_es_0_1_node_v5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                candidate_es_0_1_node_v5.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat12_12 assigned from expression 0 
                                                                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat12_12 = (System.Int32)0;
                                                                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat12_12 assigned from other element es_0_1_node_v5 
                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat12_12 = candidate_es_0_1_node_v5;
                                                                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat12_12.lgspType.TypeID]) {
                                                                                                                                                                    candidate_es_0_1_node_v5.lgspFlags = candidate_es_0_1_node_v5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v5;
                                                                                                                                                                    candidate_es_0_1_edge_c18.lgspFlags = candidate_es_0_1_edge_c18.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c18;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                // NegativePattern 
                                                                                                                                                                {
                                                                                                                                                                    ++isoSpace;
                                                                                                                                                                    // Condition 
                                                                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat12_12, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat12_12))) {
                                                                                                                                                                        --isoSpace;
                                                                                                                                                                        goto label13;
                                                                                                                                                                    }
                                                                                                                                                                    // negative pattern found
                                                                                                                                                                    --isoSpace;
                                                                                                                                                                    candidate_es_0_1_node_v5.lgspFlags = candidate_es_0_1_node_v5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v5;
                                                                                                                                                                    candidate_es_0_1_edge_c18.lgspFlags = candidate_es_0_1_edge_c18.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c18;
                                                                                                                                                                    goto label14;
                                                                                                                                                                    --isoSpace;
                                                                                                                                                                }
label13: ;
                                                                                                                                                                // Extend Incoming es_0_1_edge_c19 from es_0_1_node_v6 
                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c19 = candidate_es_0_1_node_v6.lgspInhead;
                                                                                                                                                                if(head_candidate_es_0_1_edge_c19 != null)
                                                                                                                                                                {
                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c19 = head_candidate_es_0_1_edge_c19;
                                                                                                                                                                    do
                                                                                                                                                                    {
                                                                                                                                                                        if(candidate_es_0_1_edge_c19.lgspType.TypeID!=3) {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if((candidate_es_0_1_edge_c19.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        uint prev__candidate_es_0_1_edge_c19;
                                                                                                                                                                        prev__candidate_es_0_1_edge_c19 = candidate_es_0_1_edge_c19.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                        candidate_es_0_1_edge_c19.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                        // Implicit Source es_0_1_node_v7 from es_0_1_edge_c19 
                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v7 = candidate_es_0_1_edge_c19.lgspSource;
                                                                                                                                                                        if(candidate_es_0_1_node_v7.lgspType.TypeID!=35) {
                                                                                                                                                                            candidate_es_0_1_edge_c19.lgspFlags = candidate_es_0_1_edge_c19.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c19;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if((candidate_es_0_1_node_v7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                        {
                                                                                                                                                                            candidate_es_0_1_edge_c19.lgspFlags = candidate_es_0_1_edge_c19.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c19;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        uint prev__candidate_es_0_1_node_v7;
                                                                                                                                                                        prev__candidate_es_0_1_node_v7 = candidate_es_0_1_node_v7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                        candidate_es_0_1_node_v7.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat1_1 assigned from expression 0 
                                                                                                                                                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat1_1 = (System.Int32)0;
                                                                                                                                                                        // Element nac_NodesWithoutSites_node_src_inlined_pat1_1 assigned from other element es_0_1_node_v7 
                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat1_1 = candidate_es_0_1_node_v7;
                                                                                                                                                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat1_1.lgspType.TypeID]) {
                                                                                                                                                                            candidate_es_0_1_node_v7.lgspFlags = candidate_es_0_1_node_v7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v7;
                                                                                                                                                                            candidate_es_0_1_edge_c19.lgspFlags = candidate_es_0_1_edge_c19.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c19;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        // NegativePattern 
                                                                                                                                                                        {
                                                                                                                                                                            ++isoSpace;
                                                                                                                                                                            // Condition 
                                                                                                                                                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat1_1, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat1_1))) {
                                                                                                                                                                                --isoSpace;
                                                                                                                                                                                goto label15;
                                                                                                                                                                            }
                                                                                                                                                                            // negative pattern found
                                                                                                                                                                            --isoSpace;
                                                                                                                                                                            candidate_es_0_1_node_v7.lgspFlags = candidate_es_0_1_node_v7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v7;
                                                                                                                                                                            candidate_es_0_1_edge_c19.lgspFlags = candidate_es_0_1_edge_c19.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c19;
                                                                                                                                                                            goto label16;
                                                                                                                                                                            --isoSpace;
                                                                                                                                                                        }
label15: ;
                                                                                                                                                                        // Extend Incoming es_0_1_edge_c14 from es_0_1_node_v11 
                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c14 = candidate_es_0_1_node_v11.lgspInhead;
                                                                                                                                                                        if(head_candidate_es_0_1_edge_c14 != null)
                                                                                                                                                                        {
                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c14 = head_candidate_es_0_1_edge_c14;
                                                                                                                                                                            do
                                                                                                                                                                            {
                                                                                                                                                                                if(candidate_es_0_1_edge_c14.lgspType.TypeID!=5) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if((candidate_es_0_1_edge_c14.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                uint prev__candidate_es_0_1_edge_c14;
                                                                                                                                                                                prev__candidate_es_0_1_edge_c14 = candidate_es_0_1_edge_c14.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                candidate_es_0_1_edge_c14.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                // Implicit Source es_0_1_node_v11_p0 from es_0_1_edge_c14 
                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v11_p0 = candidate_es_0_1_edge_c14.lgspSource;
                                                                                                                                                                                if(candidate_es_0_1_node_v11_p0.lgspType.TypeID!=7) {
                                                                                                                                                                                    candidate_es_0_1_edge_c14.lgspFlags = candidate_es_0_1_edge_c14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c14;
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if((candidate_es_0_1_node_v11_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                {
                                                                                                                                                                                    candidate_es_0_1_edge_c14.lgspFlags = candidate_es_0_1_edge_c14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c14;
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                uint prev__candidate_es_0_1_node_v11_p0;
                                                                                                                                                                                prev__candidate_es_0_1_node_v11_p0 = candidate_es_0_1_node_v11_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                candidate_es_0_1_node_v11_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                // Condition 
                                                                                                                                                                                if(!((((GRGEN_MODEL.IBPort)candidate_es_0_1_node_v11_p0).@ix == 0))) {
                                                                                                                                                                                    candidate_es_0_1_node_v11_p0.lgspFlags = candidate_es_0_1_node_v11_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v11_p0;
                                                                                                                                                                                    candidate_es_0_1_edge_c14.lgspFlags = candidate_es_0_1_edge_c14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c14;
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                // Extend Incoming es_0_1_edge_c15 from es_0_1_node_v11 
                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c15 = candidate_es_0_1_node_v11.lgspInhead;
                                                                                                                                                                                if(head_candidate_es_0_1_edge_c15 != null)
                                                                                                                                                                                {
                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c15 = head_candidate_es_0_1_edge_c15;
                                                                                                                                                                                    do
                                                                                                                                                                                    {
                                                                                                                                                                                        if(candidate_es_0_1_edge_c15.lgspType.TypeID!=3) {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        if((candidate_es_0_1_edge_c15.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                        {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        uint prev__candidate_es_0_1_edge_c15;
                                                                                                                                                                                        prev__candidate_es_0_1_edge_c15 = candidate_es_0_1_edge_c15.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                        candidate_es_0_1_edge_c15.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                        // Implicit Source es_0_1_node_v12 from es_0_1_edge_c15 
                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v12 = candidate_es_0_1_edge_c15.lgspSource;
                                                                                                                                                                                        if(candidate_es_0_1_node_v12.lgspType.TypeID!=20) {
                                                                                                                                                                                            candidate_es_0_1_edge_c15.lgspFlags = candidate_es_0_1_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c15;
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        if((candidate_es_0_1_node_v12.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                        {
                                                                                                                                                                                            candidate_es_0_1_edge_c15.lgspFlags = candidate_es_0_1_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c15;
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        uint prev__candidate_es_0_1_node_v12;
                                                                                                                                                                                        prev__candidate_es_0_1_node_v12 = candidate_es_0_1_node_v12.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                        candidate_es_0_1_node_v12.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat4_4 assigned from expression 1 
                                                                                                                                                                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat4_4 = (System.Int32)1;
                                                                                                                                                                                        // Element nac_NodesWithoutSites_node_src_inlined_pat4_4 assigned from other element es_0_1_node_v12 
                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat4_4 = candidate_es_0_1_node_v12;
                                                                                                                                                                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat4_4.lgspType.TypeID]) {
                                                                                                                                                                                            candidate_es_0_1_node_v12.lgspFlags = candidate_es_0_1_node_v12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v12;
                                                                                                                                                                                            candidate_es_0_1_edge_c15.lgspFlags = candidate_es_0_1_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c15;
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        // NegativePattern 
                                                                                                                                                                                        {
                                                                                                                                                                                            ++isoSpace;
                                                                                                                                                                                            // Condition 
                                                                                                                                                                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat4_4, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat4_4))) {
                                                                                                                                                                                                --isoSpace;
                                                                                                                                                                                                goto label17;
                                                                                                                                                                                            }
                                                                                                                                                                                            // negative pattern found
                                                                                                                                                                                            --isoSpace;
                                                                                                                                                                                            candidate_es_0_1_node_v12.lgspFlags = candidate_es_0_1_node_v12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v12;
                                                                                                                                                                                            candidate_es_0_1_edge_c15.lgspFlags = candidate_es_0_1_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c15;
                                                                                                                                                                                            goto label18;
                                                                                                                                                                                            --isoSpace;
                                                                                                                                                                                        }
label17: ;
                                                                                                                                                                                        // Extend Incoming es_0_1_edge_c16 from es_0_1_node_v11 
                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c16 = candidate_es_0_1_node_v11.lgspInhead;
                                                                                                                                                                                        if(head_candidate_es_0_1_edge_c16 != null)
                                                                                                                                                                                        {
                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c16 = head_candidate_es_0_1_edge_c16;
                                                                                                                                                                                            do
                                                                                                                                                                                            {
                                                                                                                                                                                                if(candidate_es_0_1_edge_c16.lgspType.TypeID!=3) {
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                if((candidate_es_0_1_edge_c16.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                {
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                uint prev__candidate_es_0_1_edge_c16;
                                                                                                                                                                                                prev__candidate_es_0_1_edge_c16 = candidate_es_0_1_edge_c16.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                candidate_es_0_1_edge_c16.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                // Implicit Source es_0_1_node_v14 from es_0_1_edge_c16 
                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v14 = candidate_es_0_1_edge_c16.lgspSource;
                                                                                                                                                                                                if(candidate_es_0_1_node_v14.lgspType.TypeID!=34) {
                                                                                                                                                                                                    candidate_es_0_1_edge_c16.lgspFlags = candidate_es_0_1_edge_c16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c16;
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                if((candidate_es_0_1_node_v14.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                {
                                                                                                                                                                                                    candidate_es_0_1_edge_c16.lgspFlags = candidate_es_0_1_edge_c16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c16;
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                uint prev__candidate_es_0_1_node_v14;
                                                                                                                                                                                                prev__candidate_es_0_1_node_v14 = candidate_es_0_1_node_v14.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                candidate_es_0_1_node_v14.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat5_5 assigned from expression 1 
                                                                                                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat5_5 = (System.Int32)1;
                                                                                                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat5_5 assigned from other element es_0_1_node_v14 
                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat5_5 = candidate_es_0_1_node_v14;
                                                                                                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat5_5.lgspType.TypeID]) {
                                                                                                                                                                                                    candidate_es_0_1_node_v14.lgspFlags = candidate_es_0_1_node_v14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v14;
                                                                                                                                                                                                    candidate_es_0_1_edge_c16.lgspFlags = candidate_es_0_1_edge_c16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c16;
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                // NegativePattern 
                                                                                                                                                                                                {
                                                                                                                                                                                                    ++isoSpace;
                                                                                                                                                                                                    // Condition 
                                                                                                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat5_5, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat5_5))) {
                                                                                                                                                                                                        --isoSpace;
                                                                                                                                                                                                        goto label19;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    // negative pattern found
                                                                                                                                                                                                    --isoSpace;
                                                                                                                                                                                                    candidate_es_0_1_node_v14.lgspFlags = candidate_es_0_1_node_v14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v14;
                                                                                                                                                                                                    candidate_es_0_1_edge_c16.lgspFlags = candidate_es_0_1_edge_c16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c16;
                                                                                                                                                                                                    goto label20;
                                                                                                                                                                                                    --isoSpace;
                                                                                                                                                                                                }
label19: ;
                                                                                                                                                                                                // Extend Incoming es_0_1_edge_c17 from es_0_1_node_v11 
                                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c17 = candidate_es_0_1_node_v11.lgspInhead;
                                                                                                                                                                                                if(head_candidate_es_0_1_edge_c17 != null)
                                                                                                                                                                                                {
                                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c17 = head_candidate_es_0_1_edge_c17;
                                                                                                                                                                                                    do
                                                                                                                                                                                                    {
                                                                                                                                                                                                        if(candidate_es_0_1_edge_c17.lgspType.TypeID!=3) {
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if((candidate_es_0_1_edge_c17.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                        {
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        uint prev__candidate_es_0_1_edge_c17;
                                                                                                                                                                                                        prev__candidate_es_0_1_edge_c17 = candidate_es_0_1_edge_c17.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                        candidate_es_0_1_edge_c17.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                        // Implicit Source es_0_1_node_v16 from es_0_1_edge_c17 
                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v16 = candidate_es_0_1_edge_c17.lgspSource;
                                                                                                                                                                                                        if(candidate_es_0_1_node_v16.lgspType.TypeID!=36) {
                                                                                                                                                                                                            candidate_es_0_1_edge_c17.lgspFlags = candidate_es_0_1_edge_c17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c17;
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if((candidate_es_0_1_node_v16.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                        {
                                                                                                                                                                                                            candidate_es_0_1_edge_c17.lgspFlags = candidate_es_0_1_edge_c17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c17;
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        uint prev__candidate_es_0_1_node_v16;
                                                                                                                                                                                                        prev__candidate_es_0_1_node_v16 = candidate_es_0_1_node_v16.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                        candidate_es_0_1_node_v16.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat7_7 assigned from expression 0 
                                                                                                                                                                                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat7_7 = (System.Int32)0;
                                                                                                                                                                                                        // Element nac_NodesWithoutSites_node_src_inlined_pat7_7 assigned from other element es_0_1_node_v16 
                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat7_7 = candidate_es_0_1_node_v16;
                                                                                                                                                                                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat7_7.lgspType.TypeID]) {
                                                                                                                                                                                                            candidate_es_0_1_node_v16.lgspFlags = candidate_es_0_1_node_v16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v16;
                                                                                                                                                                                                            candidate_es_0_1_edge_c17.lgspFlags = candidate_es_0_1_edge_c17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c17;
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        // NegativePattern 
                                                                                                                                                                                                        {
                                                                                                                                                                                                            ++isoSpace;
                                                                                                                                                                                                            // Condition 
                                                                                                                                                                                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat7_7, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat7_7))) {
                                                                                                                                                                                                                --isoSpace;
                                                                                                                                                                                                                goto label21;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            // negative pattern found
                                                                                                                                                                                                            --isoSpace;
                                                                                                                                                                                                            candidate_es_0_1_node_v16.lgspFlags = candidate_es_0_1_node_v16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v16;
                                                                                                                                                                                                            candidate_es_0_1_edge_c17.lgspFlags = candidate_es_0_1_edge_c17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c17;
                                                                                                                                                                                                            goto label22;
                                                                                                                                                                                                            --isoSpace;
                                                                                                                                                                                                        }
label21: ;
                                                                                                                                                                                                        // Extend Incoming es_0_1_edge_c22 from es_0_1_node_v7 
                                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c22 = candidate_es_0_1_node_v7.lgspInhead;
                                                                                                                                                                                                        if(head_candidate_es_0_1_edge_c22 != null)
                                                                                                                                                                                                        {
                                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c22 = head_candidate_es_0_1_edge_c22;
                                                                                                                                                                                                            do
                                                                                                                                                                                                            {
                                                                                                                                                                                                                if(candidate_es_0_1_edge_c22.lgspType.TypeID!=5) {
                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if((candidate_es_0_1_edge_c22.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                uint prev__candidate_es_0_1_edge_c22;
                                                                                                                                                                                                                prev__candidate_es_0_1_edge_c22 = candidate_es_0_1_edge_c22.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                candidate_es_0_1_edge_c22.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                // Implicit Source es_0_1_node_v7_p0 from es_0_1_edge_c22 
                                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v7_p0 = candidate_es_0_1_edge_c22.lgspSource;
                                                                                                                                                                                                                if(candidate_es_0_1_node_v7_p0.lgspType.TypeID!=7) {
                                                                                                                                                                                                                    candidate_es_0_1_edge_c22.lgspFlags = candidate_es_0_1_edge_c22.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c22;
                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if((candidate_es_0_1_node_v7_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    candidate_es_0_1_edge_c22.lgspFlags = candidate_es_0_1_edge_c22.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c22;
                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                uint prev__candidate_es_0_1_node_v7_p0;
                                                                                                                                                                                                                prev__candidate_es_0_1_node_v7_p0 = candidate_es_0_1_node_v7_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                candidate_es_0_1_node_v7_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                // Condition 
                                                                                                                                                                                                                if(!((((GRGEN_MODEL.IBPort)candidate_es_0_1_node_v7_p0).@ix == 0))) {
                                                                                                                                                                                                                    candidate_es_0_1_node_v7_p0.lgspFlags = candidate_es_0_1_node_v7_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v7_p0;
                                                                                                                                                                                                                    candidate_es_0_1_edge_c22.lgspFlags = candidate_es_0_1_edge_c22.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c22;
                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                // Extend Outgoing es_0_1_edge__edge6 from es_0_1_node_v11_p0 
                                                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge__edge6 = candidate_es_0_1_node_v11_p0.lgspOuthead;
                                                                                                                                                                                                                if(head_candidate_es_0_1_edge__edge6 != null)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge__edge6 = head_candidate_es_0_1_edge__edge6;
                                                                                                                                                                                                                    do
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        if(candidate_es_0_1_edge__edge6.lgspType.TypeID!=7) {
                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        if((candidate_es_0_1_edge__edge6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        uint prev__candidate_es_0_1_edge__edge6;
                                                                                                                                                                                                                        prev__candidate_es_0_1_edge__edge6 = candidate_es_0_1_edge__edge6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                        candidate_es_0_1_edge__edge6.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                        // Implicit Target es_0_1_node_rn1 from es_0_1_edge__edge6 
                                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_es_0_1_node_rn1 = candidate_es_0_1_edge__edge6.lgspTarget;
                                                                                                                                                                                                                        if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_es_0_1_node_rn1.lgspType.TypeID]) {
                                                                                                                                                                                                                            candidate_es_0_1_edge__edge6.lgspFlags = candidate_es_0_1_edge__edge6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge6;
                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        if((candidate_es_0_1_node_rn1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            candidate_es_0_1_edge__edge6.lgspFlags = candidate_es_0_1_edge__edge6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge6;
                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        uint prev__candidate_es_0_1_node_rn1;
                                                                                                                                                                                                                        prev__candidate_es_0_1_node_rn1 = candidate_es_0_1_node_rn1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                        candidate_es_0_1_node_rn1.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                        // Extend Incoming es_0_1_edge_c20 from es_0_1_node_v12 
                                                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c20 = candidate_es_0_1_node_v12.lgspInhead;
                                                                                                                                                                                                                        if(head_candidate_es_0_1_edge_c20 != null)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c20 = head_candidate_es_0_1_edge_c20;
                                                                                                                                                                                                                            do
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                if(candidate_es_0_1_edge_c20.lgspType.TypeID!=3) {
                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                if((candidate_es_0_1_edge_c20.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                uint prev__candidate_es_0_1_edge_c20;
                                                                                                                                                                                                                                prev__candidate_es_0_1_edge_c20 = candidate_es_0_1_edge_c20.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                candidate_es_0_1_edge_c20.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                // Implicit Source es_0_1_node_v13 from es_0_1_edge_c20 
                                                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v13 = candidate_es_0_1_edge_c20.lgspSource;
                                                                                                                                                                                                                                if(candidate_es_0_1_node_v13.lgspType.TypeID!=22) {
                                                                                                                                                                                                                                    candidate_es_0_1_edge_c20.lgspFlags = candidate_es_0_1_edge_c20.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c20;
                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                if((candidate_es_0_1_node_v13.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    candidate_es_0_1_edge_c20.lgspFlags = candidate_es_0_1_edge_c20.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c20;
                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                uint prev__candidate_es_0_1_node_v13;
                                                                                                                                                                                                                                prev__candidate_es_0_1_node_v13 = candidate_es_0_1_node_v13.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                candidate_es_0_1_node_v13.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat6_6 assigned from expression 0 
                                                                                                                                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat6_6 = (System.Int32)0;
                                                                                                                                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat6_6 assigned from other element es_0_1_node_v13 
                                                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat6_6 = candidate_es_0_1_node_v13;
                                                                                                                                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat6_6.lgspType.TypeID]) {
                                                                                                                                                                                                                                    candidate_es_0_1_node_v13.lgspFlags = candidate_es_0_1_node_v13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v13;
                                                                                                                                                                                                                                    candidate_es_0_1_edge_c20.lgspFlags = candidate_es_0_1_edge_c20.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c20;
                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                // NegativePattern 
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    ++isoSpace;
                                                                                                                                                                                                                                    // Condition 
                                                                                                                                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat6_6, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat6_6))) {
                                                                                                                                                                                                                                        --isoSpace;
                                                                                                                                                                                                                                        goto label23;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    // negative pattern found
                                                                                                                                                                                                                                    --isoSpace;
                                                                                                                                                                                                                                    candidate_es_0_1_node_v13.lgspFlags = candidate_es_0_1_node_v13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v13;
                                                                                                                                                                                                                                    candidate_es_0_1_edge_c20.lgspFlags = candidate_es_0_1_edge_c20.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c20;
                                                                                                                                                                                                                                    goto label24;
                                                                                                                                                                                                                                    --isoSpace;
                                                                                                                                                                                                                                }
label23: ;
                                                                                                                                                                                                                                // Extend Incoming es_0_1_edge_c21 from es_0_1_node_v14 
                                                                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c21 = candidate_es_0_1_node_v14.lgspInhead;
                                                                                                                                                                                                                                if(head_candidate_es_0_1_edge_c21 != null)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c21 = head_candidate_es_0_1_edge_c21;
                                                                                                                                                                                                                                    do
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        if(candidate_es_0_1_edge_c21.lgspType.TypeID!=3) {
                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        if((candidate_es_0_1_edge_c21.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        // Implicit Source es_0_1_node_v15 from es_0_1_edge_c21 
                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v15 = candidate_es_0_1_edge_c21.lgspSource;
                                                                                                                                                                                                                                        if(candidate_es_0_1_node_v15.lgspType.TypeID!=35) {
                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        if((candidate_es_0_1_node_v15.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat9_9 assigned from expression 0 
                                                                                                                                                                                                                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat9_9 = (System.Int32)0;
                                                                                                                                                                                                                                        // Element nac_NodesWithoutSites_node_src_inlined_pat9_9 assigned from other element es_0_1_node_v15 
                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat9_9 = candidate_es_0_1_node_v15;
                                                                                                                                                                                                                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat9_9.lgspType.TypeID]) {
                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        // NegativePattern 
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            ++isoSpace;
                                                                                                                                                                                                                                            // Condition 
                                                                                                                                                                                                                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat9_9, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat9_9))) {
                                                                                                                                                                                                                                                --isoSpace;
                                                                                                                                                                                                                                                goto label25;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            // negative pattern found
                                                                                                                                                                                                                                            --isoSpace;
                                                                                                                                                                                                                                            goto label26;
                                                                                                                                                                                                                                            --isoSpace;
                                                                                                                                                                                                                                        }
label25: ;
                                                                                                                                                                                                                                        // Extend Outgoing es_0_1_edge__edge2 from es_0_1_node_v7_p0 
                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge__edge2 = candidate_es_0_1_node_v7_p0.lgspOuthead;
                                                                                                                                                                                                                                        if(head_candidate_es_0_1_edge__edge2 != null)
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge__edge2 = head_candidate_es_0_1_edge__edge2;
                                                                                                                                                                                                                                            do
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                if(candidate_es_0_1_edge__edge2.lgspType.TypeID!=7) {
                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                if((candidate_es_0_1_edge__edge2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                uint prev__candidate_es_0_1_edge__edge2;
                                                                                                                                                                                                                                                prev__candidate_es_0_1_edge__edge2 = candidate_es_0_1_edge__edge2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                candidate_es_0_1_edge__edge2.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                // Implicit Target es_0_1_node_e0 from es_0_1_edge__edge2 
                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_es_0_1_node_e0 = candidate_es_0_1_edge__edge2.lgspTarget;
                                                                                                                                                                                                                                                if(candidate_es_0_1_node_e0.lgspType.TypeID!=9) {
                                                                                                                                                                                                                                                    candidate_es_0_1_edge__edge2.lgspFlags = candidate_es_0_1_edge__edge2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge2;
                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                if((candidate_es_0_1_node_e0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    candidate_es_0_1_edge__edge2.lgspFlags = candidate_es_0_1_edge__edge2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge2;
                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                // Extend Incoming es_0_1_edge_c23 from es_0_1_node_v15 
                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge_c23 = candidate_es_0_1_node_v15.lgspInhead;
                                                                                                                                                                                                                                                if(head_candidate_es_0_1_edge_c23 != null)
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge_c23 = head_candidate_es_0_1_edge_c23;
                                                                                                                                                                                                                                                    do
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        if(candidate_es_0_1_edge_c23.lgspType.TypeID!=5) {
                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        if((candidate_es_0_1_edge_c23.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        // Implicit Source es_0_1_node_v15_p0 from es_0_1_edge_c23 
                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_es_0_1_node_v15_p0 = candidate_es_0_1_edge_c23.lgspSource;
                                                                                                                                                                                                                                                        if(candidate_es_0_1_node_v15_p0.lgspType.TypeID!=7) {
                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        if((candidate_es_0_1_node_v15_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        // Condition 
                                                                                                                                                                                                                                                        if(!((((GRGEN_MODEL.IBPort)candidate_es_0_1_node_v15_p0).@ix == 0))) {
                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        // Extend Outgoing es_0_1_edge__edge3 from es_0_1_node_v15_p0 
                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_es_0_1_edge__edge3 = candidate_es_0_1_node_v15_p0.lgspOuthead;
                                                                                                                                                                                                                                                        if(head_candidate_es_0_1_edge__edge3 != null)
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_es_0_1_edge__edge3 = head_candidate_es_0_1_edge__edge3;
                                                                                                                                                                                                                                                            do
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                if(candidate_es_0_1_edge__edge3.lgspType.TypeID!=7) {
                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                if(candidate_es_0_1_edge__edge3.lgspTarget != candidate_es_0_1_node_e0) {
                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                if((candidate_es_0_1_edge__edge3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                Rule_es_0_1.Match_es_0_1 match = matches.GetNextUnfilledPosition();
                                                                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat0 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                match_pat0.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat1 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                match_pat1.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat2 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                match_pat2.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat3 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                match_pat3.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat4 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                match_pat4.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat5 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                match_pat5.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat6 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                match_pat6.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat7 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                match_pat7.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat8 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                match_pat8.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat9 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                match_pat9.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat10 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                match_pat10.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat11 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                match_pat11.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat12 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                match_pat12.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                match._node_v0 = candidate_es_0_1_node_v0;
                                                                                                                                                                                                                                                                match._node_r0 = candidate_es_0_1_node_r0;
                                                                                                                                                                                                                                                                match._node_v9 = candidate_es_0_1_node_v9;
                                                                                                                                                                                                                                                                match._node_v0_p0 = candidate_es_0_1_node_v0_p0;
                                                                                                                                                                                                                                                                match._node_v1 = candidate_es_0_1_node_v1;
                                                                                                                                                                                                                                                                match._node_v2 = candidate_es_0_1_node_v2;
                                                                                                                                                                                                                                                                match._node_v9_p0 = candidate_es_0_1_node_v9_p0;
                                                                                                                                                                                                                                                                match._node_v10 = candidate_es_0_1_node_v10;
                                                                                                                                                                                                                                                                match._node_v1_p0 = candidate_es_0_1_node_v1_p0;
                                                                                                                                                                                                                                                                match._node_v3 = candidate_es_0_1_node_v3;
                                                                                                                                                                                                                                                                match._node_v11 = candidate_es_0_1_node_v11;
                                                                                                                                                                                                                                                                match._node_v3_p0 = candidate_es_0_1_node_v3_p0;
                                                                                                                                                                                                                                                                match._node_v4 = candidate_es_0_1_node_v4;
                                                                                                                                                                                                                                                                match._node_v6 = candidate_es_0_1_node_v6;
                                                                                                                                                                                                                                                                match._node_v8 = candidate_es_0_1_node_v8;
                                                                                                                                                                                                                                                                match._node_v11_p0 = candidate_es_0_1_node_v11_p0;
                                                                                                                                                                                                                                                                match._node_v12 = candidate_es_0_1_node_v12;
                                                                                                                                                                                                                                                                match._node_v14 = candidate_es_0_1_node_v14;
                                                                                                                                                                                                                                                                match._node_v16 = candidate_es_0_1_node_v16;
                                                                                                                                                                                                                                                                match._node_v5 = candidate_es_0_1_node_v5;
                                                                                                                                                                                                                                                                match._node_v7 = candidate_es_0_1_node_v7;
                                                                                                                                                                                                                                                                match._node_v13 = candidate_es_0_1_node_v13;
                                                                                                                                                                                                                                                                match._node_v15 = candidate_es_0_1_node_v15;
                                                                                                                                                                                                                                                                match._node_v7_p0 = candidate_es_0_1_node_v7_p0;
                                                                                                                                                                                                                                                                match._node_v15_p0 = candidate_es_0_1_node_v15_p0;
                                                                                                                                                                                                                                                                match._node_left = candidate_es_0_1_node_left;
                                                                                                                                                                                                                                                                match._node_rn0 = candidate_es_0_1_node_rn0;
                                                                                                                                                                                                                                                                match._node_e0 = candidate_es_0_1_node_e0;
                                                                                                                                                                                                                                                                match._node_right = candidate_es_0_1_node_right;
                                                                                                                                                                                                                                                                match._node_rn1 = candidate_es_0_1_node_rn1;
                                                                                                                                                                                                                                                                match_pat0._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat0_0;
                                                                                                                                                                                                                                                                match_pat1._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat1_1;
                                                                                                                                                                                                                                                                match_pat2._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat2_2;
                                                                                                                                                                                                                                                                match_pat3._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat3_3;
                                                                                                                                                                                                                                                                match_pat4._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat4_4;
                                                                                                                                                                                                                                                                match_pat5._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat5_5;
                                                                                                                                                                                                                                                                match_pat6._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat6_6;
                                                                                                                                                                                                                                                                match_pat7._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat7_7;
                                                                                                                                                                                                                                                                match_pat8._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat8_8;
                                                                                                                                                                                                                                                                match_pat9._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat9_9;
                                                                                                                                                                                                                                                                match_pat10._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat10_10;
                                                                                                                                                                                                                                                                match_pat11._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat11_11;
                                                                                                                                                                                                                                                                match_pat12._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat12_12;
                                                                                                                                                                                                                                                                match._edge_c0 = candidate_es_0_1_edge_c0;
                                                                                                                                                                                                                                                                match._edge_c1 = candidate_es_0_1_edge_c1;
                                                                                                                                                                                                                                                                match._edge_c2 = candidate_es_0_1_edge_c2;
                                                                                                                                                                                                                                                                match._edge_c3 = candidate_es_0_1_edge_c3;
                                                                                                                                                                                                                                                                match._edge_c4 = candidate_es_0_1_edge_c4;
                                                                                                                                                                                                                                                                match._edge_c5 = candidate_es_0_1_edge_c5;
                                                                                                                                                                                                                                                                match._edge_c6 = candidate_es_0_1_edge_c6;
                                                                                                                                                                                                                                                                match._edge_c7 = candidate_es_0_1_edge_c7;
                                                                                                                                                                                                                                                                match._edge_c8 = candidate_es_0_1_edge_c8;
                                                                                                                                                                                                                                                                match._edge_c9 = candidate_es_0_1_edge_c9;
                                                                                                                                                                                                                                                                match._edge_c10 = candidate_es_0_1_edge_c10;
                                                                                                                                                                                                                                                                match._edge_c11 = candidate_es_0_1_edge_c11;
                                                                                                                                                                                                                                                                match._edge_c12 = candidate_es_0_1_edge_c12;
                                                                                                                                                                                                                                                                match._edge_c13 = candidate_es_0_1_edge_c13;
                                                                                                                                                                                                                                                                match._edge_c14 = candidate_es_0_1_edge_c14;
                                                                                                                                                                                                                                                                match._edge_c15 = candidate_es_0_1_edge_c15;
                                                                                                                                                                                                                                                                match._edge_c16 = candidate_es_0_1_edge_c16;
                                                                                                                                                                                                                                                                match._edge_c17 = candidate_es_0_1_edge_c17;
                                                                                                                                                                                                                                                                match._edge_c18 = candidate_es_0_1_edge_c18;
                                                                                                                                                                                                                                                                match._edge_c19 = candidate_es_0_1_edge_c19;
                                                                                                                                                                                                                                                                match._edge_c20 = candidate_es_0_1_edge_c20;
                                                                                                                                                                                                                                                                match._edge_c21 = candidate_es_0_1_edge_c21;
                                                                                                                                                                                                                                                                match._edge_c22 = candidate_es_0_1_edge_c22;
                                                                                                                                                                                                                                                                match._edge_c23 = candidate_es_0_1_edge_c23;
                                                                                                                                                                                                                                                                match._edge__edge0 = candidate_es_0_1_edge__edge0;
                                                                                                                                                                                                                                                                match._edge__edge1 = candidate_es_0_1_edge__edge1;
                                                                                                                                                                                                                                                                match._edge__edge2 = candidate_es_0_1_edge__edge2;
                                                                                                                                                                                                                                                                match._edge__edge3 = candidate_es_0_1_edge__edge3;
                                                                                                                                                                                                                                                                match._edge__edge4 = candidate_es_0_1_edge__edge4;
                                                                                                                                                                                                                                                                match._edge__edge5 = candidate_es_0_1_edge__edge5;
                                                                                                                                                                                                                                                                match._edge__edge6 = candidate_es_0_1_edge__edge6;
                                                                                                                                                                                                                                                                match_pat0._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat0_0;
                                                                                                                                                                                                                                                                match_pat1._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat1_1;
                                                                                                                                                                                                                                                                match_pat2._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat2_2;
                                                                                                                                                                                                                                                                match_pat3._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat3_3;
                                                                                                                                                                                                                                                                match_pat4._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat4_4;
                                                                                                                                                                                                                                                                match_pat5._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat5_5;
                                                                                                                                                                                                                                                                match_pat6._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat6_6;
                                                                                                                                                                                                                                                                match_pat7._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat7_7;
                                                                                                                                                                                                                                                                match_pat8._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat8_8;
                                                                                                                                                                                                                                                                match_pat9._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat9_9;
                                                                                                                                                                                                                                                                match_pat10._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat10_10;
                                                                                                                                                                                                                                                                match_pat11._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat11_11;
                                                                                                                                                                                                                                                                match_pat12._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat12_12;
                                                                                                                                                                                                                                                                match._pat0 = match_pat0;
                                                                                                                                                                                                                                                                match._pat1 = match_pat1;
                                                                                                                                                                                                                                                                match._pat2 = match_pat2;
                                                                                                                                                                                                                                                                match._pat3 = match_pat3;
                                                                                                                                                                                                                                                                match._pat4 = match_pat4;
                                                                                                                                                                                                                                                                match._pat5 = match_pat5;
                                                                                                                                                                                                                                                                match._pat6 = match_pat6;
                                                                                                                                                                                                                                                                match._pat7 = match_pat7;
                                                                                                                                                                                                                                                                match._pat8 = match_pat8;
                                                                                                                                                                                                                                                                match._pat9 = match_pat9;
                                                                                                                                                                                                                                                                match._pat10 = match_pat10;
                                                                                                                                                                                                                                                                match._pat11 = match_pat11;
                                                                                                                                                                                                                                                                match._pat12 = match_pat12;
                                                                                                                                                                                                                                                                matches.PositionWasFilledFixIt();
                                                                                                                                                                                                                                                                // if enough matches were found, we leave
                                                                                                                                                                                                                                                                if(maxMatches > 0 && matches.Count >= maxMatches)
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v15_p0.MoveOutHeadAfter(candidate_es_0_1_edge__edge3);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v15.MoveInHeadAfter(candidate_es_0_1_edge_c23);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v7_p0.MoveOutHeadAfter(candidate_es_0_1_edge__edge2);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v14.MoveInHeadAfter(candidate_es_0_1_edge_c21);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v12.MoveInHeadAfter(candidate_es_0_1_edge_c20);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v11_p0.MoveOutHeadAfter(candidate_es_0_1_edge__edge6);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v7.MoveInHeadAfter(candidate_es_0_1_edge_c22);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v11.MoveInHeadAfter(candidate_es_0_1_edge_c17);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v11.MoveInHeadAfter(candidate_es_0_1_edge_c16);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v11.MoveInHeadAfter(candidate_es_0_1_edge_c15);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v11.MoveInHeadAfter(candidate_es_0_1_edge_c14);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v6.MoveInHeadAfter(candidate_es_0_1_edge_c19);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v4.MoveInHeadAfter(candidate_es_0_1_edge_c18);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v3_p0.MoveOutHeadAfter(candidate_es_0_1_edge__edge1);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v10.MoveInHeadAfter(candidate_es_0_1_edge_c9);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v9_p0.MoveOutHeadAfter(candidate_es_0_1_edge__edge4);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v3.MoveInHeadAfter(candidate_es_0_1_edge_c13);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v3.MoveInHeadAfter(candidate_es_0_1_edge_c12);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v3.MoveInHeadAfter(candidate_es_0_1_edge_c11);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v3.MoveInHeadAfter(candidate_es_0_1_edge_c10);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v1_p0.MoveOutHeadAfter(candidate_es_0_1_edge__edge5);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v9.MoveInHeadAfter(candidate_es_0_1_edge_c6);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v9.MoveInHeadAfter(candidate_es_0_1_edge_c5);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v2.MoveInHeadAfter(candidate_es_0_1_edge_c8);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v1.MoveInHeadAfter(candidate_es_0_1_edge_c7);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v0_p0.MoveOutHeadAfter(candidate_es_0_1_edge__edge0);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_r0.MoveInHeadAfter(candidate_es_0_1_edge_c1);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v0.MoveInHeadAfter(candidate_es_0_1_edge_c4);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v0.MoveInHeadAfter(candidate_es_0_1_edge_c3);
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v0.MoveInHeadAfter(candidate_es_0_1_edge_c2);
                                                                                                                                                                                                                                                                    graph.MoveHeadAfter(candidate_es_0_1_edge_c0);
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge__edge2.lgspFlags = candidate_es_0_1_edge__edge2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge2;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v13.lgspFlags = candidate_es_0_1_node_v13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v13;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c20.lgspFlags = candidate_es_0_1_edge_c20.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c20;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_rn1.lgspFlags = candidate_es_0_1_node_rn1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_rn1;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge__edge6.lgspFlags = candidate_es_0_1_edge__edge6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge6;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v7_p0.lgspFlags = candidate_es_0_1_node_v7_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v7_p0;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c22.lgspFlags = candidate_es_0_1_edge_c22.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c22;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v16.lgspFlags = candidate_es_0_1_node_v16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v16;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c17.lgspFlags = candidate_es_0_1_edge_c17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c17;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v14.lgspFlags = candidate_es_0_1_node_v14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v14;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c16.lgspFlags = candidate_es_0_1_edge_c16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c16;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v12.lgspFlags = candidate_es_0_1_node_v12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v12;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c15.lgspFlags = candidate_es_0_1_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c15;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v11_p0.lgspFlags = candidate_es_0_1_node_v11_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v11_p0;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c14.lgspFlags = candidate_es_0_1_edge_c14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c14;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v7.lgspFlags = candidate_es_0_1_node_v7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v7;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c19.lgspFlags = candidate_es_0_1_edge_c19.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c19;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v5.lgspFlags = candidate_es_0_1_node_v5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v5;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c18.lgspFlags = candidate_es_0_1_edge_c18.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c18;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_rn0.lgspFlags = candidate_es_0_1_node_rn0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_rn0;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge__edge1.lgspFlags = candidate_es_0_1_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge1;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v11.lgspFlags = candidate_es_0_1_node_v11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v11;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c9.lgspFlags = candidate_es_0_1_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c9;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_right.lgspFlags = candidate_es_0_1_node_right.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_right;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge__edge4.lgspFlags = candidate_es_0_1_edge__edge4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge4;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v8.lgspFlags = candidate_es_0_1_node_v8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v8;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c13.lgspFlags = candidate_es_0_1_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c13;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v6.lgspFlags = candidate_es_0_1_node_v6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v6;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c12.lgspFlags = candidate_es_0_1_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c12;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v4.lgspFlags = candidate_es_0_1_node_v4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v4;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c11.lgspFlags = candidate_es_0_1_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c11;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v3_p0.lgspFlags = candidate_es_0_1_node_v3_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v3_p0;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c10.lgspFlags = candidate_es_0_1_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c10;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge__edge5.lgspFlags = candidate_es_0_1_edge__edge5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge5;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v10.lgspFlags = candidate_es_0_1_node_v10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v10;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c6.lgspFlags = candidate_es_0_1_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c6;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v9_p0.lgspFlags = candidate_es_0_1_node_v9_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v9_p0;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c5.lgspFlags = candidate_es_0_1_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c5;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v3.lgspFlags = candidate_es_0_1_node_v3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v3;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c8.lgspFlags = candidate_es_0_1_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c8;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v1_p0.lgspFlags = candidate_es_0_1_node_v1_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v1_p0;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c7.lgspFlags = candidate_es_0_1_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c7;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_left.lgspFlags = candidate_es_0_1_node_left.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_left;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge__edge0.lgspFlags = candidate_es_0_1_edge__edge0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge0;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v9.lgspFlags = candidate_es_0_1_node_v9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v9;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c1.lgspFlags = candidate_es_0_1_edge_c1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c1;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v2.lgspFlags = candidate_es_0_1_node_v2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v2;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c4.lgspFlags = candidate_es_0_1_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c4;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v1.lgspFlags = candidate_es_0_1_node_v1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v1;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c3.lgspFlags = candidate_es_0_1_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c3;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v0_p0.lgspFlags = candidate_es_0_1_node_v0_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v0_p0;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c2.lgspFlags = candidate_es_0_1_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c2;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_r0.lgspFlags = candidate_es_0_1_node_r0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_r0;
                                                                                                                                                                                                                                                                    candidate_es_0_1_node_v0.lgspFlags = candidate_es_0_1_node_v0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v0;
                                                                                                                                                                                                                                                                    candidate_es_0_1_edge_c0.lgspFlags = candidate_es_0_1_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c0;
                                                                                                                                                                                                                                                                    return matches;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            while( (candidate_es_0_1_edge__edge3 = candidate_es_0_1_edge__edge3.lgspOutNext) != head_candidate_es_0_1_edge__edge3 );
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    while( (candidate_es_0_1_edge_c23 = candidate_es_0_1_edge_c23.lgspInNext) != head_candidate_es_0_1_edge_c23 );
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                candidate_es_0_1_edge__edge2.lgspFlags = candidate_es_0_1_edge__edge2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge2;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            while( (candidate_es_0_1_edge__edge2 = candidate_es_0_1_edge__edge2.lgspOutNext) != head_candidate_es_0_1_edge__edge2 );
                                                                                                                                                                                                                                        }
label26: ;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    while( (candidate_es_0_1_edge_c21 = candidate_es_0_1_edge_c21.lgspInNext) != head_candidate_es_0_1_edge_c21 );
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                candidate_es_0_1_node_v13.lgspFlags = candidate_es_0_1_node_v13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v13;
                                                                                                                                                                                                                                candidate_es_0_1_edge_c20.lgspFlags = candidate_es_0_1_edge_c20.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c20;
label24: ;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            while( (candidate_es_0_1_edge_c20 = candidate_es_0_1_edge_c20.lgspInNext) != head_candidate_es_0_1_edge_c20 );
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        candidate_es_0_1_node_rn1.lgspFlags = candidate_es_0_1_node_rn1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_rn1;
                                                                                                                                                                                                                        candidate_es_0_1_edge__edge6.lgspFlags = candidate_es_0_1_edge__edge6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge6;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    while( (candidate_es_0_1_edge__edge6 = candidate_es_0_1_edge__edge6.lgspOutNext) != head_candidate_es_0_1_edge__edge6 );
                                                                                                                                                                                                                }
                                                                                                                                                                                                                candidate_es_0_1_node_v7_p0.lgspFlags = candidate_es_0_1_node_v7_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v7_p0;
                                                                                                                                                                                                                candidate_es_0_1_edge_c22.lgspFlags = candidate_es_0_1_edge_c22.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c22;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            while( (candidate_es_0_1_edge_c22 = candidate_es_0_1_edge_c22.lgspInNext) != head_candidate_es_0_1_edge_c22 );
                                                                                                                                                                                                        }
                                                                                                                                                                                                        candidate_es_0_1_node_v16.lgspFlags = candidate_es_0_1_node_v16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v16;
                                                                                                                                                                                                        candidate_es_0_1_edge_c17.lgspFlags = candidate_es_0_1_edge_c17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c17;
label22: ;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    while( (candidate_es_0_1_edge_c17 = candidate_es_0_1_edge_c17.lgspInNext) != head_candidate_es_0_1_edge_c17 );
                                                                                                                                                                                                }
                                                                                                                                                                                                candidate_es_0_1_node_v14.lgspFlags = candidate_es_0_1_node_v14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v14;
                                                                                                                                                                                                candidate_es_0_1_edge_c16.lgspFlags = candidate_es_0_1_edge_c16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c16;
label20: ;
                                                                                                                                                                                            }
                                                                                                                                                                                            while( (candidate_es_0_1_edge_c16 = candidate_es_0_1_edge_c16.lgspInNext) != head_candidate_es_0_1_edge_c16 );
                                                                                                                                                                                        }
                                                                                                                                                                                        candidate_es_0_1_node_v12.lgspFlags = candidate_es_0_1_node_v12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v12;
                                                                                                                                                                                        candidate_es_0_1_edge_c15.lgspFlags = candidate_es_0_1_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c15;
label18: ;
                                                                                                                                                                                    }
                                                                                                                                                                                    while( (candidate_es_0_1_edge_c15 = candidate_es_0_1_edge_c15.lgspInNext) != head_candidate_es_0_1_edge_c15 );
                                                                                                                                                                                }
                                                                                                                                                                                candidate_es_0_1_node_v11_p0.lgspFlags = candidate_es_0_1_node_v11_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v11_p0;
                                                                                                                                                                                candidate_es_0_1_edge_c14.lgspFlags = candidate_es_0_1_edge_c14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c14;
                                                                                                                                                                            }
                                                                                                                                                                            while( (candidate_es_0_1_edge_c14 = candidate_es_0_1_edge_c14.lgspInNext) != head_candidate_es_0_1_edge_c14 );
                                                                                                                                                                        }
                                                                                                                                                                        candidate_es_0_1_node_v7.lgspFlags = candidate_es_0_1_node_v7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v7;
                                                                                                                                                                        candidate_es_0_1_edge_c19.lgspFlags = candidate_es_0_1_edge_c19.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c19;
label16: ;
                                                                                                                                                                    }
                                                                                                                                                                    while( (candidate_es_0_1_edge_c19 = candidate_es_0_1_edge_c19.lgspInNext) != head_candidate_es_0_1_edge_c19 );
                                                                                                                                                                }
                                                                                                                                                                candidate_es_0_1_node_v5.lgspFlags = candidate_es_0_1_node_v5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v5;
                                                                                                                                                                candidate_es_0_1_edge_c18.lgspFlags = candidate_es_0_1_edge_c18.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c18;
label14: ;
                                                                                                                                                            }
                                                                                                                                                            while( (candidate_es_0_1_edge_c18 = candidate_es_0_1_edge_c18.lgspInNext) != head_candidate_es_0_1_edge_c18 );
                                                                                                                                                        }
                                                                                                                                                        candidate_es_0_1_node_rn0.lgspFlags = candidate_es_0_1_node_rn0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_rn0;
                                                                                                                                                        candidate_es_0_1_edge__edge1.lgspFlags = candidate_es_0_1_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge1;
                                                                                                                                                    }
                                                                                                                                                    while( (candidate_es_0_1_edge__edge1 = candidate_es_0_1_edge__edge1.lgspOutNext) != head_candidate_es_0_1_edge__edge1 );
                                                                                                                                                }
                                                                                                                                                candidate_es_0_1_node_v11.lgspFlags = candidate_es_0_1_node_v11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v11;
                                                                                                                                                candidate_es_0_1_edge_c9.lgspFlags = candidate_es_0_1_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c9;
                                                                                                                                            }
                                                                                                                                            while( (candidate_es_0_1_edge_c9 = candidate_es_0_1_edge_c9.lgspInNext) != head_candidate_es_0_1_edge_c9 );
                                                                                                                                        }
                                                                                                                                        candidate_es_0_1_node_right.lgspFlags = candidate_es_0_1_node_right.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_right;
                                                                                                                                        candidate_es_0_1_edge__edge4.lgspFlags = candidate_es_0_1_edge__edge4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge4;
                                                                                                                                    }
                                                                                                                                    while( (candidate_es_0_1_edge__edge4 = candidate_es_0_1_edge__edge4.lgspOutNext) != head_candidate_es_0_1_edge__edge4 );
                                                                                                                                }
                                                                                                                                candidate_es_0_1_node_v8.lgspFlags = candidate_es_0_1_node_v8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v8;
                                                                                                                                candidate_es_0_1_edge_c13.lgspFlags = candidate_es_0_1_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c13;
label12: ;
                                                                                                                            }
                                                                                                                            while( (candidate_es_0_1_edge_c13 = candidate_es_0_1_edge_c13.lgspInNext) != head_candidate_es_0_1_edge_c13 );
                                                                                                                        }
                                                                                                                        candidate_es_0_1_node_v6.lgspFlags = candidate_es_0_1_node_v6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v6;
                                                                                                                        candidate_es_0_1_edge_c12.lgspFlags = candidate_es_0_1_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c12;
label10: ;
                                                                                                                    }
                                                                                                                    while( (candidate_es_0_1_edge_c12 = candidate_es_0_1_edge_c12.lgspInNext) != head_candidate_es_0_1_edge_c12 );
                                                                                                                }
                                                                                                                candidate_es_0_1_node_v4.lgspFlags = candidate_es_0_1_node_v4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v4;
                                                                                                                candidate_es_0_1_edge_c11.lgspFlags = candidate_es_0_1_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c11;
label8: ;
                                                                                                            }
                                                                                                            while( (candidate_es_0_1_edge_c11 = candidate_es_0_1_edge_c11.lgspInNext) != head_candidate_es_0_1_edge_c11 );
                                                                                                        }
                                                                                                        candidate_es_0_1_node_v3_p0.lgspFlags = candidate_es_0_1_node_v3_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v3_p0;
                                                                                                        candidate_es_0_1_edge_c10.lgspFlags = candidate_es_0_1_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c10;
                                                                                                    }
                                                                                                    while( (candidate_es_0_1_edge_c10 = candidate_es_0_1_edge_c10.lgspInNext) != head_candidate_es_0_1_edge_c10 );
                                                                                                }
                                                                                                candidate_es_0_1_edge__edge5.lgspFlags = candidate_es_0_1_edge__edge5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge5;
                                                                                            }
                                                                                            while( (candidate_es_0_1_edge__edge5 = candidate_es_0_1_edge__edge5.lgspOutNext) != head_candidate_es_0_1_edge__edge5 );
                                                                                        }
                                                                                        candidate_es_0_1_node_v10.lgspFlags = candidate_es_0_1_node_v10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v10;
                                                                                        candidate_es_0_1_edge_c6.lgspFlags = candidate_es_0_1_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c6;
label6: ;
                                                                                    }
                                                                                    while( (candidate_es_0_1_edge_c6 = candidate_es_0_1_edge_c6.lgspInNext) != head_candidate_es_0_1_edge_c6 );
                                                                                }
                                                                                candidate_es_0_1_node_v9_p0.lgspFlags = candidate_es_0_1_node_v9_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v9_p0;
                                                                                candidate_es_0_1_edge_c5.lgspFlags = candidate_es_0_1_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c5;
                                                                            }
                                                                            while( (candidate_es_0_1_edge_c5 = candidate_es_0_1_edge_c5.lgspInNext) != head_candidate_es_0_1_edge_c5 );
                                                                        }
                                                                        candidate_es_0_1_node_v3.lgspFlags = candidate_es_0_1_node_v3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v3;
                                                                        candidate_es_0_1_edge_c8.lgspFlags = candidate_es_0_1_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c8;
                                                                    }
                                                                    while( (candidate_es_0_1_edge_c8 = candidate_es_0_1_edge_c8.lgspInNext) != head_candidate_es_0_1_edge_c8 );
                                                                }
                                                                candidate_es_0_1_node_v1_p0.lgspFlags = candidate_es_0_1_node_v1_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v1_p0;
                                                                candidate_es_0_1_edge_c7.lgspFlags = candidate_es_0_1_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c7;
                                                            }
                                                            while( (candidate_es_0_1_edge_c7 = candidate_es_0_1_edge_c7.lgspInNext) != head_candidate_es_0_1_edge_c7 );
                                                        }
                                                        candidate_es_0_1_node_left.lgspFlags = candidate_es_0_1_node_left.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_left;
                                                        candidate_es_0_1_edge__edge0.lgspFlags = candidate_es_0_1_edge__edge0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge__edge0;
                                                    }
                                                    while( (candidate_es_0_1_edge__edge0 = candidate_es_0_1_edge__edge0.lgspOutNext) != head_candidate_es_0_1_edge__edge0 );
                                                }
                                                candidate_es_0_1_node_v9.lgspFlags = candidate_es_0_1_node_v9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v9;
                                                candidate_es_0_1_edge_c1.lgspFlags = candidate_es_0_1_edge_c1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c1;
                                            }
                                            while( (candidate_es_0_1_edge_c1 = candidate_es_0_1_edge_c1.lgspInNext) != head_candidate_es_0_1_edge_c1 );
                                        }
                                        candidate_es_0_1_node_v2.lgspFlags = candidate_es_0_1_node_v2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v2;
                                        candidate_es_0_1_edge_c4.lgspFlags = candidate_es_0_1_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c4;
label4: ;
                                    }
                                    while( (candidate_es_0_1_edge_c4 = candidate_es_0_1_edge_c4.lgspInNext) != head_candidate_es_0_1_edge_c4 );
                                }
                                candidate_es_0_1_node_v1.lgspFlags = candidate_es_0_1_node_v1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v1;
                                candidate_es_0_1_edge_c3.lgspFlags = candidate_es_0_1_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c3;
label2: ;
                            }
                            while( (candidate_es_0_1_edge_c3 = candidate_es_0_1_edge_c3.lgspInNext) != head_candidate_es_0_1_edge_c3 );
                        }
                        candidate_es_0_1_node_v0_p0.lgspFlags = candidate_es_0_1_node_v0_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v0_p0;
                        candidate_es_0_1_edge_c2.lgspFlags = candidate_es_0_1_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c2;
                    }
                    while( (candidate_es_0_1_edge_c2 = candidate_es_0_1_edge_c2.lgspInNext) != head_candidate_es_0_1_edge_c2 );
                }
                candidate_es_0_1_node_r0.lgspFlags = candidate_es_0_1_node_r0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_r0;
                candidate_es_0_1_node_v0.lgspFlags = candidate_es_0_1_node_v0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_node_v0;
                candidate_es_0_1_edge_c0.lgspFlags = candidate_es_0_1_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_es_0_1_edge_c0;
            }
            return matches;
        }
        /// <summary> Type of the matcher method (with parameters processing environment containing host graph, maximum number of matches to search for (zero=unlimited), and rule parameters; returning found matches). </summary>
        public delegate GRGEN_LIBGR.IMatchesExact<Rule_es_0_1.IMatch_es_0_1> MatchInvoker(GRGEN_LGSP.LGSPActionExecutionEnvironment actionEnv, int maxMatches);
        /// <summary> A delegate pointing to the current matcher program for this rule. </summary>
        public MatchInvoker DynamicMatch;
        /// <summary> The RulePattern object from which this LGSPAction object has been created. </summary>
        public GRGEN_LIBGR.IRulePattern RulePattern { get { return _rulePattern; } }
        public GRGEN_LIBGR.IMatchesExact<Rule_es_0_1.IMatch_es_0_1> Match(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int maxMatches)
        {
            return DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, maxMatches);
        }
        public void Modify(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, Rule_es_0_1.IMatch_es_0_1 match)
        {
            _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, match);
        }
        public void ModifyAll(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatchesExact<Rule_es_0_1.IMatch_es_0_1> matches)
        {
            foreach(Rule_es_0_1.IMatch_es_0_1 match in matches)
            {
                
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, match);
            }
        }
        public bool Apply(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_es_0_1.IMatch_es_0_1> matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
            if(matches.Count <= 0) return false;
            _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, matches.First);
            return true;
        }
        public int ApplyAll(int maxMatches, GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_es_0_1.IMatch_es_0_1> matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, maxMatches);
            if(matches.Count <= 0) return 0;
            foreach(Rule_es_0_1.IMatch_es_0_1 match in matches)
            {
                
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, match);
            }
            return matches.Count;
        }
        public bool ApplyStar(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_es_0_1.IMatch_es_0_1> matches;
            
            while(true)
            {
                matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
                if(matches.Count <= 0) return true;
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, matches.First);
            }
        }
        public bool ApplyPlus(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_es_0_1.IMatch_es_0_1> matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
            if(matches.Count <= 0) return false;
            
            do
            {
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, matches.First);
                matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
            }
            while(matches.Count > 0) ;
            return true;
        }
        public bool ApplyMinMax(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int min, int max)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_es_0_1.IMatch_es_0_1> matches;
            
            for(int i = 0; i < max; i++)
            {
                matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
                if(matches.Count <= 0) return i >= min;
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, matches.First);
            }
            return true;
        }
        // implementation of inexact action interface by delegation to exact action interface
        public GRGEN_LIBGR.IMatches Match(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int maxMatches, object[] parameters)
        {
            return Match(actionEnv, maxMatches);
        }
        public object[] Modify(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatch match)
        {
            
            Modify(actionEnv, (Rule_es_0_1.IMatch_es_0_1)match);
            return ReturnArray;
        }
        public List<object[]> ModifyAll(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatches matches)
        {
            ModifyAll(actionEnv, (GRGEN_LIBGR.IMatchesExact<Rule_es_0_1.IMatch_es_0_1>)matches);
            while(AvailableReturnArrays.Count < matches.Count) AvailableReturnArrays.Add(new object[0]);
            ReturnArrayListForAll.Clear();
            for(int i=0; i<matches.Count; ++i)
            {
                ReturnArrayListForAll.Add(AvailableReturnArrays[i]);
            }
            return ReturnArrayListForAll;
        }
        object[] GRGEN_LIBGR.IAction.Apply(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            
            if(Apply(actionEnv)) {
                return ReturnArray;
            }
            else return null;
        }
        object[] GRGEN_LIBGR.IAction.Apply(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, params object[] parameters)
        {
            
            if(Apply(actionEnv)) {
                return ReturnArray;
            }
            else return null;
        }
        public List<object[]> Reserve(int numReturns)
        {
            if(AvailableReturnArrays == null)
                AvailableReturnArrays = new List<object[]>();
            while(AvailableReturnArrays.Count < numReturns) AvailableReturnArrays.Add(new object[0]);
            if(ReturnArrayListForAll == null)
                ReturnArrayListForAll = new List<object[]>();
            ReturnArrayListForAll.Clear();
            for(int i=0; i<numReturns; ++i)
            {
                ReturnArrayListForAll.Add(AvailableReturnArrays[i]);
            }
            return ReturnArrayListForAll;
        }
        List<object[]> GRGEN_LIBGR.IAction.ApplyAll(int maxMatches, GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            int matchesCount = ApplyAll(maxMatches, actionEnv);
            while(AvailableReturnArrays.Count < matchesCount) AvailableReturnArrays.Add(new object[0]);
            ReturnArrayListForAll.Clear();
            for(int i=0; i<matchesCount; ++i)
            {
                ReturnArrayListForAll.Add(AvailableReturnArrays[i]);
            }
            return ReturnArrayListForAll;
        }
        List<object[]> GRGEN_LIBGR.IAction.ApplyAll(int maxMatches, GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, params object[] parameters)
        {
            int matchesCount = ApplyAll(maxMatches, actionEnv);
            while(AvailableReturnArrays.Count < matchesCount) AvailableReturnArrays.Add(new object[0]);
            ReturnArrayListForAll.Clear();
            for(int i=0; i<matchesCount; ++i)
            {
                ReturnArrayListForAll.Add(AvailableReturnArrays[i]);
            }
            return ReturnArrayListForAll;
        }
        bool GRGEN_LIBGR.IAction.ApplyStar(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            return ApplyStar(actionEnv);
        }
        bool GRGEN_LIBGR.IAction.ApplyStar(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, params object[] parameters)
        {
            return ApplyStar(actionEnv);
        }
        bool GRGEN_LIBGR.IAction.ApplyPlus(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            return ApplyPlus(actionEnv);
        }
        bool GRGEN_LIBGR.IAction.ApplyPlus(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, params object[] parameters)
        {
            return ApplyPlus(actionEnv);
        }
        bool GRGEN_LIBGR.IAction.ApplyMinMax(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int min, int max)
        {
            return ApplyMinMax(actionEnv, min, max);
        }
        bool GRGEN_LIBGR.IAction.ApplyMinMax(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int min, int max, params object[] parameters)
        {
            return ApplyMinMax(actionEnv, min, max);
        }
        public void Filter(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatches matches, GRGEN_LIBGR.FilterCallWithArguments filter)
        {
            switch(filter.PackagePrefixedName) {
                case "keepFirst": matches.Filter_keepFirst((System.Int32)(filter.Arguments[0])); break;
                case "keepLast": matches.Filter_keepLast((System.Int32)(filter.Arguments[0])); break;
                case "keepFirstFraction": matches.Filter_keepFirstFraction((System.Double)(filter.Arguments[0])); break;
                case "keepLastFraction": matches.Filter_keepLastFraction((System.Double)(filter.Arguments[0])); break;
                case "removeFirst": matches.Filter_removeFirst((System.Int32)(filter.Arguments[0])); break;
                case "removeLast": matches.Filter_removeLast((System.Int32)(filter.Arguments[0])); break;
                case "removeFirstFraction": matches.Filter_removeFirstFraction((System.Double)(filter.Arguments[0])); break;
                case "removeLastFraction": matches.Filter_removeLastFraction((System.Double)(filter.Arguments[0])); break;
                default: throw new Exception("Unknown filter name " + filter.PackagePrefixedName + "!");
            }
        }
    }
    
    /// <summary>
    /// An object representing an executable rule - same as IAction, but with exact types and distinct parameters.
    /// </summary>
    public interface IAction_ss_1_0
    {
        /// <summary> same as IAction.Match, but with exact types and distinct parameters. </summary>
        GRGEN_LIBGR.IMatchesExact<Rule_ss_1_0.IMatch_ss_1_0> Match(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int maxMatches);
        /// <summary> same as IAction.Modify, but with exact types and distinct parameters. </summary>
        void Modify(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, Rule_ss_1_0.IMatch_ss_1_0 match);
        /// <summary> same as IAction.ModifyAll, but with exact types and distinct parameters. </summary>
        void ModifyAll(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatchesExact<Rule_ss_1_0.IMatch_ss_1_0> matches);
        /// <summary> same as IAction.Apply, but with exact types and distinct parameters; returns true if applied </summary>
        bool Apply(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv);
        /// <summary> same as IAction.ApplyAll, but with exact types and distinct parameters; returns the number of matches found/applied. </summary>
        int ApplyAll(int maxMatches, GRGEN_LIBGR.IActionExecutionEnvironment actionEnv);
        /// <summary> same as IAction.ApplyStar, but with exact types and distinct parameters. </summary>
        bool ApplyStar(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv);
        /// <summary> same as IAction.ApplyPlus, but with exact types and distinct parameters. </summary>
        bool ApplyPlus(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv);
        /// <summary> same as IAction.ApplyMinMax, but with exact types and distinct parameters. </summary>
        bool ApplyMinMax(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int min, int max);
    }
    
    public class Action_ss_1_0 : GRGEN_LGSP.LGSPAction, GRGEN_LIBGR.IAction, IAction_ss_1_0
    {
        public Action_ss_1_0()
            : base(Rule_ss_1_0.Instance.patternGraph)
        {
            _rulePattern = Rule_ss_1_0.Instance;
            DynamicMatch = myMatch;
        }

        public Rule_ss_1_0 _rulePattern;
        public override GRGEN_LGSP.LGSPRulePattern rulePattern { get { return _rulePattern; } }
        public override string Name { get { return "ss_1_0"; } }
        [ThreadStatic] private static GRGEN_LGSP.LGSPMatchesList<Rule_ss_1_0.Match_ss_1_0, Rule_ss_1_0.IMatch_ss_1_0> matches;

        // Performance optimization: saves us usage of new for the return array or the return arrays. In the object/string-style modify/apply methods of the action interface implementation.
        [ThreadStatic] public static object[] ReturnArray;
        [ThreadStatic] public static List<object[]> ReturnArrayListForAll;
        [ThreadStatic] public static List<object[]> AvailableReturnArrays;
        public static Action_ss_1_0 Instance { get { return instance; } set { instance = value; } }
        private static Action_ss_1_0 instance = new Action_ss_1_0();
        
        public GRGEN_LIBGR.IMatchesExact<Rule_ss_1_0.IMatch_ss_1_0> myMatch(GRGEN_LGSP.LGSPActionExecutionEnvironment actionEnv, int maxMatches)
        {
            GRGEN_LGSP.LGSPGraph graph = actionEnv.graph;
            if(matches == null)
                matches = new GRGEN_LGSP.LGSPMatchesList<Rule_ss_1_0.Match_ss_1_0, Rule_ss_1_0.IMatch_ss_1_0>(this);
            matches.Clear();
            if(ReturnArray == null)
                ReturnArray = new object[0];
            int isoSpace = 0;
            Stack<GRGEN_LGSP.LGSPSubpatternAction> openTasks = new Stack<GRGEN_LGSP.LGSPSubpatternAction>();
            List<Stack<GRGEN_LIBGR.IMatch>> foundPartialMatches = new List<Stack<GRGEN_LIBGR.IMatch>>();
            List<Stack<GRGEN_LIBGR.IMatch>> matchesList = foundPartialMatches;
            // Lookup ss_1_0_edge_c0 
            int type_id_candidate_ss_1_0_edge_c0 = 3;
            for(GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c0 = graph.edgesByTypeHeads[type_id_candidate_ss_1_0_edge_c0], candidate_ss_1_0_edge_c0 = head_candidate_ss_1_0_edge_c0.lgspTypeNext; candidate_ss_1_0_edge_c0 != head_candidate_ss_1_0_edge_c0; candidate_ss_1_0_edge_c0 = candidate_ss_1_0_edge_c0.lgspTypeNext)
            {
                uint prev__candidate_ss_1_0_edge_c0;
                prev__candidate_ss_1_0_edge_c0 = candidate_ss_1_0_edge_c0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                candidate_ss_1_0_edge_c0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                // Implicit Source ss_1_0_node_v0 from ss_1_0_edge_c0 
                GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v0 = candidate_ss_1_0_edge_c0.lgspSource;
                if(candidate_ss_1_0_node_v0.lgspType.TypeID!=15) {
                    candidate_ss_1_0_edge_c0.lgspFlags = candidate_ss_1_0_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c0;
                    continue;
                }
                uint prev__candidate_ss_1_0_node_v0;
                prev__candidate_ss_1_0_node_v0 = candidate_ss_1_0_node_v0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                candidate_ss_1_0_node_v0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                // Implicit Target ss_1_0_node_r0 from ss_1_0_edge_c0 
                GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_r0 = candidate_ss_1_0_edge_c0.lgspTarget;
                if((candidate_ss_1_0_node_r0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                {
                    candidate_ss_1_0_node_v0.lgspFlags = candidate_ss_1_0_node_v0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v0;
                    candidate_ss_1_0_edge_c0.lgspFlags = candidate_ss_1_0_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c0;
                    continue;
                }
                uint prev__candidate_ss_1_0_node_r0;
                prev__candidate_ss_1_0_node_r0 = candidate_ss_1_0_node_r0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                candidate_ss_1_0_node_r0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                // Extend Incoming ss_1_0_edge_c2 from ss_1_0_node_v0 
                GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c2 = candidate_ss_1_0_node_v0.lgspInhead;
                if(head_candidate_ss_1_0_edge_c2 != null)
                {
                    GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c2 = head_candidate_ss_1_0_edge_c2;
                    do
                    {
                        if(candidate_ss_1_0_edge_c2.lgspType.TypeID!=5) {
                            continue;
                        }
                        uint prev__candidate_ss_1_0_edge_c2;
                        prev__candidate_ss_1_0_edge_c2 = candidate_ss_1_0_edge_c2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                        candidate_ss_1_0_edge_c2.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                        // Implicit Source ss_1_0_node_v0_p0 from ss_1_0_edge_c2 
                        GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v0_p0 = candidate_ss_1_0_edge_c2.lgspSource;
                        if(candidate_ss_1_0_node_v0_p0.lgspType.TypeID!=7) {
                            candidate_ss_1_0_edge_c2.lgspFlags = candidate_ss_1_0_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c2;
                            continue;
                        }
                        if((candidate_ss_1_0_node_v0_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                        {
                            candidate_ss_1_0_edge_c2.lgspFlags = candidate_ss_1_0_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c2;
                            continue;
                        }
                        uint prev__candidate_ss_1_0_node_v0_p0;
                        prev__candidate_ss_1_0_node_v0_p0 = candidate_ss_1_0_node_v0_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                        candidate_ss_1_0_node_v0_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                        // Condition 
                        if(!((((GRGEN_MODEL.IBPort)candidate_ss_1_0_node_v0_p0).@ix == 0))) {
                            candidate_ss_1_0_node_v0_p0.lgspFlags = candidate_ss_1_0_node_v0_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v0_p0;
                            candidate_ss_1_0_edge_c2.lgspFlags = candidate_ss_1_0_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c2;
                            continue;
                        }
                        // Extend Incoming ss_1_0_edge_c3 from ss_1_0_node_v0 
                        GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c3 = candidate_ss_1_0_node_v0.lgspInhead;
                        if(head_candidate_ss_1_0_edge_c3 != null)
                        {
                            GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c3 = head_candidate_ss_1_0_edge_c3;
                            do
                            {
                                if(candidate_ss_1_0_edge_c3.lgspType.TypeID!=3) {
                                    continue;
                                }
                                if((candidate_ss_1_0_edge_c3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                {
                                    continue;
                                }
                                uint prev__candidate_ss_1_0_edge_c3;
                                prev__candidate_ss_1_0_edge_c3 = candidate_ss_1_0_edge_c3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                candidate_ss_1_0_edge_c3.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                // Implicit Source ss_1_0_node_v1 from ss_1_0_edge_c3 
                                GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v1 = candidate_ss_1_0_edge_c3.lgspSource;
                                if(candidate_ss_1_0_node_v1.lgspType.TypeID!=16) {
                                    candidate_ss_1_0_edge_c3.lgspFlags = candidate_ss_1_0_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c3;
                                    continue;
                                }
                                if((candidate_ss_1_0_node_v1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                {
                                    candidate_ss_1_0_edge_c3.lgspFlags = candidate_ss_1_0_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c3;
                                    continue;
                                }
                                uint prev__candidate_ss_1_0_node_v1;
                                prev__candidate_ss_1_0_node_v1 = candidate_ss_1_0_node_v1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                candidate_ss_1_0_node_v1.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat7_20 assigned from expression 0 
                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat7_20 = (System.Int32)0;
                                // Element nac_NodesWithoutSites_node_src_inlined_pat7_20 assigned from other element ss_1_0_node_v1 
                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat7_20 = candidate_ss_1_0_node_v1;
                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat7_20.lgspType.TypeID]) {
                                    candidate_ss_1_0_node_v1.lgspFlags = candidate_ss_1_0_node_v1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v1;
                                    candidate_ss_1_0_edge_c3.lgspFlags = candidate_ss_1_0_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c3;
                                    continue;
                                }
                                // NegativePattern 
                                {
                                    ++isoSpace;
                                    // Condition 
                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat7_20, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat7_20))) {
                                        --isoSpace;
                                        goto label27;
                                    }
                                    // negative pattern found
                                    --isoSpace;
                                    candidate_ss_1_0_node_v1.lgspFlags = candidate_ss_1_0_node_v1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v1;
                                    candidate_ss_1_0_edge_c3.lgspFlags = candidate_ss_1_0_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c3;
                                    goto label28;
                                    --isoSpace;
                                }
label27: ;
                                // Extend Incoming ss_1_0_edge_c4 from ss_1_0_node_v0 
                                GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c4 = candidate_ss_1_0_node_v0.lgspInhead;
                                if(head_candidate_ss_1_0_edge_c4 != null)
                                {
                                    GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c4 = head_candidate_ss_1_0_edge_c4;
                                    do
                                    {
                                        if(candidate_ss_1_0_edge_c4.lgspType.TypeID!=3) {
                                            continue;
                                        }
                                        if((candidate_ss_1_0_edge_c4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                        {
                                            continue;
                                        }
                                        uint prev__candidate_ss_1_0_edge_c4;
                                        prev__candidate_ss_1_0_edge_c4 = candidate_ss_1_0_edge_c4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                        candidate_ss_1_0_edge_c4.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                        // Implicit Source ss_1_0_node_v2 from ss_1_0_edge_c4 
                                        GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v2 = candidate_ss_1_0_edge_c4.lgspSource;
                                        if(candidate_ss_1_0_node_v2.lgspType.TypeID!=18) {
                                            candidate_ss_1_0_edge_c4.lgspFlags = candidate_ss_1_0_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c4;
                                            continue;
                                        }
                                        if((candidate_ss_1_0_node_v2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                        {
                                            candidate_ss_1_0_edge_c4.lgspFlags = candidate_ss_1_0_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c4;
                                            continue;
                                        }
                                        uint prev__candidate_ss_1_0_node_v2;
                                        prev__candidate_ss_1_0_node_v2 = candidate_ss_1_0_node_v2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                        candidate_ss_1_0_node_v2.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat8_21 assigned from expression 1 
                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat8_21 = (System.Int32)1;
                                        // Element nac_NodesWithoutSites_node_src_inlined_pat8_21 assigned from other element ss_1_0_node_v2 
                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat8_21 = candidate_ss_1_0_node_v2;
                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat8_21.lgspType.TypeID]) {
                                            candidate_ss_1_0_node_v2.lgspFlags = candidate_ss_1_0_node_v2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v2;
                                            candidate_ss_1_0_edge_c4.lgspFlags = candidate_ss_1_0_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c4;
                                            continue;
                                        }
                                        // NegativePattern 
                                        {
                                            ++isoSpace;
                                            // Condition 
                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat8_21, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat8_21))) {
                                                --isoSpace;
                                                goto label29;
                                            }
                                            // negative pattern found
                                            --isoSpace;
                                            candidate_ss_1_0_node_v2.lgspFlags = candidate_ss_1_0_node_v2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v2;
                                            candidate_ss_1_0_edge_c4.lgspFlags = candidate_ss_1_0_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c4;
                                            goto label30;
                                            --isoSpace;
                                        }
label29: ;
                                        // Extend Incoming ss_1_0_edge_c1 from ss_1_0_node_r0 
                                        GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c1 = candidate_ss_1_0_node_r0.lgspInhead;
                                        if(head_candidate_ss_1_0_edge_c1 != null)
                                        {
                                            GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c1 = head_candidate_ss_1_0_edge_c1;
                                            do
                                            {
                                                if(candidate_ss_1_0_edge_c1.lgspType.TypeID!=3) {
                                                    continue;
                                                }
                                                if((candidate_ss_1_0_edge_c1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                {
                                                    continue;
                                                }
                                                uint prev__candidate_ss_1_0_edge_c1;
                                                prev__candidate_ss_1_0_edge_c1 = candidate_ss_1_0_edge_c1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                candidate_ss_1_0_edge_c1.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                // Implicit Source ss_1_0_node_v8 from ss_1_0_edge_c1 
                                                GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v8 = candidate_ss_1_0_edge_c1.lgspSource;
                                                if(candidate_ss_1_0_node_v8.lgspType.TypeID!=15) {
                                                    candidate_ss_1_0_edge_c1.lgspFlags = candidate_ss_1_0_edge_c1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c1;
                                                    continue;
                                                }
                                                if((candidate_ss_1_0_node_v8.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                {
                                                    candidate_ss_1_0_edge_c1.lgspFlags = candidate_ss_1_0_edge_c1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c1;
                                                    continue;
                                                }
                                                uint prev__candidate_ss_1_0_node_v8;
                                                prev__candidate_ss_1_0_node_v8 = candidate_ss_1_0_node_v8.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                candidate_ss_1_0_node_v8.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                // Extend Outgoing ss_1_0_edge__edge4 from ss_1_0_node_v0_p0 
                                                GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge__edge4 = candidate_ss_1_0_node_v0_p0.lgspOuthead;
                                                if(head_candidate_ss_1_0_edge__edge4 != null)
                                                {
                                                    GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge__edge4 = head_candidate_ss_1_0_edge__edge4;
                                                    do
                                                    {
                                                        if(candidate_ss_1_0_edge__edge4.lgspType.TypeID!=7) {
                                                            continue;
                                                        }
                                                        uint prev__candidate_ss_1_0_edge__edge4;
                                                        prev__candidate_ss_1_0_edge__edge4 = candidate_ss_1_0_edge__edge4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                        candidate_ss_1_0_edge__edge4.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                        // Implicit Target ss_1_0_node_left from ss_1_0_edge__edge4 
                                                        GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_left = candidate_ss_1_0_edge__edge4.lgspTarget;
                                                        if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_ss_1_0_node_left.lgspType.TypeID]) {
                                                            candidate_ss_1_0_edge__edge4.lgspFlags = candidate_ss_1_0_edge__edge4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge__edge4;
                                                            continue;
                                                        }
                                                        if((candidate_ss_1_0_node_left.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                        {
                                                            candidate_ss_1_0_edge__edge4.lgspFlags = candidate_ss_1_0_edge__edge4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge__edge4;
                                                            continue;
                                                        }
                                                        uint prev__candidate_ss_1_0_node_left;
                                                        prev__candidate_ss_1_0_node_left = candidate_ss_1_0_node_left.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                        candidate_ss_1_0_node_left.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                        // Extend Incoming ss_1_0_edge_c7 from ss_1_0_node_v1 
                                                        GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c7 = candidate_ss_1_0_node_v1.lgspInhead;
                                                        if(head_candidate_ss_1_0_edge_c7 != null)
                                                        {
                                                            GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c7 = head_candidate_ss_1_0_edge_c7;
                                                            do
                                                            {
                                                                if(candidate_ss_1_0_edge_c7.lgspType.TypeID!=5) {
                                                                    continue;
                                                                }
                                                                if((candidate_ss_1_0_edge_c7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                {
                                                                    continue;
                                                                }
                                                                uint prev__candidate_ss_1_0_edge_c7;
                                                                prev__candidate_ss_1_0_edge_c7 = candidate_ss_1_0_edge_c7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                candidate_ss_1_0_edge_c7.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                // Implicit Source ss_1_0_node_v1_p0 from ss_1_0_edge_c7 
                                                                GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v1_p0 = candidate_ss_1_0_edge_c7.lgspSource;
                                                                if(candidate_ss_1_0_node_v1_p0.lgspType.TypeID!=7) {
                                                                    candidate_ss_1_0_edge_c7.lgspFlags = candidate_ss_1_0_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c7;
                                                                    continue;
                                                                }
                                                                if((candidate_ss_1_0_node_v1_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                {
                                                                    candidate_ss_1_0_edge_c7.lgspFlags = candidate_ss_1_0_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c7;
                                                                    continue;
                                                                }
                                                                uint prev__candidate_ss_1_0_node_v1_p0;
                                                                prev__candidate_ss_1_0_node_v1_p0 = candidate_ss_1_0_node_v1_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                candidate_ss_1_0_node_v1_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                // Condition 
                                                                if(!((((GRGEN_MODEL.IBPort)candidate_ss_1_0_node_v1_p0).@ix == 0))) {
                                                                    candidate_ss_1_0_node_v1_p0.lgspFlags = candidate_ss_1_0_node_v1_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v1_p0;
                                                                    candidate_ss_1_0_edge_c7.lgspFlags = candidate_ss_1_0_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c7;
                                                                    continue;
                                                                }
                                                                // Extend Incoming ss_1_0_edge_c8 from ss_1_0_node_v2 
                                                                GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c8 = candidate_ss_1_0_node_v2.lgspInhead;
                                                                if(head_candidate_ss_1_0_edge_c8 != null)
                                                                {
                                                                    GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c8 = head_candidate_ss_1_0_edge_c8;
                                                                    do
                                                                    {
                                                                        if(candidate_ss_1_0_edge_c8.lgspType.TypeID!=3) {
                                                                            continue;
                                                                        }
                                                                        if((candidate_ss_1_0_edge_c8.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_ss_1_0_edge_c8;
                                                                        prev__candidate_ss_1_0_edge_c8 = candidate_ss_1_0_edge_c8.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                        candidate_ss_1_0_edge_c8.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                        // Implicit Source ss_1_0_node_v3 from ss_1_0_edge_c8 
                                                                        GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v3 = candidate_ss_1_0_edge_c8.lgspSource;
                                                                        if(candidate_ss_1_0_node_v3.lgspType.TypeID!=19) {
                                                                            candidate_ss_1_0_edge_c8.lgspFlags = candidate_ss_1_0_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c8;
                                                                            continue;
                                                                        }
                                                                        if((candidate_ss_1_0_node_v3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                        {
                                                                            candidate_ss_1_0_edge_c8.lgspFlags = candidate_ss_1_0_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c8;
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_ss_1_0_node_v3;
                                                                        prev__candidate_ss_1_0_node_v3 = candidate_ss_1_0_node_v3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                        candidate_ss_1_0_node_v3.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                        // Extend Incoming ss_1_0_edge_c5 from ss_1_0_node_v8 
                                                                        GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c5 = candidate_ss_1_0_node_v8.lgspInhead;
                                                                        if(head_candidate_ss_1_0_edge_c5 != null)
                                                                        {
                                                                            GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c5 = head_candidate_ss_1_0_edge_c5;
                                                                            do
                                                                            {
                                                                                if(candidate_ss_1_0_edge_c5.lgspType.TypeID!=5) {
                                                                                    continue;
                                                                                }
                                                                                if((candidate_ss_1_0_edge_c5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                uint prev__candidate_ss_1_0_edge_c5;
                                                                                prev__candidate_ss_1_0_edge_c5 = candidate_ss_1_0_edge_c5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                candidate_ss_1_0_edge_c5.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                // Implicit Source ss_1_0_node_v8_p0 from ss_1_0_edge_c5 
                                                                                GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v8_p0 = candidate_ss_1_0_edge_c5.lgspSource;
                                                                                if(candidate_ss_1_0_node_v8_p0.lgspType.TypeID!=7) {
                                                                                    candidate_ss_1_0_edge_c5.lgspFlags = candidate_ss_1_0_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c5;
                                                                                    continue;
                                                                                }
                                                                                if((candidate_ss_1_0_node_v8_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                {
                                                                                    candidate_ss_1_0_edge_c5.lgspFlags = candidate_ss_1_0_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c5;
                                                                                    continue;
                                                                                }
                                                                                uint prev__candidate_ss_1_0_node_v8_p0;
                                                                                prev__candidate_ss_1_0_node_v8_p0 = candidate_ss_1_0_node_v8_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                candidate_ss_1_0_node_v8_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                // Condition 
                                                                                if(!((((GRGEN_MODEL.IBPort)candidate_ss_1_0_node_v8_p0).@ix == 0))) {
                                                                                    candidate_ss_1_0_node_v8_p0.lgspFlags = candidate_ss_1_0_node_v8_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v8_p0;
                                                                                    candidate_ss_1_0_edge_c5.lgspFlags = candidate_ss_1_0_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c5;
                                                                                    continue;
                                                                                }
                                                                                // Extend Incoming ss_1_0_edge_c6 from ss_1_0_node_v8 
                                                                                GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c6 = candidate_ss_1_0_node_v8.lgspInhead;
                                                                                if(head_candidate_ss_1_0_edge_c6 != null)
                                                                                {
                                                                                    GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c6 = head_candidate_ss_1_0_edge_c6;
                                                                                    do
                                                                                    {
                                                                                        if(candidate_ss_1_0_edge_c6.lgspType.TypeID!=3) {
                                                                                            continue;
                                                                                        }
                                                                                        if((candidate_ss_1_0_edge_c6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        uint prev__candidate_ss_1_0_edge_c6;
                                                                                        prev__candidate_ss_1_0_edge_c6 = candidate_ss_1_0_edge_c6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                        candidate_ss_1_0_edge_c6.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                        // Implicit Source ss_1_0_node_v9 from ss_1_0_edge_c6 
                                                                                        GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v9 = candidate_ss_1_0_edge_c6.lgspSource;
                                                                                        if(candidate_ss_1_0_node_v9.lgspType.TypeID!=18) {
                                                                                            candidate_ss_1_0_edge_c6.lgspFlags = candidate_ss_1_0_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c6;
                                                                                            continue;
                                                                                        }
                                                                                        if((candidate_ss_1_0_node_v9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                        {
                                                                                            candidate_ss_1_0_edge_c6.lgspFlags = candidate_ss_1_0_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c6;
                                                                                            continue;
                                                                                        }
                                                                                        uint prev__candidate_ss_1_0_node_v9;
                                                                                        prev__candidate_ss_1_0_node_v9 = candidate_ss_1_0_node_v9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                        candidate_ss_1_0_node_v9.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat2_15 assigned from expression 1 
                                                                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat2_15 = (System.Int32)1;
                                                                                        // Element nac_NodesWithoutSites_node_src_inlined_pat2_15 assigned from other element ss_1_0_node_v9 
                                                                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat2_15 = candidate_ss_1_0_node_v9;
                                                                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat2_15.lgspType.TypeID]) {
                                                                                            candidate_ss_1_0_node_v9.lgspFlags = candidate_ss_1_0_node_v9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v9;
                                                                                            candidate_ss_1_0_edge_c6.lgspFlags = candidate_ss_1_0_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c6;
                                                                                            continue;
                                                                                        }
                                                                                        // NegativePattern 
                                                                                        {
                                                                                            ++isoSpace;
                                                                                            // Condition 
                                                                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat2_15, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat2_15))) {
                                                                                                --isoSpace;
                                                                                                goto label31;
                                                                                            }
                                                                                            // negative pattern found
                                                                                            --isoSpace;
                                                                                            candidate_ss_1_0_node_v9.lgspFlags = candidate_ss_1_0_node_v9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v9;
                                                                                            candidate_ss_1_0_edge_c6.lgspFlags = candidate_ss_1_0_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c6;
                                                                                            goto label32;
                                                                                            --isoSpace;
                                                                                        }
label31: ;
                                                                                        // Extend Outgoing ss_1_0_edge__edge2 from ss_1_0_node_v1_p0 
                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge__edge2 = candidate_ss_1_0_node_v1_p0.lgspOuthead;
                                                                                        if(head_candidate_ss_1_0_edge__edge2 != null)
                                                                                        {
                                                                                            GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge__edge2 = head_candidate_ss_1_0_edge__edge2;
                                                                                            do
                                                                                            {
                                                                                                if(candidate_ss_1_0_edge__edge2.lgspType.TypeID!=7) {
                                                                                                    continue;
                                                                                                }
                                                                                                if((candidate_ss_1_0_edge__edge2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                uint prev__candidate_ss_1_0_edge__edge2;
                                                                                                prev__candidate_ss_1_0_edge__edge2 = candidate_ss_1_0_edge__edge2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                candidate_ss_1_0_edge__edge2.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                // Extend Incoming ss_1_0_edge_c10 from ss_1_0_node_v3 
                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c10 = candidate_ss_1_0_node_v3.lgspInhead;
                                                                                                if(head_candidate_ss_1_0_edge_c10 != null)
                                                                                                {
                                                                                                    GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c10 = head_candidate_ss_1_0_edge_c10;
                                                                                                    do
                                                                                                    {
                                                                                                        if(candidate_ss_1_0_edge_c10.lgspType.TypeID!=5) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        if((candidate_ss_1_0_edge_c10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        uint prev__candidate_ss_1_0_edge_c10;
                                                                                                        prev__candidate_ss_1_0_edge_c10 = candidate_ss_1_0_edge_c10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                        candidate_ss_1_0_edge_c10.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                        // Implicit Source ss_1_0_node_v3_p0 from ss_1_0_edge_c10 
                                                                                                        GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v3_p0 = candidate_ss_1_0_edge_c10.lgspSource;
                                                                                                        if(candidate_ss_1_0_node_v3_p0.lgspType.TypeID!=7) {
                                                                                                            candidate_ss_1_0_edge_c10.lgspFlags = candidate_ss_1_0_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c10;
                                                                                                            continue;
                                                                                                        }
                                                                                                        if((candidate_ss_1_0_node_v3_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                        {
                                                                                                            candidate_ss_1_0_edge_c10.lgspFlags = candidate_ss_1_0_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c10;
                                                                                                            continue;
                                                                                                        }
                                                                                                        uint prev__candidate_ss_1_0_node_v3_p0;
                                                                                                        prev__candidate_ss_1_0_node_v3_p0 = candidate_ss_1_0_node_v3_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                        candidate_ss_1_0_node_v3_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                        // Condition 
                                                                                                        if(!((((GRGEN_MODEL.IBPort)candidate_ss_1_0_node_v3_p0).@ix == 0))) {
                                                                                                            candidate_ss_1_0_node_v3_p0.lgspFlags = candidate_ss_1_0_node_v3_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v3_p0;
                                                                                                            candidate_ss_1_0_edge_c10.lgspFlags = candidate_ss_1_0_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c10;
                                                                                                            continue;
                                                                                                        }
                                                                                                        // Extend Incoming ss_1_0_edge_c11 from ss_1_0_node_v3 
                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c11 = candidate_ss_1_0_node_v3.lgspInhead;
                                                                                                        if(head_candidate_ss_1_0_edge_c11 != null)
                                                                                                        {
                                                                                                            GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c11 = head_candidate_ss_1_0_edge_c11;
                                                                                                            do
                                                                                                            {
                                                                                                                if(candidate_ss_1_0_edge_c11.lgspType.TypeID!=3) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((candidate_ss_1_0_edge_c11.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                uint prev__candidate_ss_1_0_edge_c11;
                                                                                                                prev__candidate_ss_1_0_edge_c11 = candidate_ss_1_0_edge_c11.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                candidate_ss_1_0_edge_c11.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                // Implicit Source ss_1_0_node_v4 from ss_1_0_edge_c11 
                                                                                                                GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v4 = candidate_ss_1_0_edge_c11.lgspSource;
                                                                                                                if(candidate_ss_1_0_node_v4.lgspType.TypeID!=20) {
                                                                                                                    candidate_ss_1_0_edge_c11.lgspFlags = candidate_ss_1_0_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c11;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((candidate_ss_1_0_node_v4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                {
                                                                                                                    candidate_ss_1_0_edge_c11.lgspFlags = candidate_ss_1_0_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c11;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                uint prev__candidate_ss_1_0_node_v4;
                                                                                                                prev__candidate_ss_1_0_node_v4 = candidate_ss_1_0_node_v4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                candidate_ss_1_0_node_v4.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat9_22 assigned from expression 1 
                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat9_22 = (System.Int32)1;
                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat9_22 assigned from other element ss_1_0_node_v4 
                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat9_22 = candidate_ss_1_0_node_v4;
                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat9_22.lgspType.TypeID]) {
                                                                                                                    candidate_ss_1_0_node_v4.lgspFlags = candidate_ss_1_0_node_v4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v4;
                                                                                                                    candidate_ss_1_0_edge_c11.lgspFlags = candidate_ss_1_0_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c11;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                // NegativePattern 
                                                                                                                {
                                                                                                                    ++isoSpace;
                                                                                                                    // Condition 
                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat9_22, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat9_22))) {
                                                                                                                        --isoSpace;
                                                                                                                        goto label33;
                                                                                                                    }
                                                                                                                    // negative pattern found
                                                                                                                    --isoSpace;
                                                                                                                    candidate_ss_1_0_node_v4.lgspFlags = candidate_ss_1_0_node_v4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v4;
                                                                                                                    candidate_ss_1_0_edge_c11.lgspFlags = candidate_ss_1_0_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c11;
                                                                                                                    goto label34;
                                                                                                                    --isoSpace;
                                                                                                                }
label33: ;
                                                                                                                // Extend Incoming ss_1_0_edge_c12 from ss_1_0_node_v3 
                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c12 = candidate_ss_1_0_node_v3.lgspInhead;
                                                                                                                if(head_candidate_ss_1_0_edge_c12 != null)
                                                                                                                {
                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c12 = head_candidate_ss_1_0_edge_c12;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        if(candidate_ss_1_0_edge_c12.lgspType.TypeID!=3) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if((candidate_ss_1_0_edge_c12.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        uint prev__candidate_ss_1_0_edge_c12;
                                                                                                                        prev__candidate_ss_1_0_edge_c12 = candidate_ss_1_0_edge_c12.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                        candidate_ss_1_0_edge_c12.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                        // Implicit Source ss_1_0_node_v6 from ss_1_0_edge_c12 
                                                                                                                        GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v6 = candidate_ss_1_0_edge_c12.lgspSource;
                                                                                                                        if(candidate_ss_1_0_node_v6.lgspType.TypeID!=34) {
                                                                                                                            candidate_ss_1_0_edge_c12.lgspFlags = candidate_ss_1_0_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c12;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if((candidate_ss_1_0_node_v6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                        {
                                                                                                                            candidate_ss_1_0_edge_c12.lgspFlags = candidate_ss_1_0_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c12;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        uint prev__candidate_ss_1_0_node_v6;
                                                                                                                        prev__candidate_ss_1_0_node_v6 = candidate_ss_1_0_node_v6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                        candidate_ss_1_0_node_v6.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat0_13 assigned from expression 0 
                                                                                                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat0_13 = (System.Int32)0;
                                                                                                                        // Element nac_NodesWithoutSites_node_src_inlined_pat0_13 assigned from other element ss_1_0_node_v6 
                                                                                                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat0_13 = candidate_ss_1_0_node_v6;
                                                                                                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat0_13.lgspType.TypeID]) {
                                                                                                                            candidate_ss_1_0_node_v6.lgspFlags = candidate_ss_1_0_node_v6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v6;
                                                                                                                            candidate_ss_1_0_edge_c12.lgspFlags = candidate_ss_1_0_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c12;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        // NegativePattern 
                                                                                                                        {
                                                                                                                            ++isoSpace;
                                                                                                                            // Condition 
                                                                                                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat0_13, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat0_13))) {
                                                                                                                                --isoSpace;
                                                                                                                                goto label35;
                                                                                                                            }
                                                                                                                            // negative pattern found
                                                                                                                            --isoSpace;
                                                                                                                            candidate_ss_1_0_node_v6.lgspFlags = candidate_ss_1_0_node_v6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v6;
                                                                                                                            candidate_ss_1_0_edge_c12.lgspFlags = candidate_ss_1_0_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c12;
                                                                                                                            goto label36;
                                                                                                                            --isoSpace;
                                                                                                                        }
label35: ;
                                                                                                                        // Extend Incoming ss_1_0_edge_c13 from ss_1_0_node_v3 
                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c13 = candidate_ss_1_0_node_v3.lgspInhead;
                                                                                                                        if(head_candidate_ss_1_0_edge_c13 != null)
                                                                                                                        {
                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c13 = head_candidate_ss_1_0_edge_c13;
                                                                                                                            do
                                                                                                                            {
                                                                                                                                if(candidate_ss_1_0_edge_c13.lgspType.TypeID!=3) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if((candidate_ss_1_0_edge_c13.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                uint prev__candidate_ss_1_0_edge_c13;
                                                                                                                                prev__candidate_ss_1_0_edge_c13 = candidate_ss_1_0_edge_c13.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                candidate_ss_1_0_edge_c13.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                // Implicit Source ss_1_0_node_v7 from ss_1_0_edge_c13 
                                                                                                                                GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v7 = candidate_ss_1_0_edge_c13.lgspSource;
                                                                                                                                if(candidate_ss_1_0_node_v7.lgspType.TypeID!=36) {
                                                                                                                                    candidate_ss_1_0_edge_c13.lgspFlags = candidate_ss_1_0_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c13;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if((candidate_ss_1_0_node_v7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                {
                                                                                                                                    candidate_ss_1_0_edge_c13.lgspFlags = candidate_ss_1_0_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c13;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                uint prev__candidate_ss_1_0_node_v7;
                                                                                                                                prev__candidate_ss_1_0_node_v7 = candidate_ss_1_0_node_v7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                candidate_ss_1_0_node_v7.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat1_14 assigned from expression 0 
                                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat1_14 = (System.Int32)0;
                                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat1_14 assigned from other element ss_1_0_node_v7 
                                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat1_14 = candidate_ss_1_0_node_v7;
                                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat1_14.lgspType.TypeID]) {
                                                                                                                                    candidate_ss_1_0_node_v7.lgspFlags = candidate_ss_1_0_node_v7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v7;
                                                                                                                                    candidate_ss_1_0_edge_c13.lgspFlags = candidate_ss_1_0_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c13;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                // NegativePattern 
                                                                                                                                {
                                                                                                                                    ++isoSpace;
                                                                                                                                    // Condition 
                                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat1_14, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat1_14))) {
                                                                                                                                        --isoSpace;
                                                                                                                                        goto label37;
                                                                                                                                    }
                                                                                                                                    // negative pattern found
                                                                                                                                    --isoSpace;
                                                                                                                                    candidate_ss_1_0_node_v7.lgspFlags = candidate_ss_1_0_node_v7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v7;
                                                                                                                                    candidate_ss_1_0_edge_c13.lgspFlags = candidate_ss_1_0_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c13;
                                                                                                                                    goto label38;
                                                                                                                                    --isoSpace;
                                                                                                                                }
label37: ;
                                                                                                                                // Extend Outgoing ss_1_0_edge__edge1 from ss_1_0_node_v8_p0 
                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge__edge1 = candidate_ss_1_0_node_v8_p0.lgspOuthead;
                                                                                                                                if(head_candidate_ss_1_0_edge__edge1 != null)
                                                                                                                                {
                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge__edge1 = head_candidate_ss_1_0_edge__edge1;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                        if(candidate_ss_1_0_edge__edge1.lgspType.TypeID!=7) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if((candidate_ss_1_0_edge__edge1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        uint prev__candidate_ss_1_0_edge__edge1;
                                                                                                                                        prev__candidate_ss_1_0_edge__edge1 = candidate_ss_1_0_edge__edge1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                        candidate_ss_1_0_edge__edge1.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                        // Implicit Target ss_1_0_node_right from ss_1_0_edge__edge1 
                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_right = candidate_ss_1_0_edge__edge1.lgspTarget;
                                                                                                                                        if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_ss_1_0_node_right.lgspType.TypeID]) {
                                                                                                                                            candidate_ss_1_0_edge__edge1.lgspFlags = candidate_ss_1_0_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge__edge1;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if(candidate_ss_1_0_edge__edge2.lgspTarget != candidate_ss_1_0_node_right) {
                                                                                                                                            candidate_ss_1_0_edge__edge1.lgspFlags = candidate_ss_1_0_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge__edge1;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if((candidate_ss_1_0_node_right.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                        {
                                                                                                                                            candidate_ss_1_0_edge__edge1.lgspFlags = candidate_ss_1_0_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge__edge1;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        uint prev__candidate_ss_1_0_node_right;
                                                                                                                                        prev__candidate_ss_1_0_node_right = candidate_ss_1_0_node_right.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                        candidate_ss_1_0_node_right.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                        // Extend Incoming ss_1_0_edge_c9 from ss_1_0_node_v9 
                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c9 = candidate_ss_1_0_node_v9.lgspInhead;
                                                                                                                                        if(head_candidate_ss_1_0_edge_c9 != null)
                                                                                                                                        {
                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c9 = head_candidate_ss_1_0_edge_c9;
                                                                                                                                            do
                                                                                                                                            {
                                                                                                                                                if(candidate_ss_1_0_edge_c9.lgspType.TypeID!=3) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if((candidate_ss_1_0_edge_c9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                uint prev__candidate_ss_1_0_edge_c9;
                                                                                                                                                prev__candidate_ss_1_0_edge_c9 = candidate_ss_1_0_edge_c9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                candidate_ss_1_0_edge_c9.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                // Implicit Source ss_1_0_node_v10 from ss_1_0_edge_c9 
                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v10 = candidate_ss_1_0_edge_c9.lgspSource;
                                                                                                                                                if(candidate_ss_1_0_node_v10.lgspType.TypeID!=19) {
                                                                                                                                                    candidate_ss_1_0_edge_c9.lgspFlags = candidate_ss_1_0_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c9;
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if((candidate_ss_1_0_node_v10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                {
                                                                                                                                                    candidate_ss_1_0_edge_c9.lgspFlags = candidate_ss_1_0_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c9;
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                uint prev__candidate_ss_1_0_node_v10;
                                                                                                                                                prev__candidate_ss_1_0_node_v10 = candidate_ss_1_0_node_v10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                candidate_ss_1_0_node_v10.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                // Extend Outgoing ss_1_0_edge__edge3 from ss_1_0_node_v3_p0 
                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge__edge3 = candidate_ss_1_0_node_v3_p0.lgspOuthead;
                                                                                                                                                if(head_candidate_ss_1_0_edge__edge3 != null)
                                                                                                                                                {
                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge__edge3 = head_candidate_ss_1_0_edge__edge3;
                                                                                                                                                    do
                                                                                                                                                    {
                                                                                                                                                        if(candidate_ss_1_0_edge__edge3.lgspType.TypeID!=7) {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if((candidate_ss_1_0_edge__edge3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        uint prev__candidate_ss_1_0_edge__edge3;
                                                                                                                                                        prev__candidate_ss_1_0_edge__edge3 = candidate_ss_1_0_edge__edge3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                        candidate_ss_1_0_edge__edge3.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                        // Implicit Target ss_1_0_node_rn1 from ss_1_0_edge__edge3 
                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_rn1 = candidate_ss_1_0_edge__edge3.lgspTarget;
                                                                                                                                                        if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_ss_1_0_node_rn1.lgspType.TypeID]) {
                                                                                                                                                            candidate_ss_1_0_edge__edge3.lgspFlags = candidate_ss_1_0_edge__edge3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge__edge3;
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if((candidate_ss_1_0_node_rn1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                        {
                                                                                                                                                            candidate_ss_1_0_edge__edge3.lgspFlags = candidate_ss_1_0_edge__edge3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge__edge3;
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        uint prev__candidate_ss_1_0_node_rn1;
                                                                                                                                                        prev__candidate_ss_1_0_node_rn1 = candidate_ss_1_0_node_rn1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                        candidate_ss_1_0_node_rn1.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                        // Extend Incoming ss_1_0_edge_c18 from ss_1_0_node_v4 
                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c18 = candidate_ss_1_0_node_v4.lgspInhead;
                                                                                                                                                        if(head_candidate_ss_1_0_edge_c18 != null)
                                                                                                                                                        {
                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c18 = head_candidate_ss_1_0_edge_c18;
                                                                                                                                                            do
                                                                                                                                                            {
                                                                                                                                                                if(candidate_ss_1_0_edge_c18.lgspType.TypeID!=3) {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if((candidate_ss_1_0_edge_c18.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                uint prev__candidate_ss_1_0_edge_c18;
                                                                                                                                                                prev__candidate_ss_1_0_edge_c18 = candidate_ss_1_0_edge_c18.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                candidate_ss_1_0_edge_c18.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                // Implicit Source ss_1_0_node_v5 from ss_1_0_edge_c18 
                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v5 = candidate_ss_1_0_edge_c18.lgspSource;
                                                                                                                                                                if(candidate_ss_1_0_node_v5.lgspType.TypeID!=22) {
                                                                                                                                                                    candidate_ss_1_0_edge_c18.lgspFlags = candidate_ss_1_0_edge_c18.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c18;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if((candidate_ss_1_0_node_v5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                {
                                                                                                                                                                    candidate_ss_1_0_edge_c18.lgspFlags = candidate_ss_1_0_edge_c18.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c18;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                uint prev__candidate_ss_1_0_node_v5;
                                                                                                                                                                prev__candidate_ss_1_0_node_v5 = candidate_ss_1_0_node_v5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                candidate_ss_1_0_node_v5.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat10_23 assigned from expression 0 
                                                                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat10_23 = (System.Int32)0;
                                                                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat10_23 assigned from other element ss_1_0_node_v5 
                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat10_23 = candidate_ss_1_0_node_v5;
                                                                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat10_23.lgspType.TypeID]) {
                                                                                                                                                                    candidate_ss_1_0_node_v5.lgspFlags = candidate_ss_1_0_node_v5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v5;
                                                                                                                                                                    candidate_ss_1_0_edge_c18.lgspFlags = candidate_ss_1_0_edge_c18.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c18;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                // NegativePattern 
                                                                                                                                                                {
                                                                                                                                                                    ++isoSpace;
                                                                                                                                                                    // Condition 
                                                                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat10_23, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat10_23))) {
                                                                                                                                                                        --isoSpace;
                                                                                                                                                                        goto label39;
                                                                                                                                                                    }
                                                                                                                                                                    // negative pattern found
                                                                                                                                                                    --isoSpace;
                                                                                                                                                                    candidate_ss_1_0_node_v5.lgspFlags = candidate_ss_1_0_node_v5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v5;
                                                                                                                                                                    candidate_ss_1_0_edge_c18.lgspFlags = candidate_ss_1_0_edge_c18.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c18;
                                                                                                                                                                    goto label40;
                                                                                                                                                                    --isoSpace;
                                                                                                                                                                }
label39: ;
                                                                                                                                                                // Extend Incoming ss_1_0_edge_c14 from ss_1_0_node_v10 
                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c14 = candidate_ss_1_0_node_v10.lgspInhead;
                                                                                                                                                                if(head_candidate_ss_1_0_edge_c14 != null)
                                                                                                                                                                {
                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c14 = head_candidate_ss_1_0_edge_c14;
                                                                                                                                                                    do
                                                                                                                                                                    {
                                                                                                                                                                        if(candidate_ss_1_0_edge_c14.lgspType.TypeID!=5) {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if((candidate_ss_1_0_edge_c14.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        // Implicit Source ss_1_0_node_v10_p0 from ss_1_0_edge_c14 
                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v10_p0 = candidate_ss_1_0_edge_c14.lgspSource;
                                                                                                                                                                        if(candidate_ss_1_0_node_v10_p0.lgspType.TypeID!=7) {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if((candidate_ss_1_0_node_v10_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        // Condition 
                                                                                                                                                                        if(!((((GRGEN_MODEL.IBPort)candidate_ss_1_0_node_v10_p0).@ix == 0))) {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        // Extend Incoming ss_1_0_edge_c15 from ss_1_0_node_v10 
                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c15 = candidate_ss_1_0_node_v10.lgspInhead;
                                                                                                                                                                        if(head_candidate_ss_1_0_edge_c15 != null)
                                                                                                                                                                        {
                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c15 = head_candidate_ss_1_0_edge_c15;
                                                                                                                                                                            do
                                                                                                                                                                            {
                                                                                                                                                                                if(candidate_ss_1_0_edge_c15.lgspType.TypeID!=3) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if((candidate_ss_1_0_edge_c15.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                uint prev__candidate_ss_1_0_edge_c15;
                                                                                                                                                                                prev__candidate_ss_1_0_edge_c15 = candidate_ss_1_0_edge_c15.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                candidate_ss_1_0_edge_c15.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                // Implicit Source ss_1_0_node_v11 from ss_1_0_edge_c15 
                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v11 = candidate_ss_1_0_edge_c15.lgspSource;
                                                                                                                                                                                if(candidate_ss_1_0_node_v11.lgspType.TypeID!=20) {
                                                                                                                                                                                    candidate_ss_1_0_edge_c15.lgspFlags = candidate_ss_1_0_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c15;
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if((candidate_ss_1_0_node_v11.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                {
                                                                                                                                                                                    candidate_ss_1_0_edge_c15.lgspFlags = candidate_ss_1_0_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c15;
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                uint prev__candidate_ss_1_0_node_v11;
                                                                                                                                                                                prev__candidate_ss_1_0_node_v11 = candidate_ss_1_0_node_v11.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                candidate_ss_1_0_node_v11.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat4_17 assigned from expression 1 
                                                                                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat4_17 = (System.Int32)1;
                                                                                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat4_17 assigned from other element ss_1_0_node_v11 
                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat4_17 = candidate_ss_1_0_node_v11;
                                                                                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat4_17.lgspType.TypeID]) {
                                                                                                                                                                                    candidate_ss_1_0_node_v11.lgspFlags = candidate_ss_1_0_node_v11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v11;
                                                                                                                                                                                    candidate_ss_1_0_edge_c15.lgspFlags = candidate_ss_1_0_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c15;
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                // NegativePattern 
                                                                                                                                                                                {
                                                                                                                                                                                    ++isoSpace;
                                                                                                                                                                                    // Condition 
                                                                                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat4_17, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat4_17))) {
                                                                                                                                                                                        --isoSpace;
                                                                                                                                                                                        goto label41;
                                                                                                                                                                                    }
                                                                                                                                                                                    // negative pattern found
                                                                                                                                                                                    --isoSpace;
                                                                                                                                                                                    candidate_ss_1_0_node_v11.lgspFlags = candidate_ss_1_0_node_v11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v11;
                                                                                                                                                                                    candidate_ss_1_0_edge_c15.lgspFlags = candidate_ss_1_0_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c15;
                                                                                                                                                                                    goto label42;
                                                                                                                                                                                    --isoSpace;
                                                                                                                                                                                }
label41: ;
                                                                                                                                                                                // Extend Incoming ss_1_0_edge_c16 from ss_1_0_node_v10 
                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c16 = candidate_ss_1_0_node_v10.lgspInhead;
                                                                                                                                                                                if(head_candidate_ss_1_0_edge_c16 != null)
                                                                                                                                                                                {
                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c16 = head_candidate_ss_1_0_edge_c16;
                                                                                                                                                                                    do
                                                                                                                                                                                    {
                                                                                                                                                                                        if(candidate_ss_1_0_edge_c16.lgspType.TypeID!=3) {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        if((candidate_ss_1_0_edge_c16.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                        {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        uint prev__candidate_ss_1_0_edge_c16;
                                                                                                                                                                                        prev__candidate_ss_1_0_edge_c16 = candidate_ss_1_0_edge_c16.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                        candidate_ss_1_0_edge_c16.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                        // Implicit Source ss_1_0_node_v13 from ss_1_0_edge_c16 
                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v13 = candidate_ss_1_0_edge_c16.lgspSource;
                                                                                                                                                                                        if(candidate_ss_1_0_node_v13.lgspType.TypeID!=34) {
                                                                                                                                                                                            candidate_ss_1_0_edge_c16.lgspFlags = candidate_ss_1_0_edge_c16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c16;
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        if((candidate_ss_1_0_node_v13.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                        {
                                                                                                                                                                                            candidate_ss_1_0_edge_c16.lgspFlags = candidate_ss_1_0_edge_c16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c16;
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        uint prev__candidate_ss_1_0_node_v13;
                                                                                                                                                                                        prev__candidate_ss_1_0_node_v13 = candidate_ss_1_0_node_v13.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                        candidate_ss_1_0_node_v13.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat6_19 assigned from expression 0 
                                                                                                                                                                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat6_19 = (System.Int32)0;
                                                                                                                                                                                        // Element nac_NodesWithoutSites_node_src_inlined_pat6_19 assigned from other element ss_1_0_node_v13 
                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat6_19 = candidate_ss_1_0_node_v13;
                                                                                                                                                                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat6_19.lgspType.TypeID]) {
                                                                                                                                                                                            candidate_ss_1_0_node_v13.lgspFlags = candidate_ss_1_0_node_v13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v13;
                                                                                                                                                                                            candidate_ss_1_0_edge_c16.lgspFlags = candidate_ss_1_0_edge_c16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c16;
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        // NegativePattern 
                                                                                                                                                                                        {
                                                                                                                                                                                            ++isoSpace;
                                                                                                                                                                                            // Condition 
                                                                                                                                                                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat6_19, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat6_19))) {
                                                                                                                                                                                                --isoSpace;
                                                                                                                                                                                                goto label43;
                                                                                                                                                                                            }
                                                                                                                                                                                            // negative pattern found
                                                                                                                                                                                            --isoSpace;
                                                                                                                                                                                            candidate_ss_1_0_node_v13.lgspFlags = candidate_ss_1_0_node_v13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v13;
                                                                                                                                                                                            candidate_ss_1_0_edge_c16.lgspFlags = candidate_ss_1_0_edge_c16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c16;
                                                                                                                                                                                            goto label44;
                                                                                                                                                                                            --isoSpace;
                                                                                                                                                                                        }
label43: ;
                                                                                                                                                                                        // Extend Incoming ss_1_0_edge_c17 from ss_1_0_node_v10 
                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c17 = candidate_ss_1_0_node_v10.lgspInhead;
                                                                                                                                                                                        if(head_candidate_ss_1_0_edge_c17 != null)
                                                                                                                                                                                        {
                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c17 = head_candidate_ss_1_0_edge_c17;
                                                                                                                                                                                            do
                                                                                                                                                                                            {
                                                                                                                                                                                                if(candidate_ss_1_0_edge_c17.lgspType.TypeID!=3) {
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                if((candidate_ss_1_0_edge_c17.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                {
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                uint prev__candidate_ss_1_0_edge_c17;
                                                                                                                                                                                                prev__candidate_ss_1_0_edge_c17 = candidate_ss_1_0_edge_c17.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                candidate_ss_1_0_edge_c17.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                // Implicit Source ss_1_0_node_v14 from ss_1_0_edge_c17 
                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v14 = candidate_ss_1_0_edge_c17.lgspSource;
                                                                                                                                                                                                if(candidate_ss_1_0_node_v14.lgspType.TypeID!=36) {
                                                                                                                                                                                                    candidate_ss_1_0_edge_c17.lgspFlags = candidate_ss_1_0_edge_c17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c17;
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                if((candidate_ss_1_0_node_v14.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                {
                                                                                                                                                                                                    candidate_ss_1_0_edge_c17.lgspFlags = candidate_ss_1_0_edge_c17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c17;
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                uint prev__candidate_ss_1_0_node_v14;
                                                                                                                                                                                                prev__candidate_ss_1_0_node_v14 = candidate_ss_1_0_node_v14.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                candidate_ss_1_0_node_v14.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat5_18 assigned from expression 0 
                                                                                                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat5_18 = (System.Int32)0;
                                                                                                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat5_18 assigned from other element ss_1_0_node_v14 
                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat5_18 = candidate_ss_1_0_node_v14;
                                                                                                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat5_18.lgspType.TypeID]) {
                                                                                                                                                                                                    candidate_ss_1_0_node_v14.lgspFlags = candidate_ss_1_0_node_v14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v14;
                                                                                                                                                                                                    candidate_ss_1_0_edge_c17.lgspFlags = candidate_ss_1_0_edge_c17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c17;
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                // NegativePattern 
                                                                                                                                                                                                {
                                                                                                                                                                                                    ++isoSpace;
                                                                                                                                                                                                    // Condition 
                                                                                                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat5_18, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat5_18))) {
                                                                                                                                                                                                        --isoSpace;
                                                                                                                                                                                                        goto label45;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    // negative pattern found
                                                                                                                                                                                                    --isoSpace;
                                                                                                                                                                                                    candidate_ss_1_0_node_v14.lgspFlags = candidate_ss_1_0_node_v14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v14;
                                                                                                                                                                                                    candidate_ss_1_0_edge_c17.lgspFlags = candidate_ss_1_0_edge_c17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c17;
                                                                                                                                                                                                    goto label46;
                                                                                                                                                                                                    --isoSpace;
                                                                                                                                                                                                }
label45: ;
                                                                                                                                                                                                // Extend Outgoing ss_1_0_edge__edge0 from ss_1_0_node_v10_p0 
                                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge__edge0 = candidate_ss_1_0_node_v10_p0.lgspOuthead;
                                                                                                                                                                                                if(head_candidate_ss_1_0_edge__edge0 != null)
                                                                                                                                                                                                {
                                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge__edge0 = head_candidate_ss_1_0_edge__edge0;
                                                                                                                                                                                                    do
                                                                                                                                                                                                    {
                                                                                                                                                                                                        if(candidate_ss_1_0_edge__edge0.lgspType.TypeID!=7) {
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if((candidate_ss_1_0_edge__edge0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                        {
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        // Implicit Target ss_1_0_node_rn0 from ss_1_0_edge__edge0 
                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_rn0 = candidate_ss_1_0_edge__edge0.lgspTarget;
                                                                                                                                                                                                        if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_ss_1_0_node_rn0.lgspType.TypeID]) {
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if((candidate_ss_1_0_node_rn0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                        {
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        // Extend Incoming ss_1_0_edge_c19 from ss_1_0_node_v11 
                                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_ss_1_0_edge_c19 = candidate_ss_1_0_node_v11.lgspInhead;
                                                                                                                                                                                                        if(head_candidate_ss_1_0_edge_c19 != null)
                                                                                                                                                                                                        {
                                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_ss_1_0_edge_c19 = head_candidate_ss_1_0_edge_c19;
                                                                                                                                                                                                            do
                                                                                                                                                                                                            {
                                                                                                                                                                                                                if(candidate_ss_1_0_edge_c19.lgspType.TypeID!=3) {
                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if((candidate_ss_1_0_edge_c19.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                // Implicit Source ss_1_0_node_v12 from ss_1_0_edge_c19 
                                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_ss_1_0_node_v12 = candidate_ss_1_0_edge_c19.lgspSource;
                                                                                                                                                                                                                if(candidate_ss_1_0_node_v12.lgspType.TypeID!=21) {
                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if((candidate_ss_1_0_node_v12.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat3_16 assigned from expression 0 
                                                                                                                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat3_16 = (System.Int32)0;
                                                                                                                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat3_16 assigned from other element ss_1_0_node_v12 
                                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat3_16 = candidate_ss_1_0_node_v12;
                                                                                                                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat3_16.lgspType.TypeID]) {
                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                // NegativePattern 
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    ++isoSpace;
                                                                                                                                                                                                                    // Condition 
                                                                                                                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat3_16, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat3_16))) {
                                                                                                                                                                                                                        --isoSpace;
                                                                                                                                                                                                                        goto label47;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    // negative pattern found
                                                                                                                                                                                                                    --isoSpace;
                                                                                                                                                                                                                    goto label48;
                                                                                                                                                                                                                    --isoSpace;
                                                                                                                                                                                                                }
label47: ;
                                                                                                                                                                                                                Rule_ss_1_0.Match_ss_1_0 match = matches.GetNextUnfilledPosition();
                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat0 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                match_pat0.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat1 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                match_pat1.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat2 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                match_pat2.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat3 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                match_pat3.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat4 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                match_pat4.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat5 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                match_pat5.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat6 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                match_pat6.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat7 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                match_pat7.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat8 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                match_pat8.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat9 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                match_pat9.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat10 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                match_pat10.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                match._node_v0 = candidate_ss_1_0_node_v0;
                                                                                                                                                                                                                match._node_r0 = candidate_ss_1_0_node_r0;
                                                                                                                                                                                                                match._node_v8 = candidate_ss_1_0_node_v8;
                                                                                                                                                                                                                match._node_v0_p0 = candidate_ss_1_0_node_v0_p0;
                                                                                                                                                                                                                match._node_v1 = candidate_ss_1_0_node_v1;
                                                                                                                                                                                                                match._node_v2 = candidate_ss_1_0_node_v2;
                                                                                                                                                                                                                match._node_v8_p0 = candidate_ss_1_0_node_v8_p0;
                                                                                                                                                                                                                match._node_v9 = candidate_ss_1_0_node_v9;
                                                                                                                                                                                                                match._node_v1_p0 = candidate_ss_1_0_node_v1_p0;
                                                                                                                                                                                                                match._node_v3 = candidate_ss_1_0_node_v3;
                                                                                                                                                                                                                match._node_v10 = candidate_ss_1_0_node_v10;
                                                                                                                                                                                                                match._node_v3_p0 = candidate_ss_1_0_node_v3_p0;
                                                                                                                                                                                                                match._node_v4 = candidate_ss_1_0_node_v4;
                                                                                                                                                                                                                match._node_v6 = candidate_ss_1_0_node_v6;
                                                                                                                                                                                                                match._node_v7 = candidate_ss_1_0_node_v7;
                                                                                                                                                                                                                match._node_v10_p0 = candidate_ss_1_0_node_v10_p0;
                                                                                                                                                                                                                match._node_v11 = candidate_ss_1_0_node_v11;
                                                                                                                                                                                                                match._node_v13 = candidate_ss_1_0_node_v13;
                                                                                                                                                                                                                match._node_v14 = candidate_ss_1_0_node_v14;
                                                                                                                                                                                                                match._node_v5 = candidate_ss_1_0_node_v5;
                                                                                                                                                                                                                match._node_v12 = candidate_ss_1_0_node_v12;
                                                                                                                                                                                                                match._node_rn0 = candidate_ss_1_0_node_rn0;
                                                                                                                                                                                                                match._node_right = candidate_ss_1_0_node_right;
                                                                                                                                                                                                                match._node_rn1 = candidate_ss_1_0_node_rn1;
                                                                                                                                                                                                                match._node_left = candidate_ss_1_0_node_left;
                                                                                                                                                                                                                match_pat0._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat0_13;
                                                                                                                                                                                                                match_pat1._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat1_14;
                                                                                                                                                                                                                match_pat2._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat2_15;
                                                                                                                                                                                                                match_pat3._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat3_16;
                                                                                                                                                                                                                match_pat4._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat4_17;
                                                                                                                                                                                                                match_pat5._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat5_18;
                                                                                                                                                                                                                match_pat6._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat6_19;
                                                                                                                                                                                                                match_pat7._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat7_20;
                                                                                                                                                                                                                match_pat8._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat8_21;
                                                                                                                                                                                                                match_pat9._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat9_22;
                                                                                                                                                                                                                match_pat10._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat10_23;
                                                                                                                                                                                                                match._edge_c0 = candidate_ss_1_0_edge_c0;
                                                                                                                                                                                                                match._edge_c1 = candidate_ss_1_0_edge_c1;
                                                                                                                                                                                                                match._edge_c2 = candidate_ss_1_0_edge_c2;
                                                                                                                                                                                                                match._edge_c3 = candidate_ss_1_0_edge_c3;
                                                                                                                                                                                                                match._edge_c4 = candidate_ss_1_0_edge_c4;
                                                                                                                                                                                                                match._edge_c5 = candidate_ss_1_0_edge_c5;
                                                                                                                                                                                                                match._edge_c6 = candidate_ss_1_0_edge_c6;
                                                                                                                                                                                                                match._edge_c7 = candidate_ss_1_0_edge_c7;
                                                                                                                                                                                                                match._edge_c8 = candidate_ss_1_0_edge_c8;
                                                                                                                                                                                                                match._edge_c9 = candidate_ss_1_0_edge_c9;
                                                                                                                                                                                                                match._edge_c10 = candidate_ss_1_0_edge_c10;
                                                                                                                                                                                                                match._edge_c11 = candidate_ss_1_0_edge_c11;
                                                                                                                                                                                                                match._edge_c12 = candidate_ss_1_0_edge_c12;
                                                                                                                                                                                                                match._edge_c13 = candidate_ss_1_0_edge_c13;
                                                                                                                                                                                                                match._edge_c14 = candidate_ss_1_0_edge_c14;
                                                                                                                                                                                                                match._edge_c15 = candidate_ss_1_0_edge_c15;
                                                                                                                                                                                                                match._edge_c16 = candidate_ss_1_0_edge_c16;
                                                                                                                                                                                                                match._edge_c17 = candidate_ss_1_0_edge_c17;
                                                                                                                                                                                                                match._edge_c18 = candidate_ss_1_0_edge_c18;
                                                                                                                                                                                                                match._edge_c19 = candidate_ss_1_0_edge_c19;
                                                                                                                                                                                                                match._edge__edge0 = candidate_ss_1_0_edge__edge0;
                                                                                                                                                                                                                match._edge__edge1 = candidate_ss_1_0_edge__edge1;
                                                                                                                                                                                                                match._edge__edge2 = candidate_ss_1_0_edge__edge2;
                                                                                                                                                                                                                match._edge__edge3 = candidate_ss_1_0_edge__edge3;
                                                                                                                                                                                                                match._edge__edge4 = candidate_ss_1_0_edge__edge4;
                                                                                                                                                                                                                match_pat0._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat0_13;
                                                                                                                                                                                                                match_pat1._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat1_14;
                                                                                                                                                                                                                match_pat2._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat2_15;
                                                                                                                                                                                                                match_pat3._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat3_16;
                                                                                                                                                                                                                match_pat4._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat4_17;
                                                                                                                                                                                                                match_pat5._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat5_18;
                                                                                                                                                                                                                match_pat6._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat6_19;
                                                                                                                                                                                                                match_pat7._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat7_20;
                                                                                                                                                                                                                match_pat8._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat8_21;
                                                                                                                                                                                                                match_pat9._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat9_22;
                                                                                                                                                                                                                match_pat10._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat10_23;
                                                                                                                                                                                                                match._pat0 = match_pat0;
                                                                                                                                                                                                                match._pat1 = match_pat1;
                                                                                                                                                                                                                match._pat2 = match_pat2;
                                                                                                                                                                                                                match._pat3 = match_pat3;
                                                                                                                                                                                                                match._pat4 = match_pat4;
                                                                                                                                                                                                                match._pat5 = match_pat5;
                                                                                                                                                                                                                match._pat6 = match_pat6;
                                                                                                                                                                                                                match._pat7 = match_pat7;
                                                                                                                                                                                                                match._pat8 = match_pat8;
                                                                                                                                                                                                                match._pat9 = match_pat9;
                                                                                                                                                                                                                match._pat10 = match_pat10;
                                                                                                                                                                                                                matches.PositionWasFilledFixIt();
                                                                                                                                                                                                                // if enough matches were found, we leave
                                                                                                                                                                                                                if(maxMatches > 0 && matches.Count >= maxMatches)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    candidate_ss_1_0_node_v11.MoveInHeadAfter(candidate_ss_1_0_edge_c19);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v10_p0.MoveOutHeadAfter(candidate_ss_1_0_edge__edge0);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v10.MoveInHeadAfter(candidate_ss_1_0_edge_c17);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v10.MoveInHeadAfter(candidate_ss_1_0_edge_c16);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v10.MoveInHeadAfter(candidate_ss_1_0_edge_c15);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v10.MoveInHeadAfter(candidate_ss_1_0_edge_c14);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v4.MoveInHeadAfter(candidate_ss_1_0_edge_c18);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v3_p0.MoveOutHeadAfter(candidate_ss_1_0_edge__edge3);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v9.MoveInHeadAfter(candidate_ss_1_0_edge_c9);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v8_p0.MoveOutHeadAfter(candidate_ss_1_0_edge__edge1);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v3.MoveInHeadAfter(candidate_ss_1_0_edge_c13);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v3.MoveInHeadAfter(candidate_ss_1_0_edge_c12);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v3.MoveInHeadAfter(candidate_ss_1_0_edge_c11);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v3.MoveInHeadAfter(candidate_ss_1_0_edge_c10);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v1_p0.MoveOutHeadAfter(candidate_ss_1_0_edge__edge2);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v8.MoveInHeadAfter(candidate_ss_1_0_edge_c6);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v8.MoveInHeadAfter(candidate_ss_1_0_edge_c5);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v2.MoveInHeadAfter(candidate_ss_1_0_edge_c8);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v1.MoveInHeadAfter(candidate_ss_1_0_edge_c7);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v0_p0.MoveOutHeadAfter(candidate_ss_1_0_edge__edge4);
                                                                                                                                                                                                                    candidate_ss_1_0_node_r0.MoveInHeadAfter(candidate_ss_1_0_edge_c1);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v0.MoveInHeadAfter(candidate_ss_1_0_edge_c4);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v0.MoveInHeadAfter(candidate_ss_1_0_edge_c3);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v0.MoveInHeadAfter(candidate_ss_1_0_edge_c2);
                                                                                                                                                                                                                    graph.MoveHeadAfter(candidate_ss_1_0_edge_c0);
                                                                                                                                                                                                                    candidate_ss_1_0_node_v14.lgspFlags = candidate_ss_1_0_node_v14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v14;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c17.lgspFlags = candidate_ss_1_0_edge_c17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c17;
                                                                                                                                                                                                                    candidate_ss_1_0_node_v13.lgspFlags = candidate_ss_1_0_node_v13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v13;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c16.lgspFlags = candidate_ss_1_0_edge_c16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c16;
                                                                                                                                                                                                                    candidate_ss_1_0_node_v11.lgspFlags = candidate_ss_1_0_node_v11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v11;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c15.lgspFlags = candidate_ss_1_0_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c15;
                                                                                                                                                                                                                    candidate_ss_1_0_node_v5.lgspFlags = candidate_ss_1_0_node_v5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v5;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c18.lgspFlags = candidate_ss_1_0_edge_c18.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c18;
                                                                                                                                                                                                                    candidate_ss_1_0_node_rn1.lgspFlags = candidate_ss_1_0_node_rn1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_rn1;
                                                                                                                                                                                                                    candidate_ss_1_0_edge__edge3.lgspFlags = candidate_ss_1_0_edge__edge3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge__edge3;
                                                                                                                                                                                                                    candidate_ss_1_0_node_v10.lgspFlags = candidate_ss_1_0_node_v10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v10;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c9.lgspFlags = candidate_ss_1_0_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c9;
                                                                                                                                                                                                                    candidate_ss_1_0_node_right.lgspFlags = candidate_ss_1_0_node_right.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_right;
                                                                                                                                                                                                                    candidate_ss_1_0_edge__edge1.lgspFlags = candidate_ss_1_0_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge__edge1;
                                                                                                                                                                                                                    candidate_ss_1_0_node_v7.lgspFlags = candidate_ss_1_0_node_v7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v7;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c13.lgspFlags = candidate_ss_1_0_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c13;
                                                                                                                                                                                                                    candidate_ss_1_0_node_v6.lgspFlags = candidate_ss_1_0_node_v6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v6;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c12.lgspFlags = candidate_ss_1_0_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c12;
                                                                                                                                                                                                                    candidate_ss_1_0_node_v4.lgspFlags = candidate_ss_1_0_node_v4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v4;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c11.lgspFlags = candidate_ss_1_0_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c11;
                                                                                                                                                                                                                    candidate_ss_1_0_node_v3_p0.lgspFlags = candidate_ss_1_0_node_v3_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v3_p0;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c10.lgspFlags = candidate_ss_1_0_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c10;
                                                                                                                                                                                                                    candidate_ss_1_0_edge__edge2.lgspFlags = candidate_ss_1_0_edge__edge2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge__edge2;
                                                                                                                                                                                                                    candidate_ss_1_0_node_v9.lgspFlags = candidate_ss_1_0_node_v9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v9;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c6.lgspFlags = candidate_ss_1_0_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c6;
                                                                                                                                                                                                                    candidate_ss_1_0_node_v8_p0.lgspFlags = candidate_ss_1_0_node_v8_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v8_p0;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c5.lgspFlags = candidate_ss_1_0_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c5;
                                                                                                                                                                                                                    candidate_ss_1_0_node_v3.lgspFlags = candidate_ss_1_0_node_v3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v3;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c8.lgspFlags = candidate_ss_1_0_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c8;
                                                                                                                                                                                                                    candidate_ss_1_0_node_v1_p0.lgspFlags = candidate_ss_1_0_node_v1_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v1_p0;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c7.lgspFlags = candidate_ss_1_0_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c7;
                                                                                                                                                                                                                    candidate_ss_1_0_node_left.lgspFlags = candidate_ss_1_0_node_left.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_left;
                                                                                                                                                                                                                    candidate_ss_1_0_edge__edge4.lgspFlags = candidate_ss_1_0_edge__edge4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge__edge4;
                                                                                                                                                                                                                    candidate_ss_1_0_node_v8.lgspFlags = candidate_ss_1_0_node_v8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v8;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c1.lgspFlags = candidate_ss_1_0_edge_c1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c1;
                                                                                                                                                                                                                    candidate_ss_1_0_node_v2.lgspFlags = candidate_ss_1_0_node_v2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v2;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c4.lgspFlags = candidate_ss_1_0_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c4;
                                                                                                                                                                                                                    candidate_ss_1_0_node_v1.lgspFlags = candidate_ss_1_0_node_v1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v1;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c3.lgspFlags = candidate_ss_1_0_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c3;
                                                                                                                                                                                                                    candidate_ss_1_0_node_v0_p0.lgspFlags = candidate_ss_1_0_node_v0_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v0_p0;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c2.lgspFlags = candidate_ss_1_0_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c2;
                                                                                                                                                                                                                    candidate_ss_1_0_node_r0.lgspFlags = candidate_ss_1_0_node_r0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_r0;
                                                                                                                                                                                                                    candidate_ss_1_0_node_v0.lgspFlags = candidate_ss_1_0_node_v0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v0;
                                                                                                                                                                                                                    candidate_ss_1_0_edge_c0.lgspFlags = candidate_ss_1_0_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c0;
                                                                                                                                                                                                                    return matches;
                                                                                                                                                                                                                }
label48: ;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            while( (candidate_ss_1_0_edge_c19 = candidate_ss_1_0_edge_c19.lgspInNext) != head_candidate_ss_1_0_edge_c19 );
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    while( (candidate_ss_1_0_edge__edge0 = candidate_ss_1_0_edge__edge0.lgspOutNext) != head_candidate_ss_1_0_edge__edge0 );
                                                                                                                                                                                                }
                                                                                                                                                                                                candidate_ss_1_0_node_v14.lgspFlags = candidate_ss_1_0_node_v14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v14;
                                                                                                                                                                                                candidate_ss_1_0_edge_c17.lgspFlags = candidate_ss_1_0_edge_c17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c17;
label46: ;
                                                                                                                                                                                            }
                                                                                                                                                                                            while( (candidate_ss_1_0_edge_c17 = candidate_ss_1_0_edge_c17.lgspInNext) != head_candidate_ss_1_0_edge_c17 );
                                                                                                                                                                                        }
                                                                                                                                                                                        candidate_ss_1_0_node_v13.lgspFlags = candidate_ss_1_0_node_v13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v13;
                                                                                                                                                                                        candidate_ss_1_0_edge_c16.lgspFlags = candidate_ss_1_0_edge_c16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c16;
label44: ;
                                                                                                                                                                                    }
                                                                                                                                                                                    while( (candidate_ss_1_0_edge_c16 = candidate_ss_1_0_edge_c16.lgspInNext) != head_candidate_ss_1_0_edge_c16 );
                                                                                                                                                                                }
                                                                                                                                                                                candidate_ss_1_0_node_v11.lgspFlags = candidate_ss_1_0_node_v11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v11;
                                                                                                                                                                                candidate_ss_1_0_edge_c15.lgspFlags = candidate_ss_1_0_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c15;
label42: ;
                                                                                                                                                                            }
                                                                                                                                                                            while( (candidate_ss_1_0_edge_c15 = candidate_ss_1_0_edge_c15.lgspInNext) != head_candidate_ss_1_0_edge_c15 );
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    while( (candidate_ss_1_0_edge_c14 = candidate_ss_1_0_edge_c14.lgspInNext) != head_candidate_ss_1_0_edge_c14 );
                                                                                                                                                                }
                                                                                                                                                                candidate_ss_1_0_node_v5.lgspFlags = candidate_ss_1_0_node_v5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v5;
                                                                                                                                                                candidate_ss_1_0_edge_c18.lgspFlags = candidate_ss_1_0_edge_c18.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c18;
label40: ;
                                                                                                                                                            }
                                                                                                                                                            while( (candidate_ss_1_0_edge_c18 = candidate_ss_1_0_edge_c18.lgspInNext) != head_candidate_ss_1_0_edge_c18 );
                                                                                                                                                        }
                                                                                                                                                        candidate_ss_1_0_node_rn1.lgspFlags = candidate_ss_1_0_node_rn1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_rn1;
                                                                                                                                                        candidate_ss_1_0_edge__edge3.lgspFlags = candidate_ss_1_0_edge__edge3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge__edge3;
                                                                                                                                                    }
                                                                                                                                                    while( (candidate_ss_1_0_edge__edge3 = candidate_ss_1_0_edge__edge3.lgspOutNext) != head_candidate_ss_1_0_edge__edge3 );
                                                                                                                                                }
                                                                                                                                                candidate_ss_1_0_node_v10.lgspFlags = candidate_ss_1_0_node_v10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v10;
                                                                                                                                                candidate_ss_1_0_edge_c9.lgspFlags = candidate_ss_1_0_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c9;
                                                                                                                                            }
                                                                                                                                            while( (candidate_ss_1_0_edge_c9 = candidate_ss_1_0_edge_c9.lgspInNext) != head_candidate_ss_1_0_edge_c9 );
                                                                                                                                        }
                                                                                                                                        candidate_ss_1_0_node_right.lgspFlags = candidate_ss_1_0_node_right.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_right;
                                                                                                                                        candidate_ss_1_0_edge__edge1.lgspFlags = candidate_ss_1_0_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge__edge1;
                                                                                                                                    }
                                                                                                                                    while( (candidate_ss_1_0_edge__edge1 = candidate_ss_1_0_edge__edge1.lgspOutNext) != head_candidate_ss_1_0_edge__edge1 );
                                                                                                                                }
                                                                                                                                candidate_ss_1_0_node_v7.lgspFlags = candidate_ss_1_0_node_v7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v7;
                                                                                                                                candidate_ss_1_0_edge_c13.lgspFlags = candidate_ss_1_0_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c13;
label38: ;
                                                                                                                            }
                                                                                                                            while( (candidate_ss_1_0_edge_c13 = candidate_ss_1_0_edge_c13.lgspInNext) != head_candidate_ss_1_0_edge_c13 );
                                                                                                                        }
                                                                                                                        candidate_ss_1_0_node_v6.lgspFlags = candidate_ss_1_0_node_v6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v6;
                                                                                                                        candidate_ss_1_0_edge_c12.lgspFlags = candidate_ss_1_0_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c12;
label36: ;
                                                                                                                    }
                                                                                                                    while( (candidate_ss_1_0_edge_c12 = candidate_ss_1_0_edge_c12.lgspInNext) != head_candidate_ss_1_0_edge_c12 );
                                                                                                                }
                                                                                                                candidate_ss_1_0_node_v4.lgspFlags = candidate_ss_1_0_node_v4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v4;
                                                                                                                candidate_ss_1_0_edge_c11.lgspFlags = candidate_ss_1_0_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c11;
label34: ;
                                                                                                            }
                                                                                                            while( (candidate_ss_1_0_edge_c11 = candidate_ss_1_0_edge_c11.lgspInNext) != head_candidate_ss_1_0_edge_c11 );
                                                                                                        }
                                                                                                        candidate_ss_1_0_node_v3_p0.lgspFlags = candidate_ss_1_0_node_v3_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v3_p0;
                                                                                                        candidate_ss_1_0_edge_c10.lgspFlags = candidate_ss_1_0_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c10;
                                                                                                    }
                                                                                                    while( (candidate_ss_1_0_edge_c10 = candidate_ss_1_0_edge_c10.lgspInNext) != head_candidate_ss_1_0_edge_c10 );
                                                                                                }
                                                                                                candidate_ss_1_0_edge__edge2.lgspFlags = candidate_ss_1_0_edge__edge2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge__edge2;
                                                                                            }
                                                                                            while( (candidate_ss_1_0_edge__edge2 = candidate_ss_1_0_edge__edge2.lgspOutNext) != head_candidate_ss_1_0_edge__edge2 );
                                                                                        }
                                                                                        candidate_ss_1_0_node_v9.lgspFlags = candidate_ss_1_0_node_v9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v9;
                                                                                        candidate_ss_1_0_edge_c6.lgspFlags = candidate_ss_1_0_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c6;
label32: ;
                                                                                    }
                                                                                    while( (candidate_ss_1_0_edge_c6 = candidate_ss_1_0_edge_c6.lgspInNext) != head_candidate_ss_1_0_edge_c6 );
                                                                                }
                                                                                candidate_ss_1_0_node_v8_p0.lgspFlags = candidate_ss_1_0_node_v8_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v8_p0;
                                                                                candidate_ss_1_0_edge_c5.lgspFlags = candidate_ss_1_0_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c5;
                                                                            }
                                                                            while( (candidate_ss_1_0_edge_c5 = candidate_ss_1_0_edge_c5.lgspInNext) != head_candidate_ss_1_0_edge_c5 );
                                                                        }
                                                                        candidate_ss_1_0_node_v3.lgspFlags = candidate_ss_1_0_node_v3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v3;
                                                                        candidate_ss_1_0_edge_c8.lgspFlags = candidate_ss_1_0_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c8;
                                                                    }
                                                                    while( (candidate_ss_1_0_edge_c8 = candidate_ss_1_0_edge_c8.lgspInNext) != head_candidate_ss_1_0_edge_c8 );
                                                                }
                                                                candidate_ss_1_0_node_v1_p0.lgspFlags = candidate_ss_1_0_node_v1_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v1_p0;
                                                                candidate_ss_1_0_edge_c7.lgspFlags = candidate_ss_1_0_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c7;
                                                            }
                                                            while( (candidate_ss_1_0_edge_c7 = candidate_ss_1_0_edge_c7.lgspInNext) != head_candidate_ss_1_0_edge_c7 );
                                                        }
                                                        candidate_ss_1_0_node_left.lgspFlags = candidate_ss_1_0_node_left.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_left;
                                                        candidate_ss_1_0_edge__edge4.lgspFlags = candidate_ss_1_0_edge__edge4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge__edge4;
                                                    }
                                                    while( (candidate_ss_1_0_edge__edge4 = candidate_ss_1_0_edge__edge4.lgspOutNext) != head_candidate_ss_1_0_edge__edge4 );
                                                }
                                                candidate_ss_1_0_node_v8.lgspFlags = candidate_ss_1_0_node_v8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v8;
                                                candidate_ss_1_0_edge_c1.lgspFlags = candidate_ss_1_0_edge_c1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c1;
                                            }
                                            while( (candidate_ss_1_0_edge_c1 = candidate_ss_1_0_edge_c1.lgspInNext) != head_candidate_ss_1_0_edge_c1 );
                                        }
                                        candidate_ss_1_0_node_v2.lgspFlags = candidate_ss_1_0_node_v2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v2;
                                        candidate_ss_1_0_edge_c4.lgspFlags = candidate_ss_1_0_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c4;
label30: ;
                                    }
                                    while( (candidate_ss_1_0_edge_c4 = candidate_ss_1_0_edge_c4.lgspInNext) != head_candidate_ss_1_0_edge_c4 );
                                }
                                candidate_ss_1_0_node_v1.lgspFlags = candidate_ss_1_0_node_v1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v1;
                                candidate_ss_1_0_edge_c3.lgspFlags = candidate_ss_1_0_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c3;
label28: ;
                            }
                            while( (candidate_ss_1_0_edge_c3 = candidate_ss_1_0_edge_c3.lgspInNext) != head_candidate_ss_1_0_edge_c3 );
                        }
                        candidate_ss_1_0_node_v0_p0.lgspFlags = candidate_ss_1_0_node_v0_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v0_p0;
                        candidate_ss_1_0_edge_c2.lgspFlags = candidate_ss_1_0_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c2;
                    }
                    while( (candidate_ss_1_0_edge_c2 = candidate_ss_1_0_edge_c2.lgspInNext) != head_candidate_ss_1_0_edge_c2 );
                }
                candidate_ss_1_0_node_r0.lgspFlags = candidate_ss_1_0_node_r0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_r0;
                candidate_ss_1_0_node_v0.lgspFlags = candidate_ss_1_0_node_v0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_node_v0;
                candidate_ss_1_0_edge_c0.lgspFlags = candidate_ss_1_0_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_ss_1_0_edge_c0;
            }
            return matches;
        }
        /// <summary> Type of the matcher method (with parameters processing environment containing host graph, maximum number of matches to search for (zero=unlimited), and rule parameters; returning found matches). </summary>
        public delegate GRGEN_LIBGR.IMatchesExact<Rule_ss_1_0.IMatch_ss_1_0> MatchInvoker(GRGEN_LGSP.LGSPActionExecutionEnvironment actionEnv, int maxMatches);
        /// <summary> A delegate pointing to the current matcher program for this rule. </summary>
        public MatchInvoker DynamicMatch;
        /// <summary> The RulePattern object from which this LGSPAction object has been created. </summary>
        public GRGEN_LIBGR.IRulePattern RulePattern { get { return _rulePattern; } }
        public GRGEN_LIBGR.IMatchesExact<Rule_ss_1_0.IMatch_ss_1_0> Match(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int maxMatches)
        {
            return DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, maxMatches);
        }
        public void Modify(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, Rule_ss_1_0.IMatch_ss_1_0 match)
        {
            _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, match);
        }
        public void ModifyAll(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatchesExact<Rule_ss_1_0.IMatch_ss_1_0> matches)
        {
            foreach(Rule_ss_1_0.IMatch_ss_1_0 match in matches)
            {
                
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, match);
            }
        }
        public bool Apply(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_ss_1_0.IMatch_ss_1_0> matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
            if(matches.Count <= 0) return false;
            _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, matches.First);
            return true;
        }
        public int ApplyAll(int maxMatches, GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_ss_1_0.IMatch_ss_1_0> matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, maxMatches);
            if(matches.Count <= 0) return 0;
            foreach(Rule_ss_1_0.IMatch_ss_1_0 match in matches)
            {
                
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, match);
            }
            return matches.Count;
        }
        public bool ApplyStar(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_ss_1_0.IMatch_ss_1_0> matches;
            
            while(true)
            {
                matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
                if(matches.Count <= 0) return true;
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, matches.First);
            }
        }
        public bool ApplyPlus(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_ss_1_0.IMatch_ss_1_0> matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
            if(matches.Count <= 0) return false;
            
            do
            {
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, matches.First);
                matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
            }
            while(matches.Count > 0) ;
            return true;
        }
        public bool ApplyMinMax(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int min, int max)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_ss_1_0.IMatch_ss_1_0> matches;
            
            for(int i = 0; i < max; i++)
            {
                matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
                if(matches.Count <= 0) return i >= min;
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, matches.First);
            }
            return true;
        }
        // implementation of inexact action interface by delegation to exact action interface
        public GRGEN_LIBGR.IMatches Match(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int maxMatches, object[] parameters)
        {
            return Match(actionEnv, maxMatches);
        }
        public object[] Modify(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatch match)
        {
            
            Modify(actionEnv, (Rule_ss_1_0.IMatch_ss_1_0)match);
            return ReturnArray;
        }
        public List<object[]> ModifyAll(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatches matches)
        {
            ModifyAll(actionEnv, (GRGEN_LIBGR.IMatchesExact<Rule_ss_1_0.IMatch_ss_1_0>)matches);
            while(AvailableReturnArrays.Count < matches.Count) AvailableReturnArrays.Add(new object[0]);
            ReturnArrayListForAll.Clear();
            for(int i=0; i<matches.Count; ++i)
            {
                ReturnArrayListForAll.Add(AvailableReturnArrays[i]);
            }
            return ReturnArrayListForAll;
        }
        object[] GRGEN_LIBGR.IAction.Apply(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            
            if(Apply(actionEnv)) {
                return ReturnArray;
            }
            else return null;
        }
        object[] GRGEN_LIBGR.IAction.Apply(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, params object[] parameters)
        {
            
            if(Apply(actionEnv)) {
                return ReturnArray;
            }
            else return null;
        }
        public List<object[]> Reserve(int numReturns)
        {
            if(AvailableReturnArrays == null)
                AvailableReturnArrays = new List<object[]>();
            while(AvailableReturnArrays.Count < numReturns) AvailableReturnArrays.Add(new object[0]);
            if(ReturnArrayListForAll == null)
                ReturnArrayListForAll = new List<object[]>();
            ReturnArrayListForAll.Clear();
            for(int i=0; i<numReturns; ++i)
            {
                ReturnArrayListForAll.Add(AvailableReturnArrays[i]);
            }
            return ReturnArrayListForAll;
        }
        List<object[]> GRGEN_LIBGR.IAction.ApplyAll(int maxMatches, GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            int matchesCount = ApplyAll(maxMatches, actionEnv);
            while(AvailableReturnArrays.Count < matchesCount) AvailableReturnArrays.Add(new object[0]);
            ReturnArrayListForAll.Clear();
            for(int i=0; i<matchesCount; ++i)
            {
                ReturnArrayListForAll.Add(AvailableReturnArrays[i]);
            }
            return ReturnArrayListForAll;
        }
        List<object[]> GRGEN_LIBGR.IAction.ApplyAll(int maxMatches, GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, params object[] parameters)
        {
            int matchesCount = ApplyAll(maxMatches, actionEnv);
            while(AvailableReturnArrays.Count < matchesCount) AvailableReturnArrays.Add(new object[0]);
            ReturnArrayListForAll.Clear();
            for(int i=0; i<matchesCount; ++i)
            {
                ReturnArrayListForAll.Add(AvailableReturnArrays[i]);
            }
            return ReturnArrayListForAll;
        }
        bool GRGEN_LIBGR.IAction.ApplyStar(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            return ApplyStar(actionEnv);
        }
        bool GRGEN_LIBGR.IAction.ApplyStar(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, params object[] parameters)
        {
            return ApplyStar(actionEnv);
        }
        bool GRGEN_LIBGR.IAction.ApplyPlus(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            return ApplyPlus(actionEnv);
        }
        bool GRGEN_LIBGR.IAction.ApplyPlus(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, params object[] parameters)
        {
            return ApplyPlus(actionEnv);
        }
        bool GRGEN_LIBGR.IAction.ApplyMinMax(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int min, int max)
        {
            return ApplyMinMax(actionEnv, min, max);
        }
        bool GRGEN_LIBGR.IAction.ApplyMinMax(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int min, int max, params object[] parameters)
        {
            return ApplyMinMax(actionEnv, min, max);
        }
        public void Filter(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatches matches, GRGEN_LIBGR.FilterCallWithArguments filter)
        {
            switch(filter.PackagePrefixedName) {
                case "keepFirst": matches.Filter_keepFirst((System.Int32)(filter.Arguments[0])); break;
                case "keepLast": matches.Filter_keepLast((System.Int32)(filter.Arguments[0])); break;
                case "keepFirstFraction": matches.Filter_keepFirstFraction((System.Double)(filter.Arguments[0])); break;
                case "keepLastFraction": matches.Filter_keepLastFraction((System.Double)(filter.Arguments[0])); break;
                case "removeFirst": matches.Filter_removeFirst((System.Int32)(filter.Arguments[0])); break;
                case "removeLast": matches.Filter_removeLast((System.Int32)(filter.Arguments[0])); break;
                case "removeFirstFraction": matches.Filter_removeFirstFraction((System.Double)(filter.Arguments[0])); break;
                case "removeLastFraction": matches.Filter_removeLastFraction((System.Double)(filter.Arguments[0])); break;
                default: throw new Exception("Unknown filter name " + filter.PackagePrefixedName + "!");
            }
        }
    }
    
    /// <summary>
    /// An object representing an executable rule - same as IAction, but with exact types and distinct parameters.
    /// </summary>
    public interface IAction_initMvmt
    {
        /// <summary> same as IAction.Match, but with exact types and distinct parameters. </summary>
        GRGEN_LIBGR.IMatchesExact<Rule_initMvmt.IMatch_initMvmt> Match(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int maxMatches);
        /// <summary> same as IAction.Modify, but with exact types and distinct parameters. </summary>
        void Modify(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, Rule_initMvmt.IMatch_initMvmt match);
        /// <summary> same as IAction.ModifyAll, but with exact types and distinct parameters. </summary>
        void ModifyAll(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatchesExact<Rule_initMvmt.IMatch_initMvmt> matches);
        /// <summary> same as IAction.Apply, but with exact types and distinct parameters; returns true if applied </summary>
        bool Apply(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv);
        /// <summary> same as IAction.ApplyAll, but with exact types and distinct parameters; returns the number of matches found/applied. </summary>
        int ApplyAll(int maxMatches, GRGEN_LIBGR.IActionExecutionEnvironment actionEnv);
        /// <summary> same as IAction.ApplyStar, but with exact types and distinct parameters. </summary>
        bool ApplyStar(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv);
        /// <summary> same as IAction.ApplyPlus, but with exact types and distinct parameters. </summary>
        bool ApplyPlus(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv);
        /// <summary> same as IAction.ApplyMinMax, but with exact types and distinct parameters. </summary>
        bool ApplyMinMax(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int min, int max);
    }
    
    public class Action_initMvmt : GRGEN_LGSP.LGSPAction, GRGEN_LIBGR.IAction, IAction_initMvmt
    {
        public Action_initMvmt()
            : base(Rule_initMvmt.Instance.patternGraph)
        {
            _rulePattern = Rule_initMvmt.Instance;
            DynamicMatch = myMatch;
        }

        public Rule_initMvmt _rulePattern;
        public override GRGEN_LGSP.LGSPRulePattern rulePattern { get { return _rulePattern; } }
        public override string Name { get { return "initMvmt"; } }
        [ThreadStatic] private static GRGEN_LGSP.LGSPMatchesList<Rule_initMvmt.Match_initMvmt, Rule_initMvmt.IMatch_initMvmt> matches;

        // Performance optimization: saves us usage of new for the return array or the return arrays. In the object/string-style modify/apply methods of the action interface implementation.
        [ThreadStatic] public static object[] ReturnArray;
        [ThreadStatic] public static List<object[]> ReturnArrayListForAll;
        [ThreadStatic] public static List<object[]> AvailableReturnArrays;
        public static Action_initMvmt Instance { get { return instance; } set { instance = value; } }
        private static Action_initMvmt instance = new Action_initMvmt();
        
        public GRGEN_LIBGR.IMatchesExact<Rule_initMvmt.IMatch_initMvmt> myMatch(GRGEN_LGSP.LGSPActionExecutionEnvironment actionEnv, int maxMatches)
        {
            GRGEN_LGSP.LGSPGraph graph = actionEnv.graph;
            if(matches == null)
                matches = new GRGEN_LGSP.LGSPMatchesList<Rule_initMvmt.Match_initMvmt, Rule_initMvmt.IMatch_initMvmt>(this);
            matches.Clear();
            if(ReturnArray == null)
                ReturnArray = new object[0];
            int isoSpace = 0;
            Stack<GRGEN_LGSP.LGSPSubpatternAction> openTasks = new Stack<GRGEN_LGSP.LGSPSubpatternAction>();
            List<Stack<GRGEN_LIBGR.IMatch>> foundPartialMatches = new List<Stack<GRGEN_LIBGR.IMatch>>();
            List<Stack<GRGEN_LIBGR.IMatch>> matchesList = foundPartialMatches;
            // Lookup initMvmt_edge_c0 
            int type_id_candidate_initMvmt_edge_c0 = 3;
            for(GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c0 = graph.edgesByTypeHeads[type_id_candidate_initMvmt_edge_c0], candidate_initMvmt_edge_c0 = head_candidate_initMvmt_edge_c0.lgspTypeNext; candidate_initMvmt_edge_c0 != head_candidate_initMvmt_edge_c0; candidate_initMvmt_edge_c0 = candidate_initMvmt_edge_c0.lgspTypeNext)
            {
                uint prev__candidate_initMvmt_edge_c0;
                prev__candidate_initMvmt_edge_c0 = candidate_initMvmt_edge_c0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                candidate_initMvmt_edge_c0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                // Implicit Source initMvmt_node_v0 from initMvmt_edge_c0 
                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v0 = candidate_initMvmt_edge_c0.lgspSource;
                if(candidate_initMvmt_node_v0.lgspType.TypeID!=15) {
                    candidate_initMvmt_edge_c0.lgspFlags = candidate_initMvmt_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c0;
                    continue;
                }
                uint prev__candidate_initMvmt_node_v0;
                prev__candidate_initMvmt_node_v0 = candidate_initMvmt_node_v0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                candidate_initMvmt_node_v0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat7_31 assigned from expression 3 
                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat7_31 = (System.Int32)3;
                // Implicit Target initMvmt_node_r0 from initMvmt_edge_c0 
                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_r0 = candidate_initMvmt_edge_c0.lgspTarget;
                if((candidate_initMvmt_node_r0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                {
                    candidate_initMvmt_node_v0.lgspFlags = candidate_initMvmt_node_v0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v0;
                    candidate_initMvmt_edge_c0.lgspFlags = candidate_initMvmt_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c0;
                    continue;
                }
                uint prev__candidate_initMvmt_node_r0;
                prev__candidate_initMvmt_node_r0 = candidate_initMvmt_node_r0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                candidate_initMvmt_node_r0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                // Element nac_NodesWithoutSites_node_src_inlined_pat7_31 assigned from other element initMvmt_node_v0 
                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat7_31 = candidate_initMvmt_node_v0;
                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat7_31.lgspType.TypeID]) {
                    candidate_initMvmt_node_r0.lgspFlags = candidate_initMvmt_node_r0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_r0;
                    candidate_initMvmt_node_v0.lgspFlags = candidate_initMvmt_node_v0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v0;
                    candidate_initMvmt_edge_c0.lgspFlags = candidate_initMvmt_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c0;
                    continue;
                }
                // NegativePattern 
                {
                    ++isoSpace;
                    // Condition 
                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat7_31, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat7_31))) {
                        --isoSpace;
                        goto label49;
                    }
                    // negative pattern found
                    --isoSpace;
                    candidate_initMvmt_node_r0.lgspFlags = candidate_initMvmt_node_r0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_r0;
                    candidate_initMvmt_node_v0.lgspFlags = candidate_initMvmt_node_v0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v0;
                    candidate_initMvmt_edge_c0.lgspFlags = candidate_initMvmt_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c0;
                    goto label50;
                    --isoSpace;
                }
label49: ;
                // Extend Incoming initMvmt_edge_c4 from initMvmt_node_v0 
                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c4 = candidate_initMvmt_node_v0.lgspInhead;
                if(head_candidate_initMvmt_edge_c4 != null)
                {
                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c4 = head_candidate_initMvmt_edge_c4;
                    do
                    {
                        if(candidate_initMvmt_edge_c4.lgspType.TypeID!=5) {
                            continue;
                        }
                        uint prev__candidate_initMvmt_edge_c4;
                        prev__candidate_initMvmt_edge_c4 = candidate_initMvmt_edge_c4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                        candidate_initMvmt_edge_c4.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                        // Implicit Source initMvmt_node_v0_p0 from initMvmt_edge_c4 
                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v0_p0 = candidate_initMvmt_edge_c4.lgspSource;
                        if(candidate_initMvmt_node_v0_p0.lgspType.TypeID!=7) {
                            candidate_initMvmt_edge_c4.lgspFlags = candidate_initMvmt_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c4;
                            continue;
                        }
                        if((candidate_initMvmt_node_v0_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                        {
                            candidate_initMvmt_edge_c4.lgspFlags = candidate_initMvmt_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c4;
                            continue;
                        }
                        uint prev__candidate_initMvmt_node_v0_p0;
                        prev__candidate_initMvmt_node_v0_p0 = candidate_initMvmt_node_v0_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                        candidate_initMvmt_node_v0_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                        // Condition 
                        if(!((((GRGEN_MODEL.IBPort)candidate_initMvmt_node_v0_p0).@ix == 0))) {
                            candidate_initMvmt_node_v0_p0.lgspFlags = candidate_initMvmt_node_v0_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v0_p0;
                            candidate_initMvmt_edge_c4.lgspFlags = candidate_initMvmt_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c4;
                            continue;
                        }
                        // Extend Incoming initMvmt_edge_c5 from initMvmt_node_v0 
                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c5 = candidate_initMvmt_node_v0.lgspInhead;
                        if(head_candidate_initMvmt_edge_c5 != null)
                        {
                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c5 = head_candidate_initMvmt_edge_c5;
                            do
                            {
                                if(candidate_initMvmt_edge_c5.lgspType.TypeID!=3) {
                                    continue;
                                }
                                if((candidate_initMvmt_edge_c5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                {
                                    continue;
                                }
                                uint prev__candidate_initMvmt_edge_c5;
                                prev__candidate_initMvmt_edge_c5 = candidate_initMvmt_edge_c5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                candidate_initMvmt_edge_c5.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                // Implicit Source initMvmt_node_v1 from initMvmt_edge_c5 
                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v1 = candidate_initMvmt_edge_c5.lgspSource;
                                if(candidate_initMvmt_node_v1.lgspType.TypeID!=16) {
                                    candidate_initMvmt_edge_c5.lgspFlags = candidate_initMvmt_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c5;
                                    continue;
                                }
                                if((candidate_initMvmt_node_v1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                {
                                    candidate_initMvmt_edge_c5.lgspFlags = candidate_initMvmt_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c5;
                                    continue;
                                }
                                uint prev__candidate_initMvmt_node_v1;
                                prev__candidate_initMvmt_node_v1 = candidate_initMvmt_node_v1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                candidate_initMvmt_node_v1.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat8_32 assigned from expression 0 
                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat8_32 = (System.Int32)0;
                                // Element nac_NodesWithoutSites_node_src_inlined_pat8_32 assigned from other element initMvmt_node_v1 
                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat8_32 = candidate_initMvmt_node_v1;
                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat8_32.lgspType.TypeID]) {
                                    candidate_initMvmt_node_v1.lgspFlags = candidate_initMvmt_node_v1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v1;
                                    candidate_initMvmt_edge_c5.lgspFlags = candidate_initMvmt_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c5;
                                    continue;
                                }
                                // NegativePattern 
                                {
                                    ++isoSpace;
                                    // Condition 
                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat8_32, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat8_32))) {
                                        --isoSpace;
                                        goto label51;
                                    }
                                    // negative pattern found
                                    --isoSpace;
                                    candidate_initMvmt_node_v1.lgspFlags = candidate_initMvmt_node_v1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v1;
                                    candidate_initMvmt_edge_c5.lgspFlags = candidate_initMvmt_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c5;
                                    goto label52;
                                    --isoSpace;
                                }
label51: ;
                                // Extend Incoming initMvmt_edge_c6 from initMvmt_node_v0 
                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c6 = candidate_initMvmt_node_v0.lgspInhead;
                                if(head_candidate_initMvmt_edge_c6 != null)
                                {
                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c6 = head_candidate_initMvmt_edge_c6;
                                    do
                                    {
                                        if(candidate_initMvmt_edge_c6.lgspType.TypeID!=3) {
                                            continue;
                                        }
                                        if((candidate_initMvmt_edge_c6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                        {
                                            continue;
                                        }
                                        uint prev__candidate_initMvmt_edge_c6;
                                        prev__candidate_initMvmt_edge_c6 = candidate_initMvmt_edge_c6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                        candidate_initMvmt_edge_c6.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                        // Implicit Source initMvmt_node_v2 from initMvmt_edge_c6 
                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v2 = candidate_initMvmt_edge_c6.lgspSource;
                                        if(candidate_initMvmt_node_v2.lgspType.TypeID!=16) {
                                            candidate_initMvmt_edge_c6.lgspFlags = candidate_initMvmt_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c6;
                                            continue;
                                        }
                                        if((candidate_initMvmt_node_v2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                        {
                                            candidate_initMvmt_edge_c6.lgspFlags = candidate_initMvmt_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c6;
                                            continue;
                                        }
                                        uint prev__candidate_initMvmt_node_v2;
                                        prev__candidate_initMvmt_node_v2 = candidate_initMvmt_node_v2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                        candidate_initMvmt_node_v2.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat10_34 assigned from expression 0 
                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat10_34 = (System.Int32)0;
                                        // Element nac_NodesWithoutSites_node_src_inlined_pat10_34 assigned from other element initMvmt_node_v2 
                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat10_34 = candidate_initMvmt_node_v2;
                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat10_34.lgspType.TypeID]) {
                                            candidate_initMvmt_node_v2.lgspFlags = candidate_initMvmt_node_v2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v2;
                                            candidate_initMvmt_edge_c6.lgspFlags = candidate_initMvmt_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c6;
                                            continue;
                                        }
                                        // NegativePattern 
                                        {
                                            ++isoSpace;
                                            // Condition 
                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat10_34, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat10_34))) {
                                                --isoSpace;
                                                goto label53;
                                            }
                                            // negative pattern found
                                            --isoSpace;
                                            candidate_initMvmt_node_v2.lgspFlags = candidate_initMvmt_node_v2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v2;
                                            candidate_initMvmt_edge_c6.lgspFlags = candidate_initMvmt_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c6;
                                            goto label54;
                                            --isoSpace;
                                        }
label53: ;
                                        // Extend Incoming initMvmt_edge_c7 from initMvmt_node_v0 
                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c7 = candidate_initMvmt_node_v0.lgspInhead;
                                        if(head_candidate_initMvmt_edge_c7 != null)
                                        {
                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c7 = head_candidate_initMvmt_edge_c7;
                                            do
                                            {
                                                if(candidate_initMvmt_edge_c7.lgspType.TypeID!=3) {
                                                    continue;
                                                }
                                                if((candidate_initMvmt_edge_c7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                {
                                                    continue;
                                                }
                                                uint prev__candidate_initMvmt_edge_c7;
                                                prev__candidate_initMvmt_edge_c7 = candidate_initMvmt_edge_c7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                candidate_initMvmt_edge_c7.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                // Implicit Source initMvmt_node_v3 from initMvmt_edge_c7 
                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v3 = candidate_initMvmt_edge_c7.lgspSource;
                                                if(candidate_initMvmt_node_v3.lgspType.TypeID!=18) {
                                                    candidate_initMvmt_edge_c7.lgspFlags = candidate_initMvmt_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c7;
                                                    continue;
                                                }
                                                if((candidate_initMvmt_node_v3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                {
                                                    candidate_initMvmt_edge_c7.lgspFlags = candidate_initMvmt_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c7;
                                                    continue;
                                                }
                                                uint prev__candidate_initMvmt_node_v3;
                                                prev__candidate_initMvmt_node_v3 = candidate_initMvmt_node_v3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                candidate_initMvmt_node_v3.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat12_36 assigned from expression 0 
                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat12_36 = (System.Int32)0;
                                                // Element nac_NodesWithoutSites_node_src_inlined_pat12_36 assigned from other element initMvmt_node_v3 
                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat12_36 = candidate_initMvmt_node_v3;
                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat12_36.lgspType.TypeID]) {
                                                    candidate_initMvmt_node_v3.lgspFlags = candidate_initMvmt_node_v3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v3;
                                                    candidate_initMvmt_edge_c7.lgspFlags = candidate_initMvmt_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c7;
                                                    continue;
                                                }
                                                // NegativePattern 
                                                {
                                                    ++isoSpace;
                                                    // Condition 
                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat12_36, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat12_36))) {
                                                        --isoSpace;
                                                        goto label55;
                                                    }
                                                    // negative pattern found
                                                    --isoSpace;
                                                    candidate_initMvmt_node_v3.lgspFlags = candidate_initMvmt_node_v3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v3;
                                                    candidate_initMvmt_edge_c7.lgspFlags = candidate_initMvmt_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c7;
                                                    goto label56;
                                                    --isoSpace;
                                                }
label55: ;
                                                // Extend Incoming initMvmt_edge_c1 from initMvmt_node_r0 
                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c1 = candidate_initMvmt_node_r0.lgspInhead;
                                                if(head_candidate_initMvmt_edge_c1 != null)
                                                {
                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c1 = head_candidate_initMvmt_edge_c1;
                                                    do
                                                    {
                                                        if(candidate_initMvmt_edge_c1.lgspType.TypeID!=3) {
                                                            continue;
                                                        }
                                                        if((candidate_initMvmt_edge_c1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                        {
                                                            continue;
                                                        }
                                                        uint prev__candidate_initMvmt_edge_c1;
                                                        prev__candidate_initMvmt_edge_c1 = candidate_initMvmt_edge_c1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                        candidate_initMvmt_edge_c1.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                        // Implicit Source initMvmt_node_v4 from initMvmt_edge_c1 
                                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v4 = candidate_initMvmt_edge_c1.lgspSource;
                                                        if(candidate_initMvmt_node_v4.lgspType.TypeID!=15) {
                                                            candidate_initMvmt_edge_c1.lgspFlags = candidate_initMvmt_edge_c1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c1;
                                                            continue;
                                                        }
                                                        if((candidate_initMvmt_node_v4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                        {
                                                            candidate_initMvmt_edge_c1.lgspFlags = candidate_initMvmt_edge_c1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c1;
                                                            continue;
                                                        }
                                                        uint prev__candidate_initMvmt_node_v4;
                                                        prev__candidate_initMvmt_node_v4 = candidate_initMvmt_node_v4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                        candidate_initMvmt_node_v4.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                        // Extend Incoming initMvmt_edge_c2 from initMvmt_node_r0 
                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c2 = candidate_initMvmt_node_r0.lgspInhead;
                                                        if(head_candidate_initMvmt_edge_c2 != null)
                                                        {
                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c2 = head_candidate_initMvmt_edge_c2;
                                                            do
                                                            {
                                                                if(candidate_initMvmt_edge_c2.lgspType.TypeID!=3) {
                                                                    continue;
                                                                }
                                                                if((candidate_initMvmt_edge_c2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                {
                                                                    continue;
                                                                }
                                                                uint prev__candidate_initMvmt_edge_c2;
                                                                prev__candidate_initMvmt_edge_c2 = candidate_initMvmt_edge_c2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                candidate_initMvmt_edge_c2.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                // Implicit Source initMvmt_node_v7 from initMvmt_edge_c2 
                                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v7 = candidate_initMvmt_edge_c2.lgspSource;
                                                                if(candidate_initMvmt_node_v7.lgspType.TypeID!=15) {
                                                                    candidate_initMvmt_edge_c2.lgspFlags = candidate_initMvmt_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c2;
                                                                    continue;
                                                                }
                                                                if((candidate_initMvmt_node_v7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                {
                                                                    candidate_initMvmt_edge_c2.lgspFlags = candidate_initMvmt_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c2;
                                                                    continue;
                                                                }
                                                                uint prev__candidate_initMvmt_node_v7;
                                                                prev__candidate_initMvmt_node_v7 = candidate_initMvmt_node_v7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                candidate_initMvmt_node_v7.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat1_25 assigned from expression 2 
                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat1_25 = (System.Int32)2;
                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat1_25 assigned from other element initMvmt_node_v7 
                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat1_25 = candidate_initMvmt_node_v7;
                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat1_25.lgspType.TypeID]) {
                                                                    candidate_initMvmt_node_v7.lgspFlags = candidate_initMvmt_node_v7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v7;
                                                                    candidate_initMvmt_edge_c2.lgspFlags = candidate_initMvmt_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c2;
                                                                    continue;
                                                                }
                                                                // NegativePattern 
                                                                {
                                                                    ++isoSpace;
                                                                    // Condition 
                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat1_25, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat1_25))) {
                                                                        --isoSpace;
                                                                        goto label57;
                                                                    }
                                                                    // negative pattern found
                                                                    --isoSpace;
                                                                    candidate_initMvmt_node_v7.lgspFlags = candidate_initMvmt_node_v7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v7;
                                                                    candidate_initMvmt_edge_c2.lgspFlags = candidate_initMvmt_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c2;
                                                                    goto label58;
                                                                    --isoSpace;
                                                                }
label57: ;
                                                                // Extend Incoming initMvmt_edge_c3 from initMvmt_node_r0 
                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c3 = candidate_initMvmt_node_r0.lgspInhead;
                                                                if(head_candidate_initMvmt_edge_c3 != null)
                                                                {
                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c3 = head_candidate_initMvmt_edge_c3;
                                                                    do
                                                                    {
                                                                        if(candidate_initMvmt_edge_c3.lgspType.TypeID!=3) {
                                                                            continue;
                                                                        }
                                                                        if((candidate_initMvmt_edge_c3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_initMvmt_edge_c3;
                                                                        prev__candidate_initMvmt_edge_c3 = candidate_initMvmt_edge_c3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                        candidate_initMvmt_edge_c3.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                        // Implicit Source initMvmt_node_v14 from initMvmt_edge_c3 
                                                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v14 = candidate_initMvmt_edge_c3.lgspSource;
                                                                        if(candidate_initMvmt_node_v14.lgspType.TypeID!=15) {
                                                                            candidate_initMvmt_edge_c3.lgspFlags = candidate_initMvmt_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c3;
                                                                            continue;
                                                                        }
                                                                        if((candidate_initMvmt_node_v14.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                        {
                                                                            candidate_initMvmt_edge_c3.lgspFlags = candidate_initMvmt_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c3;
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_initMvmt_node_v14;
                                                                        prev__candidate_initMvmt_node_v14 = candidate_initMvmt_node_v14.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                        candidate_initMvmt_node_v14.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                        // Extend Outgoing initMvmt_edge__edge0 from initMvmt_node_v0_p0 
                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge__edge0 = candidate_initMvmt_node_v0_p0.lgspOuthead;
                                                                        if(head_candidate_initMvmt_edge__edge0 != null)
                                                                        {
                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge__edge0 = head_candidate_initMvmt_edge__edge0;
                                                                            do
                                                                            {
                                                                                if(candidate_initMvmt_edge__edge0.lgspType.TypeID!=7) {
                                                                                    continue;
                                                                                }
                                                                                uint prev__candidate_initMvmt_edge__edge0;
                                                                                prev__candidate_initMvmt_edge__edge0 = candidate_initMvmt_edge__edge0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                candidate_initMvmt_edge__edge0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                // Implicit Target initMvmt_node_y0 from initMvmt_edge__edge0 
                                                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_y0 = candidate_initMvmt_edge__edge0.lgspTarget;
                                                                                if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_initMvmt_node_y0.lgspType.TypeID]) {
                                                                                    candidate_initMvmt_edge__edge0.lgspFlags = candidate_initMvmt_edge__edge0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge0;
                                                                                    continue;
                                                                                }
                                                                                if((candidate_initMvmt_node_y0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                {
                                                                                    candidate_initMvmt_edge__edge0.lgspFlags = candidate_initMvmt_edge__edge0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge0;
                                                                                    continue;
                                                                                }
                                                                                uint prev__candidate_initMvmt_node_y0;
                                                                                prev__candidate_initMvmt_node_y0 = candidate_initMvmt_node_y0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                candidate_initMvmt_node_y0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                // Extend Incoming initMvmt_edge_c16 from initMvmt_node_v1 
                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c16 = candidate_initMvmt_node_v1.lgspInhead;
                                                                                if(head_candidate_initMvmt_edge_c16 != null)
                                                                                {
                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c16 = head_candidate_initMvmt_edge_c16;
                                                                                    do
                                                                                    {
                                                                                        if(candidate_initMvmt_edge_c16.lgspType.TypeID!=5) {
                                                                                            continue;
                                                                                        }
                                                                                        if((candidate_initMvmt_edge_c16.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        uint prev__candidate_initMvmt_edge_c16;
                                                                                        prev__candidate_initMvmt_edge_c16 = candidate_initMvmt_edge_c16.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                        candidate_initMvmt_edge_c16.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                        // Implicit Source initMvmt_node_v1_p0 from initMvmt_edge_c16 
                                                                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v1_p0 = candidate_initMvmt_edge_c16.lgspSource;
                                                                                        if(candidate_initMvmt_node_v1_p0.lgspType.TypeID!=7) {
                                                                                            candidate_initMvmt_edge_c16.lgspFlags = candidate_initMvmt_edge_c16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c16;
                                                                                            continue;
                                                                                        }
                                                                                        if((candidate_initMvmt_node_v1_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                        {
                                                                                            candidate_initMvmt_edge_c16.lgspFlags = candidate_initMvmt_edge_c16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c16;
                                                                                            continue;
                                                                                        }
                                                                                        uint prev__candidate_initMvmt_node_v1_p0;
                                                                                        prev__candidate_initMvmt_node_v1_p0 = candidate_initMvmt_node_v1_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                        candidate_initMvmt_node_v1_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                        // Condition 
                                                                                        if(!((((GRGEN_MODEL.IBPort)candidate_initMvmt_node_v1_p0).@ix == 0))) {
                                                                                            candidate_initMvmt_node_v1_p0.lgspFlags = candidate_initMvmt_node_v1_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v1_p0;
                                                                                            candidate_initMvmt_edge_c16.lgspFlags = candidate_initMvmt_edge_c16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c16;
                                                                                            continue;
                                                                                        }
                                                                                        // Extend Incoming initMvmt_edge_c17 from initMvmt_node_v2 
                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c17 = candidate_initMvmt_node_v2.lgspInhead;
                                                                                        if(head_candidate_initMvmt_edge_c17 != null)
                                                                                        {
                                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c17 = head_candidate_initMvmt_edge_c17;
                                                                                            do
                                                                                            {
                                                                                                if(candidate_initMvmt_edge_c17.lgspType.TypeID!=5) {
                                                                                                    continue;
                                                                                                }
                                                                                                if((candidate_initMvmt_edge_c17.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                uint prev__candidate_initMvmt_edge_c17;
                                                                                                prev__candidate_initMvmt_edge_c17 = candidate_initMvmt_edge_c17.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                candidate_initMvmt_edge_c17.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                // Implicit Source initMvmt_node_v2_p0 from initMvmt_edge_c17 
                                                                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v2_p0 = candidate_initMvmt_edge_c17.lgspSource;
                                                                                                if(candidate_initMvmt_node_v2_p0.lgspType.TypeID!=7) {
                                                                                                    candidate_initMvmt_edge_c17.lgspFlags = candidate_initMvmt_edge_c17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c17;
                                                                                                    continue;
                                                                                                }
                                                                                                if((candidate_initMvmt_node_v2_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                {
                                                                                                    candidate_initMvmt_edge_c17.lgspFlags = candidate_initMvmt_edge_c17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c17;
                                                                                                    continue;
                                                                                                }
                                                                                                uint prev__candidate_initMvmt_node_v2_p0;
                                                                                                prev__candidate_initMvmt_node_v2_p0 = candidate_initMvmt_node_v2_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                candidate_initMvmt_node_v2_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                // Condition 
                                                                                                if(!((((GRGEN_MODEL.IBPort)candidate_initMvmt_node_v2_p0).@ix == 0))) {
                                                                                                    candidate_initMvmt_node_v2_p0.lgspFlags = candidate_initMvmt_node_v2_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v2_p0;
                                                                                                    candidate_initMvmt_edge_c17.lgspFlags = candidate_initMvmt_edge_c17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c17;
                                                                                                    continue;
                                                                                                }
                                                                                                // Extend Incoming initMvmt_edge_c8 from initMvmt_node_v4 
                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c8 = candidate_initMvmt_node_v4.lgspInhead;
                                                                                                if(head_candidate_initMvmt_edge_c8 != null)
                                                                                                {
                                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c8 = head_candidate_initMvmt_edge_c8;
                                                                                                    do
                                                                                                    {
                                                                                                        if(candidate_initMvmt_edge_c8.lgspType.TypeID!=5) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        if((candidate_initMvmt_edge_c8.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        uint prev__candidate_initMvmt_edge_c8;
                                                                                                        prev__candidate_initMvmt_edge_c8 = candidate_initMvmt_edge_c8.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                        candidate_initMvmt_edge_c8.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                        // Implicit Source initMvmt_node_v4_p0 from initMvmt_edge_c8 
                                                                                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v4_p0 = candidate_initMvmt_edge_c8.lgspSource;
                                                                                                        if(candidate_initMvmt_node_v4_p0.lgspType.TypeID!=7) {
                                                                                                            candidate_initMvmt_edge_c8.lgspFlags = candidate_initMvmt_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c8;
                                                                                                            continue;
                                                                                                        }
                                                                                                        if((candidate_initMvmt_node_v4_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                        {
                                                                                                            candidate_initMvmt_edge_c8.lgspFlags = candidate_initMvmt_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c8;
                                                                                                            continue;
                                                                                                        }
                                                                                                        uint prev__candidate_initMvmt_node_v4_p0;
                                                                                                        prev__candidate_initMvmt_node_v4_p0 = candidate_initMvmt_node_v4_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                        candidate_initMvmt_node_v4_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                        // Condition 
                                                                                                        if(!((((GRGEN_MODEL.IBPort)candidate_initMvmt_node_v4_p0).@ix == 0))) {
                                                                                                            candidate_initMvmt_node_v4_p0.lgspFlags = candidate_initMvmt_node_v4_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v4_p0;
                                                                                                            candidate_initMvmt_edge_c8.lgspFlags = candidate_initMvmt_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c8;
                                                                                                            continue;
                                                                                                        }
                                                                                                        // Extend Incoming initMvmt_edge_c9 from initMvmt_node_v4 
                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c9 = candidate_initMvmt_node_v4.lgspInhead;
                                                                                                        if(head_candidate_initMvmt_edge_c9 != null)
                                                                                                        {
                                                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c9 = head_candidate_initMvmt_edge_c9;
                                                                                                            do
                                                                                                            {
                                                                                                                if(candidate_initMvmt_edge_c9.lgspType.TypeID!=3) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((candidate_initMvmt_edge_c9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                uint prev__candidate_initMvmt_edge_c9;
                                                                                                                prev__candidate_initMvmt_edge_c9 = candidate_initMvmt_edge_c9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                candidate_initMvmt_edge_c9.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                // Implicit Source initMvmt_node_v5 from initMvmt_edge_c9 
                                                                                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v5 = candidate_initMvmt_edge_c9.lgspSource;
                                                                                                                if(candidate_initMvmt_node_v5.lgspType.TypeID!=16) {
                                                                                                                    candidate_initMvmt_edge_c9.lgspFlags = candidate_initMvmt_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c9;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((candidate_initMvmt_node_v5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                {
                                                                                                                    candidate_initMvmt_edge_c9.lgspFlags = candidate_initMvmt_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c9;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                uint prev__candidate_initMvmt_node_v5;
                                                                                                                prev__candidate_initMvmt_node_v5 = candidate_initMvmt_node_v5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                candidate_initMvmt_node_v5.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat14_38 assigned from expression 0 
                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat14_38 = (System.Int32)0;
                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat14_38 assigned from other element initMvmt_node_v5 
                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat14_38 = candidate_initMvmt_node_v5;
                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat14_38.lgspType.TypeID]) {
                                                                                                                    candidate_initMvmt_node_v5.lgspFlags = candidate_initMvmt_node_v5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v5;
                                                                                                                    candidate_initMvmt_edge_c9.lgspFlags = candidate_initMvmt_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c9;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                // NegativePattern 
                                                                                                                {
                                                                                                                    ++isoSpace;
                                                                                                                    // Condition 
                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat14_38, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat14_38))) {
                                                                                                                        --isoSpace;
                                                                                                                        goto label59;
                                                                                                                    }
                                                                                                                    // negative pattern found
                                                                                                                    --isoSpace;
                                                                                                                    candidate_initMvmt_node_v5.lgspFlags = candidate_initMvmt_node_v5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v5;
                                                                                                                    candidate_initMvmt_edge_c9.lgspFlags = candidate_initMvmt_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c9;
                                                                                                                    goto label60;
                                                                                                                    --isoSpace;
                                                                                                                }
label59: ;
                                                                                                                // Extend Incoming initMvmt_edge_c10 from initMvmt_node_v4 
                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c10 = candidate_initMvmt_node_v4.lgspInhead;
                                                                                                                if(head_candidate_initMvmt_edge_c10 != null)
                                                                                                                {
                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c10 = head_candidate_initMvmt_edge_c10;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        if(candidate_initMvmt_edge_c10.lgspType.TypeID!=3) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if((candidate_initMvmt_edge_c10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        uint prev__candidate_initMvmt_edge_c10;
                                                                                                                        prev__candidate_initMvmt_edge_c10 = candidate_initMvmt_edge_c10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                        candidate_initMvmt_edge_c10.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                        // Implicit Source initMvmt_node_v6 from initMvmt_edge_c10 
                                                                                                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v6 = candidate_initMvmt_edge_c10.lgspSource;
                                                                                                                        if(candidate_initMvmt_node_v6.lgspType.TypeID!=18) {
                                                                                                                            candidate_initMvmt_edge_c10.lgspFlags = candidate_initMvmt_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c10;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if((candidate_initMvmt_node_v6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                        {
                                                                                                                            candidate_initMvmt_edge_c10.lgspFlags = candidate_initMvmt_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c10;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        uint prev__candidate_initMvmt_node_v6;
                                                                                                                        prev__candidate_initMvmt_node_v6 = candidate_initMvmt_node_v6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                        candidate_initMvmt_node_v6.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat0_24 assigned from expression 0 
                                                                                                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat0_24 = (System.Int32)0;
                                                                                                                        // Element nac_NodesWithoutSites_node_src_inlined_pat0_24 assigned from other element initMvmt_node_v6 
                                                                                                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat0_24 = candidate_initMvmt_node_v6;
                                                                                                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat0_24.lgspType.TypeID]) {
                                                                                                                            candidate_initMvmt_node_v6.lgspFlags = candidate_initMvmt_node_v6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v6;
                                                                                                                            candidate_initMvmt_edge_c10.lgspFlags = candidate_initMvmt_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c10;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        // NegativePattern 
                                                                                                                        {
                                                                                                                            ++isoSpace;
                                                                                                                            // Condition 
                                                                                                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat0_24, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat0_24))) {
                                                                                                                                --isoSpace;
                                                                                                                                goto label61;
                                                                                                                            }
                                                                                                                            // negative pattern found
                                                                                                                            --isoSpace;
                                                                                                                            candidate_initMvmt_node_v6.lgspFlags = candidate_initMvmt_node_v6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v6;
                                                                                                                            candidate_initMvmt_edge_c10.lgspFlags = candidate_initMvmt_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c10;
                                                                                                                            goto label62;
                                                                                                                            --isoSpace;
                                                                                                                        }
label61: ;
                                                                                                                        // Extend Incoming initMvmt_edge_c11 from initMvmt_node_v7 
                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c11 = candidate_initMvmt_node_v7.lgspInhead;
                                                                                                                        if(head_candidate_initMvmt_edge_c11 != null)
                                                                                                                        {
                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c11 = head_candidate_initMvmt_edge_c11;
                                                                                                                            do
                                                                                                                            {
                                                                                                                                if(candidate_initMvmt_edge_c11.lgspType.TypeID!=5) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if((candidate_initMvmt_edge_c11.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                uint prev__candidate_initMvmt_edge_c11;
                                                                                                                                prev__candidate_initMvmt_edge_c11 = candidate_initMvmt_edge_c11.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                candidate_initMvmt_edge_c11.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                // Implicit Source initMvmt_node_v7_p0 from initMvmt_edge_c11 
                                                                                                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v7_p0 = candidate_initMvmt_edge_c11.lgspSource;
                                                                                                                                if(candidate_initMvmt_node_v7_p0.lgspType.TypeID!=7) {
                                                                                                                                    candidate_initMvmt_edge_c11.lgspFlags = candidate_initMvmt_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c11;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if((candidate_initMvmt_node_v7_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                {
                                                                                                                                    candidate_initMvmt_edge_c11.lgspFlags = candidate_initMvmt_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c11;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                uint prev__candidate_initMvmt_node_v7_p0;
                                                                                                                                prev__candidate_initMvmt_node_v7_p0 = candidate_initMvmt_node_v7_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                candidate_initMvmt_node_v7_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                // Condition 
                                                                                                                                if(!((((GRGEN_MODEL.IBPort)candidate_initMvmt_node_v7_p0).@ix == 0))) {
                                                                                                                                    candidate_initMvmt_node_v7_p0.lgspFlags = candidate_initMvmt_node_v7_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v7_p0;
                                                                                                                                    candidate_initMvmt_edge_c11.lgspFlags = candidate_initMvmt_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c11;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                // Extend Incoming initMvmt_edge_c12 from initMvmt_node_v7 
                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c12 = candidate_initMvmt_node_v7.lgspInhead;
                                                                                                                                if(head_candidate_initMvmt_edge_c12 != null)
                                                                                                                                {
                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c12 = head_candidate_initMvmt_edge_c12;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                        if(candidate_initMvmt_edge_c12.lgspType.TypeID!=3) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if((candidate_initMvmt_edge_c12.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        uint prev__candidate_initMvmt_edge_c12;
                                                                                                                                        prev__candidate_initMvmt_edge_c12 = candidate_initMvmt_edge_c12.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                        candidate_initMvmt_edge_c12.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                        // Implicit Source initMvmt_node_v8 from initMvmt_edge_c12 
                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v8 = candidate_initMvmt_edge_c12.lgspSource;
                                                                                                                                        if(candidate_initMvmt_node_v8.lgspType.TypeID!=16) {
                                                                                                                                            candidate_initMvmt_edge_c12.lgspFlags = candidate_initMvmt_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c12;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if((candidate_initMvmt_node_v8.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                        {
                                                                                                                                            candidate_initMvmt_edge_c12.lgspFlags = candidate_initMvmt_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c12;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        uint prev__candidate_initMvmt_node_v8;
                                                                                                                                        prev__candidate_initMvmt_node_v8 = candidate_initMvmt_node_v8.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                        candidate_initMvmt_node_v8.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat2_26 assigned from expression 0 
                                                                                                                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat2_26 = (System.Int32)0;
                                                                                                                                        // Element nac_NodesWithoutSites_node_src_inlined_pat2_26 assigned from other element initMvmt_node_v8 
                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat2_26 = candidate_initMvmt_node_v8;
                                                                                                                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat2_26.lgspType.TypeID]) {
                                                                                                                                            candidate_initMvmt_node_v8.lgspFlags = candidate_initMvmt_node_v8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v8;
                                                                                                                                            candidate_initMvmt_edge_c12.lgspFlags = candidate_initMvmt_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c12;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        // NegativePattern 
                                                                                                                                        {
                                                                                                                                            ++isoSpace;
                                                                                                                                            // Condition 
                                                                                                                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat2_26, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat2_26))) {
                                                                                                                                                --isoSpace;
                                                                                                                                                goto label63;
                                                                                                                                            }
                                                                                                                                            // negative pattern found
                                                                                                                                            --isoSpace;
                                                                                                                                            candidate_initMvmt_node_v8.lgspFlags = candidate_initMvmt_node_v8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v8;
                                                                                                                                            candidate_initMvmt_edge_c12.lgspFlags = candidate_initMvmt_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c12;
                                                                                                                                            goto label64;
                                                                                                                                            --isoSpace;
                                                                                                                                        }
label63: ;
                                                                                                                                        // Extend Incoming initMvmt_edge_c13 from initMvmt_node_v7 
                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c13 = candidate_initMvmt_node_v7.lgspInhead;
                                                                                                                                        if(head_candidate_initMvmt_edge_c13 != null)
                                                                                                                                        {
                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c13 = head_candidate_initMvmt_edge_c13;
                                                                                                                                            do
                                                                                                                                            {
                                                                                                                                                if(candidate_initMvmt_edge_c13.lgspType.TypeID!=3) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if((candidate_initMvmt_edge_c13.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                uint prev__candidate_initMvmt_edge_c13;
                                                                                                                                                prev__candidate_initMvmt_edge_c13 = candidate_initMvmt_edge_c13.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                candidate_initMvmt_edge_c13.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                // Implicit Source initMvmt_node_v9 from initMvmt_edge_c13 
                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v9 = candidate_initMvmt_edge_c13.lgspSource;
                                                                                                                                                if(candidate_initMvmt_node_v9.lgspType.TypeID!=18) {
                                                                                                                                                    candidate_initMvmt_edge_c13.lgspFlags = candidate_initMvmt_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c13;
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if((candidate_initMvmt_node_v9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                {
                                                                                                                                                    candidate_initMvmt_edge_c13.lgspFlags = candidate_initMvmt_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c13;
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                uint prev__candidate_initMvmt_node_v9;
                                                                                                                                                prev__candidate_initMvmt_node_v9 = candidate_initMvmt_node_v9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                candidate_initMvmt_node_v9.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat3_27 assigned from expression 1 
                                                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat3_27 = (System.Int32)1;
                                                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat3_27 assigned from other element initMvmt_node_v9 
                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat3_27 = candidate_initMvmt_node_v9;
                                                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat3_27.lgspType.TypeID]) {
                                                                                                                                                    candidate_initMvmt_node_v9.lgspFlags = candidate_initMvmt_node_v9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v9;
                                                                                                                                                    candidate_initMvmt_edge_c13.lgspFlags = candidate_initMvmt_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c13;
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                // NegativePattern 
                                                                                                                                                {
                                                                                                                                                    ++isoSpace;
                                                                                                                                                    // Condition 
                                                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat3_27, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat3_27))) {
                                                                                                                                                        --isoSpace;
                                                                                                                                                        goto label65;
                                                                                                                                                    }
                                                                                                                                                    // negative pattern found
                                                                                                                                                    --isoSpace;
                                                                                                                                                    candidate_initMvmt_node_v9.lgspFlags = candidate_initMvmt_node_v9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v9;
                                                                                                                                                    candidate_initMvmt_edge_c13.lgspFlags = candidate_initMvmt_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c13;
                                                                                                                                                    goto label66;
                                                                                                                                                    --isoSpace;
                                                                                                                                                }
label65: ;
                                                                                                                                                // Extend Incoming initMvmt_edge_c14 from initMvmt_node_v14 
                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c14 = candidate_initMvmt_node_v14.lgspInhead;
                                                                                                                                                if(head_candidate_initMvmt_edge_c14 != null)
                                                                                                                                                {
                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c14 = head_candidate_initMvmt_edge_c14;
                                                                                                                                                    do
                                                                                                                                                    {
                                                                                                                                                        if(candidate_initMvmt_edge_c14.lgspType.TypeID!=5) {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if((candidate_initMvmt_edge_c14.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        uint prev__candidate_initMvmt_edge_c14;
                                                                                                                                                        prev__candidate_initMvmt_edge_c14 = candidate_initMvmt_edge_c14.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                        candidate_initMvmt_edge_c14.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                        // Implicit Source initMvmt_node_v14_p0 from initMvmt_edge_c14 
                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v14_p0 = candidate_initMvmt_edge_c14.lgspSource;
                                                                                                                                                        if(candidate_initMvmt_node_v14_p0.lgspType.TypeID!=7) {
                                                                                                                                                            candidate_initMvmt_edge_c14.lgspFlags = candidate_initMvmt_edge_c14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c14;
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if((candidate_initMvmt_node_v14_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                        {
                                                                                                                                                            candidate_initMvmt_edge_c14.lgspFlags = candidate_initMvmt_edge_c14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c14;
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        uint prev__candidate_initMvmt_node_v14_p0;
                                                                                                                                                        prev__candidate_initMvmt_node_v14_p0 = candidate_initMvmt_node_v14_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                        candidate_initMvmt_node_v14_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                        // Condition 
                                                                                                                                                        if(!((((GRGEN_MODEL.IBPort)candidate_initMvmt_node_v14_p0).@ix == 0))) {
                                                                                                                                                            candidate_initMvmt_node_v14_p0.lgspFlags = candidate_initMvmt_node_v14_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v14_p0;
                                                                                                                                                            candidate_initMvmt_edge_c14.lgspFlags = candidate_initMvmt_edge_c14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c14;
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        // Extend Incoming initMvmt_edge_c15 from initMvmt_node_v14 
                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c15 = candidate_initMvmt_node_v14.lgspInhead;
                                                                                                                                                        if(head_candidate_initMvmt_edge_c15 != null)
                                                                                                                                                        {
                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c15 = head_candidate_initMvmt_edge_c15;
                                                                                                                                                            do
                                                                                                                                                            {
                                                                                                                                                                if(candidate_initMvmt_edge_c15.lgspType.TypeID!=3) {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if((candidate_initMvmt_edge_c15.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                uint prev__candidate_initMvmt_edge_c15;
                                                                                                                                                                prev__candidate_initMvmt_edge_c15 = candidate_initMvmt_edge_c15.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                candidate_initMvmt_edge_c15.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                // Implicit Source initMvmt_node_v15 from initMvmt_edge_c15 
                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v15 = candidate_initMvmt_edge_c15.lgspSource;
                                                                                                                                                                if(candidate_initMvmt_node_v15.lgspType.TypeID!=18) {
                                                                                                                                                                    candidate_initMvmt_edge_c15.lgspFlags = candidate_initMvmt_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c15;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if((candidate_initMvmt_node_v15.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                {
                                                                                                                                                                    candidate_initMvmt_edge_c15.lgspFlags = candidate_initMvmt_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c15;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                uint prev__candidate_initMvmt_node_v15;
                                                                                                                                                                prev__candidate_initMvmt_node_v15 = candidate_initMvmt_node_v15.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                candidate_initMvmt_node_v15.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat9_33 assigned from expression 1 
                                                                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat9_33 = (System.Int32)1;
                                                                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat9_33 assigned from other element initMvmt_node_v15 
                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat9_33 = candidate_initMvmt_node_v15;
                                                                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat9_33.lgspType.TypeID]) {
                                                                                                                                                                    candidate_initMvmt_node_v15.lgspFlags = candidate_initMvmt_node_v15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v15;
                                                                                                                                                                    candidate_initMvmt_edge_c15.lgspFlags = candidate_initMvmt_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c15;
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                // NegativePattern 
                                                                                                                                                                {
                                                                                                                                                                    ++isoSpace;
                                                                                                                                                                    // Condition 
                                                                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat9_33, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat9_33))) {
                                                                                                                                                                        --isoSpace;
                                                                                                                                                                        goto label67;
                                                                                                                                                                    }
                                                                                                                                                                    // negative pattern found
                                                                                                                                                                    --isoSpace;
                                                                                                                                                                    candidate_initMvmt_node_v15.lgspFlags = candidate_initMvmt_node_v15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v15;
                                                                                                                                                                    candidate_initMvmt_edge_c15.lgspFlags = candidate_initMvmt_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c15;
                                                                                                                                                                    goto label68;
                                                                                                                                                                    --isoSpace;
                                                                                                                                                                }
label67: ;
                                                                                                                                                                // Extend Outgoing initMvmt_edge__edge8 from initMvmt_node_v1_p0 
                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge__edge8 = candidate_initMvmt_node_v1_p0.lgspOuthead;
                                                                                                                                                                if(head_candidate_initMvmt_edge__edge8 != null)
                                                                                                                                                                {
                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge__edge8 = head_candidate_initMvmt_edge__edge8;
                                                                                                                                                                    do
                                                                                                                                                                    {
                                                                                                                                                                        if(candidate_initMvmt_edge__edge8.lgspType.TypeID!=7) {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if((candidate_initMvmt_edge__edge8.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        uint prev__candidate_initMvmt_edge__edge8;
                                                                                                                                                                        prev__candidate_initMvmt_edge__edge8 = candidate_initMvmt_edge__edge8.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                        candidate_initMvmt_edge__edge8.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                        // Extend Outgoing initMvmt_edge__edge3 from initMvmt_node_v2_p0 
                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge__edge3 = candidate_initMvmt_node_v2_p0.lgspOuthead;
                                                                                                                                                                        if(head_candidate_initMvmt_edge__edge3 != null)
                                                                                                                                                                        {
                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge__edge3 = head_candidate_initMvmt_edge__edge3;
                                                                                                                                                                            do
                                                                                                                                                                            {
                                                                                                                                                                                if(candidate_initMvmt_edge__edge3.lgspType.TypeID!=7) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if((candidate_initMvmt_edge__edge3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                uint prev__candidate_initMvmt_edge__edge3;
                                                                                                                                                                                prev__candidate_initMvmt_edge__edge3 = candidate_initMvmt_edge__edge3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                candidate_initMvmt_edge__edge3.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                // Extend Outgoing initMvmt_edge__edge7 from initMvmt_node_v4_p0 
                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge__edge7 = candidate_initMvmt_node_v4_p0.lgspOuthead;
                                                                                                                                                                                if(head_candidate_initMvmt_edge__edge7 != null)
                                                                                                                                                                                {
                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge__edge7 = head_candidate_initMvmt_edge__edge7;
                                                                                                                                                                                    do
                                                                                                                                                                                    {
                                                                                                                                                                                        if(candidate_initMvmt_edge__edge7.lgspType.TypeID!=7) {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        if((candidate_initMvmt_edge__edge7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                        {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        uint prev__candidate_initMvmt_edge__edge7;
                                                                                                                                                                                        prev__candidate_initMvmt_edge__edge7 = candidate_initMvmt_edge__edge7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                        candidate_initMvmt_edge__edge7.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                        // Implicit Target initMvmt_node_y1 from initMvmt_edge__edge7 
                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_y1 = candidate_initMvmt_edge__edge7.lgspTarget;
                                                                                                                                                                                        if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_initMvmt_node_y1.lgspType.TypeID]) {
                                                                                                                                                                                            candidate_initMvmt_edge__edge7.lgspFlags = candidate_initMvmt_edge__edge7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge7;
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        if(candidate_initMvmt_edge__edge8.lgspTarget != candidate_initMvmt_node_y1) {
                                                                                                                                                                                            candidate_initMvmt_edge__edge7.lgspFlags = candidate_initMvmt_edge__edge7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge7;
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        if((candidate_initMvmt_node_y1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                        {
                                                                                                                                                                                            candidate_initMvmt_edge__edge7.lgspFlags = candidate_initMvmt_edge__edge7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge7;
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        uint prev__candidate_initMvmt_node_y1;
                                                                                                                                                                                        prev__candidate_initMvmt_node_y1 = candidate_initMvmt_node_y1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                        candidate_initMvmt_node_y1.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                        // Extend Incoming initMvmt_edge_c18 from initMvmt_node_v5 
                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c18 = candidate_initMvmt_node_v5.lgspInhead;
                                                                                                                                                                                        if(head_candidate_initMvmt_edge_c18 != null)
                                                                                                                                                                                        {
                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c18 = head_candidate_initMvmt_edge_c18;
                                                                                                                                                                                            do
                                                                                                                                                                                            {
                                                                                                                                                                                                if(candidate_initMvmt_edge_c18.lgspType.TypeID!=5) {
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                if((candidate_initMvmt_edge_c18.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                {
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                uint prev__candidate_initMvmt_edge_c18;
                                                                                                                                                                                                prev__candidate_initMvmt_edge_c18 = candidate_initMvmt_edge_c18.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                candidate_initMvmt_edge_c18.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                // Implicit Source initMvmt_node_v5_p0 from initMvmt_edge_c18 
                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v5_p0 = candidate_initMvmt_edge_c18.lgspSource;
                                                                                                                                                                                                if(candidate_initMvmt_node_v5_p0.lgspType.TypeID!=7) {
                                                                                                                                                                                                    candidate_initMvmt_edge_c18.lgspFlags = candidate_initMvmt_edge_c18.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c18;
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                if((candidate_initMvmt_node_v5_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                {
                                                                                                                                                                                                    candidate_initMvmt_edge_c18.lgspFlags = candidate_initMvmt_edge_c18.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c18;
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                uint prev__candidate_initMvmt_node_v5_p0;
                                                                                                                                                                                                prev__candidate_initMvmt_node_v5_p0 = candidate_initMvmt_node_v5_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                candidate_initMvmt_node_v5_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                // Condition 
                                                                                                                                                                                                if(!((((GRGEN_MODEL.IBPort)candidate_initMvmt_node_v5_p0).@ix == 0))) {
                                                                                                                                                                                                    candidate_initMvmt_node_v5_p0.lgspFlags = candidate_initMvmt_node_v5_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v5_p0;
                                                                                                                                                                                                    candidate_initMvmt_edge_c18.lgspFlags = candidate_initMvmt_edge_c18.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c18;
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                // Extend Outgoing initMvmt_edge__edge2 from initMvmt_node_v7_p0 
                                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge__edge2 = candidate_initMvmt_node_v7_p0.lgspOuthead;
                                                                                                                                                                                                if(head_candidate_initMvmt_edge__edge2 != null)
                                                                                                                                                                                                {
                                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge__edge2 = head_candidate_initMvmt_edge__edge2;
                                                                                                                                                                                                    do
                                                                                                                                                                                                    {
                                                                                                                                                                                                        if(candidate_initMvmt_edge__edge2.lgspType.TypeID!=7) {
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if((candidate_initMvmt_edge__edge2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                        {
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        uint prev__candidate_initMvmt_edge__edge2;
                                                                                                                                                                                                        prev__candidate_initMvmt_edge__edge2 = candidate_initMvmt_edge__edge2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                        candidate_initMvmt_edge__edge2.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                        // Implicit Target initMvmt_node_y2 from initMvmt_edge__edge2 
                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_y2 = candidate_initMvmt_edge__edge2.lgspTarget;
                                                                                                                                                                                                        if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_initMvmt_node_y2.lgspType.TypeID]) {
                                                                                                                                                                                                            candidate_initMvmt_edge__edge2.lgspFlags = candidate_initMvmt_edge__edge2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge2;
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if(candidate_initMvmt_edge__edge3.lgspTarget != candidate_initMvmt_node_y2) {
                                                                                                                                                                                                            candidate_initMvmt_edge__edge2.lgspFlags = candidate_initMvmt_edge__edge2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge2;
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if((candidate_initMvmt_node_y2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                        {
                                                                                                                                                                                                            candidate_initMvmt_edge__edge2.lgspFlags = candidate_initMvmt_edge__edge2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge2;
                                                                                                                                                                                                            continue;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        uint prev__candidate_initMvmt_node_y2;
                                                                                                                                                                                                        prev__candidate_initMvmt_node_y2 = candidate_initMvmt_node_y2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                        candidate_initMvmt_node_y2.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                        // Extend Incoming initMvmt_edge_c19 from initMvmt_node_v8 
                                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c19 = candidate_initMvmt_node_v8.lgspInhead;
                                                                                                                                                                                                        if(head_candidate_initMvmt_edge_c19 != null)
                                                                                                                                                                                                        {
                                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c19 = head_candidate_initMvmt_edge_c19;
                                                                                                                                                                                                            do
                                                                                                                                                                                                            {
                                                                                                                                                                                                                if(candidate_initMvmt_edge_c19.lgspType.TypeID!=5) {
                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if((candidate_initMvmt_edge_c19.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                uint prev__candidate_initMvmt_edge_c19;
                                                                                                                                                                                                                prev__candidate_initMvmt_edge_c19 = candidate_initMvmt_edge_c19.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                candidate_initMvmt_edge_c19.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                // Implicit Source initMvmt_node_v8_p0 from initMvmt_edge_c19 
                                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v8_p0 = candidate_initMvmt_edge_c19.lgspSource;
                                                                                                                                                                                                                if(candidate_initMvmt_node_v8_p0.lgspType.TypeID!=7) {
                                                                                                                                                                                                                    candidate_initMvmt_edge_c19.lgspFlags = candidate_initMvmt_edge_c19.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c19;
                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if((candidate_initMvmt_node_v8_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    candidate_initMvmt_edge_c19.lgspFlags = candidate_initMvmt_edge_c19.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c19;
                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                uint prev__candidate_initMvmt_node_v8_p0;
                                                                                                                                                                                                                prev__candidate_initMvmt_node_v8_p0 = candidate_initMvmt_node_v8_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                candidate_initMvmt_node_v8_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                // Condition 
                                                                                                                                                                                                                if(!((((GRGEN_MODEL.IBPort)candidate_initMvmt_node_v8_p0).@ix == 0))) {
                                                                                                                                                                                                                    candidate_initMvmt_node_v8_p0.lgspFlags = candidate_initMvmt_node_v8_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v8_p0;
                                                                                                                                                                                                                    candidate_initMvmt_edge_c19.lgspFlags = candidate_initMvmt_edge_c19.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c19;
                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                // Extend Incoming initMvmt_edge_c20 from initMvmt_node_v9 
                                                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c20 = candidate_initMvmt_node_v9.lgspInhead;
                                                                                                                                                                                                                if(head_candidate_initMvmt_edge_c20 != null)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c20 = head_candidate_initMvmt_edge_c20;
                                                                                                                                                                                                                    do
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        if(candidate_initMvmt_edge_c20.lgspType.TypeID!=3) {
                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        if((candidate_initMvmt_edge_c20.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        uint prev__candidate_initMvmt_edge_c20;
                                                                                                                                                                                                                        prev__candidate_initMvmt_edge_c20 = candidate_initMvmt_edge_c20.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                        candidate_initMvmt_edge_c20.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                        // Implicit Source initMvmt_node_v10 from initMvmt_edge_c20 
                                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v10 = candidate_initMvmt_edge_c20.lgspSource;
                                                                                                                                                                                                                        if(candidate_initMvmt_node_v10.lgspType.TypeID!=19) {
                                                                                                                                                                                                                            candidate_initMvmt_edge_c20.lgspFlags = candidate_initMvmt_edge_c20.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c20;
                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        if((candidate_initMvmt_node_v10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            candidate_initMvmt_edge_c20.lgspFlags = candidate_initMvmt_edge_c20.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c20;
                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        uint prev__candidate_initMvmt_node_v10;
                                                                                                                                                                                                                        prev__candidate_initMvmt_node_v10 = candidate_initMvmt_node_v10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                        candidate_initMvmt_node_v10.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                        // Extend Outgoing initMvmt_edge__edge4 from initMvmt_node_v14_p0 
                                                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge__edge4 = candidate_initMvmt_node_v14_p0.lgspOuthead;
                                                                                                                                                                                                                        if(head_candidate_initMvmt_edge__edge4 != null)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge__edge4 = head_candidate_initMvmt_edge__edge4;
                                                                                                                                                                                                                            do
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                if(candidate_initMvmt_edge__edge4.lgspType.TypeID!=7) {
                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                if((candidate_initMvmt_edge__edge4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                uint prev__candidate_initMvmt_edge__edge4;
                                                                                                                                                                                                                                prev__candidate_initMvmt_edge__edge4 = candidate_initMvmt_edge__edge4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                candidate_initMvmt_edge__edge4.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                // Implicit Target initMvmt_node_y3 from initMvmt_edge__edge4 
                                                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_y3 = candidate_initMvmt_edge__edge4.lgspTarget;
                                                                                                                                                                                                                                if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_initMvmt_node_y3.lgspType.TypeID]) {
                                                                                                                                                                                                                                    candidate_initMvmt_edge__edge4.lgspFlags = candidate_initMvmt_edge__edge4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge4;
                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                if((candidate_initMvmt_node_y3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    candidate_initMvmt_edge__edge4.lgspFlags = candidate_initMvmt_edge__edge4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge4;
                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                uint prev__candidate_initMvmt_node_y3;
                                                                                                                                                                                                                                prev__candidate_initMvmt_node_y3 = candidate_initMvmt_node_y3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                candidate_initMvmt_node_y3.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                // Extend Incoming initMvmt_edge_c21 from initMvmt_node_v15 
                                                                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c21 = candidate_initMvmt_node_v15.lgspInhead;
                                                                                                                                                                                                                                if(head_candidate_initMvmt_edge_c21 != null)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c21 = head_candidate_initMvmt_edge_c21;
                                                                                                                                                                                                                                    do
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        if(candidate_initMvmt_edge_c21.lgspType.TypeID!=3) {
                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        if((candidate_initMvmt_edge_c21.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        uint prev__candidate_initMvmt_edge_c21;
                                                                                                                                                                                                                                        prev__candidate_initMvmt_edge_c21 = candidate_initMvmt_edge_c21.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                        candidate_initMvmt_edge_c21.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                        // Implicit Source initMvmt_node_v16 from initMvmt_edge_c21 
                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v16 = candidate_initMvmt_edge_c21.lgspSource;
                                                                                                                                                                                                                                        if(candidate_initMvmt_node_v16.lgspType.TypeID!=19) {
                                                                                                                                                                                                                                            candidate_initMvmt_edge_c21.lgspFlags = candidate_initMvmt_edge_c21.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c21;
                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        if((candidate_initMvmt_node_v16.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            candidate_initMvmt_edge_c21.lgspFlags = candidate_initMvmt_edge_c21.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c21;
                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        uint prev__candidate_initMvmt_node_v16;
                                                                                                                                                                                                                                        prev__candidate_initMvmt_node_v16 = candidate_initMvmt_node_v16.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                        candidate_initMvmt_node_v16.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                        // Extend Outgoing initMvmt_edge__edge5 from initMvmt_node_v5_p0 
                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge__edge5 = candidate_initMvmt_node_v5_p0.lgspOuthead;
                                                                                                                                                                                                                                        if(head_candidate_initMvmt_edge__edge5 != null)
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge__edge5 = head_candidate_initMvmt_edge__edge5;
                                                                                                                                                                                                                                            do
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                if(candidate_initMvmt_edge__edge5.lgspType.TypeID!=7) {
                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                if(candidate_initMvmt_edge__edge5.lgspTarget != candidate_initMvmt_node_y3) {
                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                if((candidate_initMvmt_edge__edge5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                uint prev__candidate_initMvmt_edge__edge5;
                                                                                                                                                                                                                                                prev__candidate_initMvmt_edge__edge5 = candidate_initMvmt_edge__edge5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                candidate_initMvmt_edge__edge5.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                // Extend Outgoing initMvmt_edge__edge6 from initMvmt_node_v8_p0 
                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge__edge6 = candidate_initMvmt_node_v8_p0.lgspOuthead;
                                                                                                                                                                                                                                                if(head_candidate_initMvmt_edge__edge6 != null)
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge__edge6 = head_candidate_initMvmt_edge__edge6;
                                                                                                                                                                                                                                                    do
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        if(candidate_initMvmt_edge__edge6.lgspType.TypeID!=7) {
                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        if(candidate_initMvmt_edge__edge6.lgspTarget != candidate_initMvmt_node_y3) {
                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        if((candidate_initMvmt_edge__edge6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        uint prev__candidate_initMvmt_edge__edge6;
                                                                                                                                                                                                                                                        prev__candidate_initMvmt_edge__edge6 = candidate_initMvmt_edge__edge6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                        candidate_initMvmt_edge__edge6.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                        // Extend Incoming initMvmt_edge_c22 from initMvmt_node_v10 
                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c22 = candidate_initMvmt_node_v10.lgspInhead;
                                                                                                                                                                                                                                                        if(head_candidate_initMvmt_edge_c22 != null)
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c22 = head_candidate_initMvmt_edge_c22;
                                                                                                                                                                                                                                                            do
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                if(candidate_initMvmt_edge_c22.lgspType.TypeID!=5) {
                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                if((candidate_initMvmt_edge_c22.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                uint prev__candidate_initMvmt_edge_c22;
                                                                                                                                                                                                                                                                prev__candidate_initMvmt_edge_c22 = candidate_initMvmt_edge_c22.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                candidate_initMvmt_edge_c22.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                // Implicit Source initMvmt_node_v10_p0 from initMvmt_edge_c22 
                                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v10_p0 = candidate_initMvmt_edge_c22.lgspSource;
                                                                                                                                                                                                                                                                if(candidate_initMvmt_node_v10_p0.lgspType.TypeID!=7) {
                                                                                                                                                                                                                                                                    candidate_initMvmt_edge_c22.lgspFlags = candidate_initMvmt_edge_c22.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c22;
                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                if((candidate_initMvmt_node_v10_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    candidate_initMvmt_edge_c22.lgspFlags = candidate_initMvmt_edge_c22.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c22;
                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                uint prev__candidate_initMvmt_node_v10_p0;
                                                                                                                                                                                                                                                                prev__candidate_initMvmt_node_v10_p0 = candidate_initMvmt_node_v10_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                candidate_initMvmt_node_v10_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                // Condition 
                                                                                                                                                                                                                                                                if(!((((GRGEN_MODEL.IBPort)candidate_initMvmt_node_v10_p0).@ix == 0))) {
                                                                                                                                                                                                                                                                    candidate_initMvmt_node_v10_p0.lgspFlags = candidate_initMvmt_node_v10_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v10_p0;
                                                                                                                                                                                                                                                                    candidate_initMvmt_edge_c22.lgspFlags = candidate_initMvmt_edge_c22.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c22;
                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                // Extend Incoming initMvmt_edge_c23 from initMvmt_node_v10 
                                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c23 = candidate_initMvmt_node_v10.lgspInhead;
                                                                                                                                                                                                                                                                if(head_candidate_initMvmt_edge_c23 != null)
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c23 = head_candidate_initMvmt_edge_c23;
                                                                                                                                                                                                                                                                    do
                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                        if(candidate_initMvmt_edge_c23.lgspType.TypeID!=3) {
                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        if((candidate_initMvmt_edge_c23.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        uint prev__candidate_initMvmt_edge_c23;
                                                                                                                                                                                                                                                                        prev__candidate_initMvmt_edge_c23 = candidate_initMvmt_edge_c23.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                        candidate_initMvmt_edge_c23.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                        // Implicit Source initMvmt_node_v11 from initMvmt_edge_c23 
                                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v11 = candidate_initMvmt_edge_c23.lgspSource;
                                                                                                                                                                                                                                                                        if(candidate_initMvmt_node_v11.lgspType.TypeID!=34) {
                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c23.lgspFlags = candidate_initMvmt_edge_c23.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c23;
                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        if((candidate_initMvmt_node_v11.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c23.lgspFlags = candidate_initMvmt_edge_c23.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c23;
                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        uint prev__candidate_initMvmt_node_v11;
                                                                                                                                                                                                                                                                        prev__candidate_initMvmt_node_v11 = candidate_initMvmt_node_v11.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                        candidate_initMvmt_node_v11.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat5_29 assigned from expression 1 
                                                                                                                                                                                                                                                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat5_29 = (System.Int32)1;
                                                                                                                                                                                                                                                                        // Element nac_NodesWithoutSites_node_src_inlined_pat5_29 assigned from other element initMvmt_node_v11 
                                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat5_29 = candidate_initMvmt_node_v11;
                                                                                                                                                                                                                                                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat5_29.lgspType.TypeID]) {
                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v11.lgspFlags = candidate_initMvmt_node_v11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v11;
                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c23.lgspFlags = candidate_initMvmt_edge_c23.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c23;
                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        // NegativePattern 
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            ++isoSpace;
                                                                                                                                                                                                                                                                            // Condition 
                                                                                                                                                                                                                                                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat5_29, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat5_29))) {
                                                                                                                                                                                                                                                                                --isoSpace;
                                                                                                                                                                                                                                                                                goto label69;
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            // negative pattern found
                                                                                                                                                                                                                                                                            --isoSpace;
                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v11.lgspFlags = candidate_initMvmt_node_v11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v11;
                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c23.lgspFlags = candidate_initMvmt_edge_c23.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c23;
                                                                                                                                                                                                                                                                            goto label70;
                                                                                                                                                                                                                                                                            --isoSpace;
                                                                                                                                                                                                                                                                        }
label69: ;
                                                                                                                                                                                                                                                                        // Extend Incoming initMvmt_edge_c24 from initMvmt_node_v10 
                                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c24 = candidate_initMvmt_node_v10.lgspInhead;
                                                                                                                                                                                                                                                                        if(head_candidate_initMvmt_edge_c24 != null)
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c24 = head_candidate_initMvmt_edge_c24;
                                                                                                                                                                                                                                                                            do
                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                if(candidate_initMvmt_edge_c24.lgspType.TypeID!=3) {
                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                if((candidate_initMvmt_edge_c24.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                uint prev__candidate_initMvmt_edge_c24;
                                                                                                                                                                                                                                                                                prev__candidate_initMvmt_edge_c24 = candidate_initMvmt_edge_c24.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                candidate_initMvmt_edge_c24.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                // Implicit Source initMvmt_node_v13 from initMvmt_edge_c24 
                                                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v13 = candidate_initMvmt_edge_c24.lgspSource;
                                                                                                                                                                                                                                                                                if(candidate_initMvmt_node_v13.lgspType.TypeID!=36) {
                                                                                                                                                                                                                                                                                    candidate_initMvmt_edge_c24.lgspFlags = candidate_initMvmt_edge_c24.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c24;
                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                if((candidate_initMvmt_node_v13.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                    candidate_initMvmt_edge_c24.lgspFlags = candidate_initMvmt_edge_c24.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c24;
                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                uint prev__candidate_initMvmt_node_v13;
                                                                                                                                                                                                                                                                                prev__candidate_initMvmt_node_v13 = candidate_initMvmt_node_v13.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                candidate_initMvmt_node_v13.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat6_30 assigned from expression 0 
                                                                                                                                                                                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat6_30 = (System.Int32)0;
                                                                                                                                                                                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat6_30 assigned from other element initMvmt_node_v13 
                                                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat6_30 = candidate_initMvmt_node_v13;
                                                                                                                                                                                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat6_30.lgspType.TypeID]) {
                                                                                                                                                                                                                                                                                    candidate_initMvmt_node_v13.lgspFlags = candidate_initMvmt_node_v13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v13;
                                                                                                                                                                                                                                                                                    candidate_initMvmt_edge_c24.lgspFlags = candidate_initMvmt_edge_c24.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c24;
                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                // NegativePattern 
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                    ++isoSpace;
                                                                                                                                                                                                                                                                                    // Condition 
                                                                                                                                                                                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat6_30, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat6_30))) {
                                                                                                                                                                                                                                                                                        --isoSpace;
                                                                                                                                                                                                                                                                                        goto label71;
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    // negative pattern found
                                                                                                                                                                                                                                                                                    --isoSpace;
                                                                                                                                                                                                                                                                                    candidate_initMvmt_node_v13.lgspFlags = candidate_initMvmt_node_v13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v13;
                                                                                                                                                                                                                                                                                    candidate_initMvmt_edge_c24.lgspFlags = candidate_initMvmt_edge_c24.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c24;
                                                                                                                                                                                                                                                                                    goto label72;
                                                                                                                                                                                                                                                                                    --isoSpace;
                                                                                                                                                                                                                                                                                }
label71: ;
                                                                                                                                                                                                                                                                                // Extend Incoming initMvmt_edge_c25 from initMvmt_node_v16 
                                                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c25 = candidate_initMvmt_node_v16.lgspInhead;
                                                                                                                                                                                                                                                                                if(head_candidate_initMvmt_edge_c25 != null)
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c25 = head_candidate_initMvmt_edge_c25;
                                                                                                                                                                                                                                                                                    do
                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                        if(candidate_initMvmt_edge_c25.lgspType.TypeID!=5) {
                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        if((candidate_initMvmt_edge_c25.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        uint prev__candidate_initMvmt_edge_c25;
                                                                                                                                                                                                                                                                                        prev__candidate_initMvmt_edge_c25 = candidate_initMvmt_edge_c25.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                        candidate_initMvmt_edge_c25.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                        // Implicit Source initMvmt_node_v16_p0 from initMvmt_edge_c25 
                                                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v16_p0 = candidate_initMvmt_edge_c25.lgspSource;
                                                                                                                                                                                                                                                                                        if(candidate_initMvmt_node_v16_p0.lgspType.TypeID!=7) {
                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c25.lgspFlags = candidate_initMvmt_edge_c25.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c25;
                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        if((candidate_initMvmt_node_v16_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c25.lgspFlags = candidate_initMvmt_edge_c25.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c25;
                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        uint prev__candidate_initMvmt_node_v16_p0;
                                                                                                                                                                                                                                                                                        prev__candidate_initMvmt_node_v16_p0 = candidate_initMvmt_node_v16_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                        candidate_initMvmt_node_v16_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                        // Condition 
                                                                                                                                                                                                                                                                                        if(!((((GRGEN_MODEL.IBPort)candidate_initMvmt_node_v16_p0).@ix == 0))) {
                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v16_p0.lgspFlags = candidate_initMvmt_node_v16_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v16_p0;
                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c25.lgspFlags = candidate_initMvmt_edge_c25.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c25;
                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        // Extend Incoming initMvmt_edge_c26 from initMvmt_node_v16 
                                                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c26 = candidate_initMvmt_node_v16.lgspInhead;
                                                                                                                                                                                                                                                                                        if(head_candidate_initMvmt_edge_c26 != null)
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c26 = head_candidate_initMvmt_edge_c26;
                                                                                                                                                                                                                                                                                            do
                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                if(candidate_initMvmt_edge_c26.lgspType.TypeID!=3) {
                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                if((candidate_initMvmt_edge_c26.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                uint prev__candidate_initMvmt_edge_c26;
                                                                                                                                                                                                                                                                                                prev__candidate_initMvmt_edge_c26 = candidate_initMvmt_edge_c26.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                candidate_initMvmt_edge_c26.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                // Implicit Source initMvmt_node_v17 from initMvmt_edge_c26 
                                                                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v17 = candidate_initMvmt_edge_c26.lgspSource;
                                                                                                                                                                                                                                                                                                if(candidate_initMvmt_node_v17.lgspType.TypeID!=34) {
                                                                                                                                                                                                                                                                                                    candidate_initMvmt_edge_c26.lgspFlags = candidate_initMvmt_edge_c26.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c26;
                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                if((candidate_initMvmt_node_v17.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    candidate_initMvmt_edge_c26.lgspFlags = candidate_initMvmt_edge_c26.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c26;
                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                uint prev__candidate_initMvmt_node_v17;
                                                                                                                                                                                                                                                                                                prev__candidate_initMvmt_node_v17 = candidate_initMvmt_node_v17.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                candidate_initMvmt_node_v17.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat13_37 assigned from expression 1 
                                                                                                                                                                                                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat13_37 = (System.Int32)1;
                                                                                                                                                                                                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat13_37 assigned from other element initMvmt_node_v17 
                                                                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat13_37 = candidate_initMvmt_node_v17;
                                                                                                                                                                                                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat13_37.lgspType.TypeID]) {
                                                                                                                                                                                                                                                                                                    candidate_initMvmt_node_v17.lgspFlags = candidate_initMvmt_node_v17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v17;
                                                                                                                                                                                                                                                                                                    candidate_initMvmt_edge_c26.lgspFlags = candidate_initMvmt_edge_c26.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c26;
                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                // NegativePattern 
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    ++isoSpace;
                                                                                                                                                                                                                                                                                                    // Condition 
                                                                                                                                                                                                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat13_37, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat13_37))) {
                                                                                                                                                                                                                                                                                                        --isoSpace;
                                                                                                                                                                                                                                                                                                        goto label73;
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                    // negative pattern found
                                                                                                                                                                                                                                                                                                    --isoSpace;
                                                                                                                                                                                                                                                                                                    candidate_initMvmt_node_v17.lgspFlags = candidate_initMvmt_node_v17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v17;
                                                                                                                                                                                                                                                                                                    candidate_initMvmt_edge_c26.lgspFlags = candidate_initMvmt_edge_c26.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c26;
                                                                                                                                                                                                                                                                                                    goto label74;
                                                                                                                                                                                                                                                                                                    --isoSpace;
                                                                                                                                                                                                                                                                                                }
label73: ;
                                                                                                                                                                                                                                                                                                // Extend Incoming initMvmt_edge_c27 from initMvmt_node_v16 
                                                                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c27 = candidate_initMvmt_node_v16.lgspInhead;
                                                                                                                                                                                                                                                                                                if(head_candidate_initMvmt_edge_c27 != null)
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c27 = head_candidate_initMvmt_edge_c27;
                                                                                                                                                                                                                                                                                                    do
                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                        if(candidate_initMvmt_edge_c27.lgspType.TypeID!=3) {
                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        if((candidate_initMvmt_edge_c27.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        uint prev__candidate_initMvmt_edge_c27;
                                                                                                                                                                                                                                                                                                        prev__candidate_initMvmt_edge_c27 = candidate_initMvmt_edge_c27.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                        candidate_initMvmt_edge_c27.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                        // Implicit Source initMvmt_node_v19 from initMvmt_edge_c27 
                                                                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v19 = candidate_initMvmt_edge_c27.lgspSource;
                                                                                                                                                                                                                                                                                                        if(candidate_initMvmt_node_v19.lgspType.TypeID!=36) {
                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c27.lgspFlags = candidate_initMvmt_edge_c27.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c27;
                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        if((candidate_initMvmt_node_v19.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c27.lgspFlags = candidate_initMvmt_edge_c27.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c27;
                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        uint prev__candidate_initMvmt_node_v19;
                                                                                                                                                                                                                                                                                                        prev__candidate_initMvmt_node_v19 = candidate_initMvmt_node_v19.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                        candidate_initMvmt_node_v19.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat15_39 assigned from expression 0 
                                                                                                                                                                                                                                                                                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat15_39 = (System.Int32)0;
                                                                                                                                                                                                                                                                                                        // Element nac_NodesWithoutSites_node_src_inlined_pat15_39 assigned from other element initMvmt_node_v19 
                                                                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat15_39 = candidate_initMvmt_node_v19;
                                                                                                                                                                                                                                                                                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat15_39.lgspType.TypeID]) {
                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v19.lgspFlags = candidate_initMvmt_node_v19.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v19;
                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c27.lgspFlags = candidate_initMvmt_edge_c27.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c27;
                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        // NegativePattern 
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            ++isoSpace;
                                                                                                                                                                                                                                                                                                            // Condition 
                                                                                                                                                                                                                                                                                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat15_39, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat15_39))) {
                                                                                                                                                                                                                                                                                                                --isoSpace;
                                                                                                                                                                                                                                                                                                                goto label75;
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                            // negative pattern found
                                                                                                                                                                                                                                                                                                            --isoSpace;
                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v19.lgspFlags = candidate_initMvmt_node_v19.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v19;
                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c27.lgspFlags = candidate_initMvmt_edge_c27.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c27;
                                                                                                                                                                                                                                                                                                            goto label76;
                                                                                                                                                                                                                                                                                                            --isoSpace;
                                                                                                                                                                                                                                                                                                        }
label75: ;
                                                                                                                                                                                                                                                                                                        // Extend Outgoing initMvmt_edge__edge9 from initMvmt_node_v10_p0 
                                                                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge__edge9 = candidate_initMvmt_node_v10_p0.lgspOuthead;
                                                                                                                                                                                                                                                                                                        if(head_candidate_initMvmt_edge__edge9 != null)
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge__edge9 = head_candidate_initMvmt_edge__edge9;
                                                                                                                                                                                                                                                                                                            do
                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                if(candidate_initMvmt_edge__edge9.lgspType.TypeID!=7) {
                                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                if((candidate_initMvmt_edge__edge9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                uint prev__candidate_initMvmt_edge__edge9;
                                                                                                                                                                                                                                                                                                                prev__candidate_initMvmt_edge__edge9 = candidate_initMvmt_edge__edge9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                candidate_initMvmt_edge__edge9.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                // Implicit Target initMvmt_node_n_left from initMvmt_edge__edge9 
                                                                                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_n_left = candidate_initMvmt_edge__edge9.lgspTarget;
                                                                                                                                                                                                                                                                                                                if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_initMvmt_node_n_left.lgspType.TypeID]) {
                                                                                                                                                                                                                                                                                                                    candidate_initMvmt_edge__edge9.lgspFlags = candidate_initMvmt_edge__edge9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge9;
                                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                if((candidate_initMvmt_node_n_left.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    candidate_initMvmt_edge__edge9.lgspFlags = candidate_initMvmt_edge__edge9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge9;
                                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                uint prev__candidate_initMvmt_node_n_left;
                                                                                                                                                                                                                                                                                                                prev__candidate_initMvmt_node_n_left = candidate_initMvmt_node_n_left.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                candidate_initMvmt_node_n_left.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                // Extend Incoming initMvmt_edge_c28 from initMvmt_node_v11 
                                                                                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c28 = candidate_initMvmt_node_v11.lgspInhead;
                                                                                                                                                                                                                                                                                                                if(head_candidate_initMvmt_edge_c28 != null)
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c28 = head_candidate_initMvmt_edge_c28;
                                                                                                                                                                                                                                                                                                                    do
                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                        if(candidate_initMvmt_edge_c28.lgspType.TypeID!=3) {
                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if((candidate_initMvmt_edge_c28.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        uint prev__candidate_initMvmt_edge_c28;
                                                                                                                                                                                                                                                                                                                        prev__candidate_initMvmt_edge_c28 = candidate_initMvmt_edge_c28.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                        candidate_initMvmt_edge_c28.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                        // Implicit Source initMvmt_node_v12 from initMvmt_edge_c28 
                                                                                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v12 = candidate_initMvmt_edge_c28.lgspSource;
                                                                                                                                                                                                                                                                                                                        if(candidate_initMvmt_node_v12.lgspType.TypeID!=35) {
                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c28.lgspFlags = candidate_initMvmt_edge_c28.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c28;
                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if((candidate_initMvmt_node_v12.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c28.lgspFlags = candidate_initMvmt_edge_c28.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c28;
                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        uint prev__candidate_initMvmt_node_v12;
                                                                                                                                                                                                                                                                                                                        prev__candidate_initMvmt_node_v12 = candidate_initMvmt_node_v12.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                        candidate_initMvmt_node_v12.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat4_28 assigned from expression 0 
                                                                                                                                                                                                                                                                                                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat4_28 = (System.Int32)0;
                                                                                                                                                                                                                                                                                                                        // Element nac_NodesWithoutSites_node_src_inlined_pat4_28 assigned from other element initMvmt_node_v12 
                                                                                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat4_28 = candidate_initMvmt_node_v12;
                                                                                                                                                                                                                                                                                                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat4_28.lgspType.TypeID]) {
                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v12.lgspFlags = candidate_initMvmt_node_v12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v12;
                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c28.lgspFlags = candidate_initMvmt_edge_c28.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c28;
                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        // NegativePattern 
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            ++isoSpace;
                                                                                                                                                                                                                                                                                                                            // Condition 
                                                                                                                                                                                                                                                                                                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat4_28, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat4_28))) {
                                                                                                                                                                                                                                                                                                                                --isoSpace;
                                                                                                                                                                                                                                                                                                                                goto label77;
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                            // negative pattern found
                                                                                                                                                                                                                                                                                                                            --isoSpace;
                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v12.lgspFlags = candidate_initMvmt_node_v12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v12;
                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c28.lgspFlags = candidate_initMvmt_edge_c28.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c28;
                                                                                                                                                                                                                                                                                                                            goto label78;
                                                                                                                                                                                                                                                                                                                            --isoSpace;
                                                                                                                                                                                                                                                                                                                        }
label77: ;
                                                                                                                                                                                                                                                                                                                        // Extend Outgoing initMvmt_edge__edge1 from initMvmt_node_v16_p0 
                                                                                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge__edge1 = candidate_initMvmt_node_v16_p0.lgspOuthead;
                                                                                                                                                                                                                                                                                                                        if(head_candidate_initMvmt_edge__edge1 != null)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge__edge1 = head_candidate_initMvmt_edge__edge1;
                                                                                                                                                                                                                                                                                                                            do
                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                if(candidate_initMvmt_edge__edge1.lgspType.TypeID!=7) {
                                                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                if((candidate_initMvmt_edge__edge1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                uint prev__candidate_initMvmt_edge__edge1;
                                                                                                                                                                                                                                                                                                                                prev__candidate_initMvmt_edge__edge1 = candidate_initMvmt_edge__edge1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                                candidate_initMvmt_edge__edge1.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                                // Implicit Target initMvmt_node_n_right from initMvmt_edge__edge1 
                                                                                                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_n_right = candidate_initMvmt_edge__edge1.lgspTarget;
                                                                                                                                                                                                                                                                                                                                if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_initMvmt_node_n_right.lgspType.TypeID]) {
                                                                                                                                                                                                                                                                                                                                    candidate_initMvmt_edge__edge1.lgspFlags = candidate_initMvmt_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge1;
                                                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                if((candidate_initMvmt_node_n_right.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                    candidate_initMvmt_edge__edge1.lgspFlags = candidate_initMvmt_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge1;
                                                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                uint prev__candidate_initMvmt_node_n_right;
                                                                                                                                                                                                                                                                                                                                prev__candidate_initMvmt_node_n_right = candidate_initMvmt_node_n_right.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                                candidate_initMvmt_node_n_right.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                                // Extend Incoming initMvmt_edge_c29 from initMvmt_node_v17 
                                                                                                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c29 = candidate_initMvmt_node_v17.lgspInhead;
                                                                                                                                                                                                                                                                                                                                if(head_candidate_initMvmt_edge_c29 != null)
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c29 = head_candidate_initMvmt_edge_c29;
                                                                                                                                                                                                                                                                                                                                    do
                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                        if(candidate_initMvmt_edge_c29.lgspType.TypeID!=3) {
                                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        if((candidate_initMvmt_edge_c29.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        // Implicit Source initMvmt_node_v18 from initMvmt_edge_c29 
                                                                                                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v18 = candidate_initMvmt_edge_c29.lgspSource;
                                                                                                                                                                                                                                                                                                                                        if(candidate_initMvmt_node_v18.lgspType.TypeID!=35) {
                                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        if((candidate_initMvmt_node_v18.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat11_35 assigned from expression 0 
                                                                                                                                                                                                                                                                                                                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat11_35 = (System.Int32)0;
                                                                                                                                                                                                                                                                                                                                        // Element nac_NodesWithoutSites_node_src_inlined_pat11_35 assigned from other element initMvmt_node_v18 
                                                                                                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat11_35 = candidate_initMvmt_node_v18;
                                                                                                                                                                                                                                                                                                                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat11_35.lgspType.TypeID]) {
                                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        // NegativePattern 
                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                            ++isoSpace;
                                                                                                                                                                                                                                                                                                                                            // Condition 
                                                                                                                                                                                                                                                                                                                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat11_35, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat11_35))) {
                                                                                                                                                                                                                                                                                                                                                --isoSpace;
                                                                                                                                                                                                                                                                                                                                                goto label79;
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            // negative pattern found
                                                                                                                                                                                                                                                                                                                                            --isoSpace;
                                                                                                                                                                                                                                                                                                                                            goto label80;
                                                                                                                                                                                                                                                                                                                                            --isoSpace;
                                                                                                                                                                                                                                                                                                                                        }
label79: ;
                                                                                                                                                                                                                                                                                                                                        // Extend Incoming initMvmt_edge_c30 from initMvmt_node_v12 
                                                                                                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c30 = candidate_initMvmt_node_v12.lgspInhead;
                                                                                                                                                                                                                                                                                                                                        if(head_candidate_initMvmt_edge_c30 != null)
                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c30 = head_candidate_initMvmt_edge_c30;
                                                                                                                                                                                                                                                                                                                                            do
                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                if(candidate_initMvmt_edge_c30.lgspType.TypeID!=5) {
                                                                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                if((candidate_initMvmt_edge_c30.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                uint prev__candidate_initMvmt_edge_c30;
                                                                                                                                                                                                                                                                                                                                                prev__candidate_initMvmt_edge_c30 = candidate_initMvmt_edge_c30.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                                                candidate_initMvmt_edge_c30.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                                                // Implicit Source initMvmt_node_v12_p0 from initMvmt_edge_c30 
                                                                                                                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v12_p0 = candidate_initMvmt_edge_c30.lgspSource;
                                                                                                                                                                                                                                                                                                                                                if(candidate_initMvmt_node_v12_p0.lgspType.TypeID!=7) {
                                                                                                                                                                                                                                                                                                                                                    candidate_initMvmt_edge_c30.lgspFlags = candidate_initMvmt_edge_c30.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c30;
                                                                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                if((candidate_initMvmt_node_v12_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                    candidate_initMvmt_edge_c30.lgspFlags = candidate_initMvmt_edge_c30.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c30;
                                                                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                uint prev__candidate_initMvmt_node_v12_p0;
                                                                                                                                                                                                                                                                                                                                                prev__candidate_initMvmt_node_v12_p0 = candidate_initMvmt_node_v12_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                                                candidate_initMvmt_node_v12_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                                                // Condition 
                                                                                                                                                                                                                                                                                                                                                if(!((((GRGEN_MODEL.IBPort)candidate_initMvmt_node_v12_p0).@ix == 0))) {
                                                                                                                                                                                                                                                                                                                                                    candidate_initMvmt_node_v12_p0.lgspFlags = candidate_initMvmt_node_v12_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v12_p0;
                                                                                                                                                                                                                                                                                                                                                    candidate_initMvmt_edge_c30.lgspFlags = candidate_initMvmt_edge_c30.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c30;
                                                                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                // Extend Incoming initMvmt_edge_c31 from initMvmt_node_v18 
                                                                                                                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge_c31 = candidate_initMvmt_node_v18.lgspInhead;
                                                                                                                                                                                                                                                                                                                                                if(head_candidate_initMvmt_edge_c31 != null)
                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge_c31 = head_candidate_initMvmt_edge_c31;
                                                                                                                                                                                                                                                                                                                                                    do
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                        if(candidate_initMvmt_edge_c31.lgspType.TypeID!=5) {
                                                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        if((candidate_initMvmt_edge_c31.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        // Implicit Source initMvmt_node_v18_p0 from initMvmt_edge_c31 
                                                                                                                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_initMvmt_node_v18_p0 = candidate_initMvmt_edge_c31.lgspSource;
                                                                                                                                                                                                                                                                                                                                                        if(candidate_initMvmt_node_v18_p0.lgspType.TypeID!=7) {
                                                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        if((candidate_initMvmt_node_v18_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        // Condition 
                                                                                                                                                                                                                                                                                                                                                        if(!((((GRGEN_MODEL.IBPort)candidate_initMvmt_node_v18_p0).@ix == 0))) {
                                                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        // Extend Outgoing initMvmt_edge__edge10 from initMvmt_node_v12_p0 
                                                                                                                                                                                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge__edge10 = candidate_initMvmt_node_v12_p0.lgspOuthead;
                                                                                                                                                                                                                                                                                                                                                        if(head_candidate_initMvmt_edge__edge10 != null)
                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge__edge10 = head_candidate_initMvmt_edge__edge10;
                                                                                                                                                                                                                                                                                                                                                            do
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                if(candidate_initMvmt_edge__edge10.lgspType.TypeID!=7) {
                                                                                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                if((candidate_initMvmt_edge__edge10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                uint prev__candidate_initMvmt_edge__edge10;
                                                                                                                                                                                                                                                                                                                                                                prev__candidate_initMvmt_edge__edge10 = candidate_initMvmt_edge__edge10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                                                                candidate_initMvmt_edge__edge10.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                                                                                                                                                                                                                // Implicit Target initMvmt_node_e0 from initMvmt_edge__edge10 
                                                                                                                                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_initMvmt_node_e0 = candidate_initMvmt_edge__edge10.lgspTarget;
                                                                                                                                                                                                                                                                                                                                                                if(candidate_initMvmt_node_e0.lgspType.TypeID!=9) {
                                                                                                                                                                                                                                                                                                                                                                    candidate_initMvmt_edge__edge10.lgspFlags = candidate_initMvmt_edge__edge10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge10;
                                                                                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                if((candidate_initMvmt_node_e0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                    candidate_initMvmt_edge__edge10.lgspFlags = candidate_initMvmt_edge__edge10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge10;
                                                                                                                                                                                                                                                                                                                                                                    continue;
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                // Extend Outgoing initMvmt_edge__edge11 from initMvmt_node_v18_p0 
                                                                                                                                                                                                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_initMvmt_edge__edge11 = candidate_initMvmt_node_v18_p0.lgspOuthead;
                                                                                                                                                                                                                                                                                                                                                                if(head_candidate_initMvmt_edge__edge11 != null)
                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_initMvmt_edge__edge11 = head_candidate_initMvmt_edge__edge11;
                                                                                                                                                                                                                                                                                                                                                                    do
                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                        if(candidate_initMvmt_edge__edge11.lgspType.TypeID!=7) {
                                                                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        if(candidate_initMvmt_edge__edge11.lgspTarget != candidate_initMvmt_node_e0) {
                                                                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        if((candidate_initMvmt_edge__edge11.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                            continue;
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        Rule_initMvmt.Match_initMvmt match = matches.GetNextUnfilledPosition();
                                                                                                                                                                                                                                                                                                                                                                        Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat0 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                                                                                                                        match_pat0.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                                                                                                                        Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat1 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                                                                                                                        match_pat1.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                                                                                                                        Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat2 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                                                                                                                        match_pat2.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                                                                                                                        Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat3 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                                                                                                                        match_pat3.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                                                                                                                        Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat4 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                                                                                                                        match_pat4.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                                                                                                                        Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat5 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                                                                                                                        match_pat5.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                                                                                                                        Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat6 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                                                                                                                        match_pat6.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                                                                                                                        Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat7 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                                                                                                                        match_pat7.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                                                                                                                        Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat8 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                                                                                                                        match_pat8.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                                                                                                                        Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat9 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                                                                                                                        match_pat9.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                                                                                                                        Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat10 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                                                                                                                        match_pat10.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                                                                                                                        Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat11 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                                                                                                                        match_pat11.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                                                                                                                        Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat12 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                                                                                                                        match_pat12.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                                                                                                                        Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat13 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                                                                                                                        match_pat13.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                                                                                                                        Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat14 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                                                                                                                        match_pat14.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                                                                                                                        Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat15 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                                                                                                                                                                                        match_pat15.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                                                                                                                                                                                        match._node_v0 = candidate_initMvmt_node_v0;
                                                                                                                                                                                                                                                                                                                                                                        match._node_r0 = candidate_initMvmt_node_r0;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v4 = candidate_initMvmt_node_v4;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v7 = candidate_initMvmt_node_v7;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v14 = candidate_initMvmt_node_v14;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v0_p0 = candidate_initMvmt_node_v0_p0;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v1 = candidate_initMvmt_node_v1;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v2 = candidate_initMvmt_node_v2;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v3 = candidate_initMvmt_node_v3;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v4_p0 = candidate_initMvmt_node_v4_p0;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v5 = candidate_initMvmt_node_v5;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v6 = candidate_initMvmt_node_v6;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v7_p0 = candidate_initMvmt_node_v7_p0;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v8 = candidate_initMvmt_node_v8;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v9 = candidate_initMvmt_node_v9;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v14_p0 = candidate_initMvmt_node_v14_p0;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v15 = candidate_initMvmt_node_v15;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v1_p0 = candidate_initMvmt_node_v1_p0;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v2_p0 = candidate_initMvmt_node_v2_p0;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v5_p0 = candidate_initMvmt_node_v5_p0;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v8_p0 = candidate_initMvmt_node_v8_p0;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v10 = candidate_initMvmt_node_v10;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v16 = candidate_initMvmt_node_v16;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v10_p0 = candidate_initMvmt_node_v10_p0;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v11 = candidate_initMvmt_node_v11;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v13 = candidate_initMvmt_node_v13;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v16_p0 = candidate_initMvmt_node_v16_p0;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v17 = candidate_initMvmt_node_v17;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v19 = candidate_initMvmt_node_v19;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v12 = candidate_initMvmt_node_v12;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v18 = candidate_initMvmt_node_v18;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v12_p0 = candidate_initMvmt_node_v12_p0;
                                                                                                                                                                                                                                                                                                                                                                        match._node_v18_p0 = candidate_initMvmt_node_v18_p0;
                                                                                                                                                                                                                                                                                                                                                                        match._node_y0 = candidate_initMvmt_node_y0;
                                                                                                                                                                                                                                                                                                                                                                        match._node_n_right = candidate_initMvmt_node_n_right;
                                                                                                                                                                                                                                                                                                                                                                        match._node_y2 = candidate_initMvmt_node_y2;
                                                                                                                                                                                                                                                                                                                                                                        match._node_y3 = candidate_initMvmt_node_y3;
                                                                                                                                                                                                                                                                                                                                                                        match._node_y1 = candidate_initMvmt_node_y1;
                                                                                                                                                                                                                                                                                                                                                                        match._node_n_left = candidate_initMvmt_node_n_left;
                                                                                                                                                                                                                                                                                                                                                                        match._node_e0 = candidate_initMvmt_node_e0;
                                                                                                                                                                                                                                                                                                                                                                        match_pat0._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat0_24;
                                                                                                                                                                                                                                                                                                                                                                        match_pat1._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat1_25;
                                                                                                                                                                                                                                                                                                                                                                        match_pat2._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat2_26;
                                                                                                                                                                                                                                                                                                                                                                        match_pat3._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat3_27;
                                                                                                                                                                                                                                                                                                                                                                        match_pat4._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat4_28;
                                                                                                                                                                                                                                                                                                                                                                        match_pat5._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat5_29;
                                                                                                                                                                                                                                                                                                                                                                        match_pat6._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat6_30;
                                                                                                                                                                                                                                                                                                                                                                        match_pat7._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat7_31;
                                                                                                                                                                                                                                                                                                                                                                        match_pat8._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat8_32;
                                                                                                                                                                                                                                                                                                                                                                        match_pat9._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat9_33;
                                                                                                                                                                                                                                                                                                                                                                        match_pat10._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat10_34;
                                                                                                                                                                                                                                                                                                                                                                        match_pat11._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat11_35;
                                                                                                                                                                                                                                                                                                                                                                        match_pat12._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat12_36;
                                                                                                                                                                                                                                                                                                                                                                        match_pat13._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat13_37;
                                                                                                                                                                                                                                                                                                                                                                        match_pat14._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat14_38;
                                                                                                                                                                                                                                                                                                                                                                        match_pat15._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat15_39;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c0 = candidate_initMvmt_edge_c0;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c1 = candidate_initMvmt_edge_c1;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c2 = candidate_initMvmt_edge_c2;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c3 = candidate_initMvmt_edge_c3;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c4 = candidate_initMvmt_edge_c4;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c5 = candidate_initMvmt_edge_c5;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c6 = candidate_initMvmt_edge_c6;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c7 = candidate_initMvmt_edge_c7;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c8 = candidate_initMvmt_edge_c8;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c9 = candidate_initMvmt_edge_c9;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c10 = candidate_initMvmt_edge_c10;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c11 = candidate_initMvmt_edge_c11;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c12 = candidate_initMvmt_edge_c12;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c13 = candidate_initMvmt_edge_c13;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c14 = candidate_initMvmt_edge_c14;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c15 = candidate_initMvmt_edge_c15;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c16 = candidate_initMvmt_edge_c16;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c17 = candidate_initMvmt_edge_c17;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c18 = candidate_initMvmt_edge_c18;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c19 = candidate_initMvmt_edge_c19;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c20 = candidate_initMvmt_edge_c20;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c21 = candidate_initMvmt_edge_c21;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c22 = candidate_initMvmt_edge_c22;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c23 = candidate_initMvmt_edge_c23;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c24 = candidate_initMvmt_edge_c24;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c25 = candidate_initMvmt_edge_c25;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c26 = candidate_initMvmt_edge_c26;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c27 = candidate_initMvmt_edge_c27;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c28 = candidate_initMvmt_edge_c28;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c29 = candidate_initMvmt_edge_c29;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c30 = candidate_initMvmt_edge_c30;
                                                                                                                                                                                                                                                                                                                                                                        match._edge_c31 = candidate_initMvmt_edge_c31;
                                                                                                                                                                                                                                                                                                                                                                        match._edge__edge0 = candidate_initMvmt_edge__edge0;
                                                                                                                                                                                                                                                                                                                                                                        match._edge__edge1 = candidate_initMvmt_edge__edge1;
                                                                                                                                                                                                                                                                                                                                                                        match._edge__edge2 = candidate_initMvmt_edge__edge2;
                                                                                                                                                                                                                                                                                                                                                                        match._edge__edge3 = candidate_initMvmt_edge__edge3;
                                                                                                                                                                                                                                                                                                                                                                        match._edge__edge4 = candidate_initMvmt_edge__edge4;
                                                                                                                                                                                                                                                                                                                                                                        match._edge__edge5 = candidate_initMvmt_edge__edge5;
                                                                                                                                                                                                                                                                                                                                                                        match._edge__edge6 = candidate_initMvmt_edge__edge6;
                                                                                                                                                                                                                                                                                                                                                                        match._edge__edge7 = candidate_initMvmt_edge__edge7;
                                                                                                                                                                                                                                                                                                                                                                        match._edge__edge8 = candidate_initMvmt_edge__edge8;
                                                                                                                                                                                                                                                                                                                                                                        match._edge__edge9 = candidate_initMvmt_edge__edge9;
                                                                                                                                                                                                                                                                                                                                                                        match._edge__edge10 = candidate_initMvmt_edge__edge10;
                                                                                                                                                                                                                                                                                                                                                                        match._edge__edge11 = candidate_initMvmt_edge__edge11;
                                                                                                                                                                                                                                                                                                                                                                        match_pat0._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat0_24;
                                                                                                                                                                                                                                                                                                                                                                        match_pat1._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat1_25;
                                                                                                                                                                                                                                                                                                                                                                        match_pat2._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat2_26;
                                                                                                                                                                                                                                                                                                                                                                        match_pat3._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat3_27;
                                                                                                                                                                                                                                                                                                                                                                        match_pat4._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat4_28;
                                                                                                                                                                                                                                                                                                                                                                        match_pat5._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat5_29;
                                                                                                                                                                                                                                                                                                                                                                        match_pat6._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat6_30;
                                                                                                                                                                                                                                                                                                                                                                        match_pat7._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat7_31;
                                                                                                                                                                                                                                                                                                                                                                        match_pat8._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat8_32;
                                                                                                                                                                                                                                                                                                                                                                        match_pat9._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat9_33;
                                                                                                                                                                                                                                                                                                                                                                        match_pat10._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat10_34;
                                                                                                                                                                                                                                                                                                                                                                        match_pat11._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat11_35;
                                                                                                                                                                                                                                                                                                                                                                        match_pat12._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat12_36;
                                                                                                                                                                                                                                                                                                                                                                        match_pat13._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat13_37;
                                                                                                                                                                                                                                                                                                                                                                        match_pat14._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat14_38;
                                                                                                                                                                                                                                                                                                                                                                        match_pat15._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat15_39;
                                                                                                                                                                                                                                                                                                                                                                        match._pat0 = match_pat0;
                                                                                                                                                                                                                                                                                                                                                                        match._pat1 = match_pat1;
                                                                                                                                                                                                                                                                                                                                                                        match._pat2 = match_pat2;
                                                                                                                                                                                                                                                                                                                                                                        match._pat3 = match_pat3;
                                                                                                                                                                                                                                                                                                                                                                        match._pat4 = match_pat4;
                                                                                                                                                                                                                                                                                                                                                                        match._pat5 = match_pat5;
                                                                                                                                                                                                                                                                                                                                                                        match._pat6 = match_pat6;
                                                                                                                                                                                                                                                                                                                                                                        match._pat7 = match_pat7;
                                                                                                                                                                                                                                                                                                                                                                        match._pat8 = match_pat8;
                                                                                                                                                                                                                                                                                                                                                                        match._pat9 = match_pat9;
                                                                                                                                                                                                                                                                                                                                                                        match._pat10 = match_pat10;
                                                                                                                                                                                                                                                                                                                                                                        match._pat11 = match_pat11;
                                                                                                                                                                                                                                                                                                                                                                        match._pat12 = match_pat12;
                                                                                                                                                                                                                                                                                                                                                                        match._pat13 = match_pat13;
                                                                                                                                                                                                                                                                                                                                                                        match._pat14 = match_pat14;
                                                                                                                                                                                                                                                                                                                                                                        match._pat15 = match_pat15;
                                                                                                                                                                                                                                                                                                                                                                        matches.PositionWasFilledFixIt();
                                                                                                                                                                                                                                                                                                                                                                        // if enough matches were found, we leave
                                                                                                                                                                                                                                                                                                                                                                        if(maxMatches > 0 && matches.Count >= maxMatches)
                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v18_p0.MoveOutHeadAfter(candidate_initMvmt_edge__edge11);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v12_p0.MoveOutHeadAfter(candidate_initMvmt_edge__edge10);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v18.MoveInHeadAfter(candidate_initMvmt_edge_c31);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v12.MoveInHeadAfter(candidate_initMvmt_edge_c30);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v17.MoveInHeadAfter(candidate_initMvmt_edge_c29);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v16_p0.MoveOutHeadAfter(candidate_initMvmt_edge__edge1);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v11.MoveInHeadAfter(candidate_initMvmt_edge_c28);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v10_p0.MoveOutHeadAfter(candidate_initMvmt_edge__edge9);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v16.MoveInHeadAfter(candidate_initMvmt_edge_c27);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v16.MoveInHeadAfter(candidate_initMvmt_edge_c26);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v16.MoveInHeadAfter(candidate_initMvmt_edge_c25);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v10.MoveInHeadAfter(candidate_initMvmt_edge_c24);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v10.MoveInHeadAfter(candidate_initMvmt_edge_c23);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v10.MoveInHeadAfter(candidate_initMvmt_edge_c22);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v8_p0.MoveOutHeadAfter(candidate_initMvmt_edge__edge6);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v5_p0.MoveOutHeadAfter(candidate_initMvmt_edge__edge5);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v15.MoveInHeadAfter(candidate_initMvmt_edge_c21);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v14_p0.MoveOutHeadAfter(candidate_initMvmt_edge__edge4);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v9.MoveInHeadAfter(candidate_initMvmt_edge_c20);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v8.MoveInHeadAfter(candidate_initMvmt_edge_c19);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v7_p0.MoveOutHeadAfter(candidate_initMvmt_edge__edge2);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v5.MoveInHeadAfter(candidate_initMvmt_edge_c18);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v4_p0.MoveOutHeadAfter(candidate_initMvmt_edge__edge7);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v2_p0.MoveOutHeadAfter(candidate_initMvmt_edge__edge3);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v1_p0.MoveOutHeadAfter(candidate_initMvmt_edge__edge8);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v14.MoveInHeadAfter(candidate_initMvmt_edge_c15);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v14.MoveInHeadAfter(candidate_initMvmt_edge_c14);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v7.MoveInHeadAfter(candidate_initMvmt_edge_c13);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v7.MoveInHeadAfter(candidate_initMvmt_edge_c12);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v7.MoveInHeadAfter(candidate_initMvmt_edge_c11);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v4.MoveInHeadAfter(candidate_initMvmt_edge_c10);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v4.MoveInHeadAfter(candidate_initMvmt_edge_c9);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v4.MoveInHeadAfter(candidate_initMvmt_edge_c8);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v2.MoveInHeadAfter(candidate_initMvmt_edge_c17);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v1.MoveInHeadAfter(candidate_initMvmt_edge_c16);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v0_p0.MoveOutHeadAfter(candidate_initMvmt_edge__edge0);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_r0.MoveInHeadAfter(candidate_initMvmt_edge_c3);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_r0.MoveInHeadAfter(candidate_initMvmt_edge_c2);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_r0.MoveInHeadAfter(candidate_initMvmt_edge_c1);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v0.MoveInHeadAfter(candidate_initMvmt_edge_c7);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v0.MoveInHeadAfter(candidate_initMvmt_edge_c6);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v0.MoveInHeadAfter(candidate_initMvmt_edge_c5);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v0.MoveInHeadAfter(candidate_initMvmt_edge_c4);
                                                                                                                                                                                                                                                                                                                                                                            graph.MoveHeadAfter(candidate_initMvmt_edge_c0);
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge__edge10.lgspFlags = candidate_initMvmt_edge__edge10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge10;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v12_p0.lgspFlags = candidate_initMvmt_node_v12_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v12_p0;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c30.lgspFlags = candidate_initMvmt_edge_c30.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c30;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_n_right.lgspFlags = candidate_initMvmt_node_n_right.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_n_right;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge__edge1.lgspFlags = candidate_initMvmt_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge1;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v12.lgspFlags = candidate_initMvmt_node_v12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v12;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c28.lgspFlags = candidate_initMvmt_edge_c28.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c28;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_n_left.lgspFlags = candidate_initMvmt_node_n_left.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_n_left;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge__edge9.lgspFlags = candidate_initMvmt_edge__edge9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge9;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v19.lgspFlags = candidate_initMvmt_node_v19.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v19;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c27.lgspFlags = candidate_initMvmt_edge_c27.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c27;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v17.lgspFlags = candidate_initMvmt_node_v17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v17;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c26.lgspFlags = candidate_initMvmt_edge_c26.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c26;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v16_p0.lgspFlags = candidate_initMvmt_node_v16_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v16_p0;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c25.lgspFlags = candidate_initMvmt_edge_c25.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c25;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v13.lgspFlags = candidate_initMvmt_node_v13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v13;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c24.lgspFlags = candidate_initMvmt_edge_c24.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c24;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v11.lgspFlags = candidate_initMvmt_node_v11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v11;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c23.lgspFlags = candidate_initMvmt_edge_c23.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c23;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v10_p0.lgspFlags = candidate_initMvmt_node_v10_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v10_p0;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c22.lgspFlags = candidate_initMvmt_edge_c22.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c22;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge__edge6.lgspFlags = candidate_initMvmt_edge__edge6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge6;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge__edge5.lgspFlags = candidate_initMvmt_edge__edge5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge5;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v16.lgspFlags = candidate_initMvmt_node_v16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v16;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c21.lgspFlags = candidate_initMvmt_edge_c21.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c21;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_y3.lgspFlags = candidate_initMvmt_node_y3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_y3;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge__edge4.lgspFlags = candidate_initMvmt_edge__edge4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge4;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v10.lgspFlags = candidate_initMvmt_node_v10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v10;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c20.lgspFlags = candidate_initMvmt_edge_c20.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c20;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v8_p0.lgspFlags = candidate_initMvmt_node_v8_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v8_p0;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c19.lgspFlags = candidate_initMvmt_edge_c19.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c19;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_y2.lgspFlags = candidate_initMvmt_node_y2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_y2;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge__edge2.lgspFlags = candidate_initMvmt_edge__edge2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge2;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v5_p0.lgspFlags = candidate_initMvmt_node_v5_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v5_p0;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c18.lgspFlags = candidate_initMvmt_edge_c18.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c18;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_y1.lgspFlags = candidate_initMvmt_node_y1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_y1;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge__edge7.lgspFlags = candidate_initMvmt_edge__edge7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge7;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge__edge3.lgspFlags = candidate_initMvmt_edge__edge3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge3;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge__edge8.lgspFlags = candidate_initMvmt_edge__edge8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge8;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v15.lgspFlags = candidate_initMvmt_node_v15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v15;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c15.lgspFlags = candidate_initMvmt_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c15;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v14_p0.lgspFlags = candidate_initMvmt_node_v14_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v14_p0;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c14.lgspFlags = candidate_initMvmt_edge_c14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c14;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v9.lgspFlags = candidate_initMvmt_node_v9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v9;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c13.lgspFlags = candidate_initMvmt_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c13;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v8.lgspFlags = candidate_initMvmt_node_v8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v8;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c12.lgspFlags = candidate_initMvmt_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c12;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v7_p0.lgspFlags = candidate_initMvmt_node_v7_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v7_p0;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c11.lgspFlags = candidate_initMvmt_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c11;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v6.lgspFlags = candidate_initMvmt_node_v6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v6;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c10.lgspFlags = candidate_initMvmt_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c10;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v5.lgspFlags = candidate_initMvmt_node_v5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v5;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c9.lgspFlags = candidate_initMvmt_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c9;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v4_p0.lgspFlags = candidate_initMvmt_node_v4_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v4_p0;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c8.lgspFlags = candidate_initMvmt_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c8;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v2_p0.lgspFlags = candidate_initMvmt_node_v2_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v2_p0;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c17.lgspFlags = candidate_initMvmt_edge_c17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c17;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v1_p0.lgspFlags = candidate_initMvmt_node_v1_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v1_p0;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c16.lgspFlags = candidate_initMvmt_edge_c16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c16;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_y0.lgspFlags = candidate_initMvmt_node_y0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_y0;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge__edge0.lgspFlags = candidate_initMvmt_edge__edge0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge0;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v14.lgspFlags = candidate_initMvmt_node_v14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v14;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c3.lgspFlags = candidate_initMvmt_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c3;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v7.lgspFlags = candidate_initMvmt_node_v7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v7;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c2.lgspFlags = candidate_initMvmt_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c2;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v4.lgspFlags = candidate_initMvmt_node_v4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v4;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c1.lgspFlags = candidate_initMvmt_edge_c1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c1;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v3.lgspFlags = candidate_initMvmt_node_v3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v3;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c7.lgspFlags = candidate_initMvmt_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c7;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v2.lgspFlags = candidate_initMvmt_node_v2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v2;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c6.lgspFlags = candidate_initMvmt_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c6;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v1.lgspFlags = candidate_initMvmt_node_v1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v1;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c5.lgspFlags = candidate_initMvmt_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c5;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v0_p0.lgspFlags = candidate_initMvmt_node_v0_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v0_p0;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c4.lgspFlags = candidate_initMvmt_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c4;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_r0.lgspFlags = candidate_initMvmt_node_r0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_r0;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_node_v0.lgspFlags = candidate_initMvmt_node_v0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v0;
                                                                                                                                                                                                                                                                                                                                                                            candidate_initMvmt_edge_c0.lgspFlags = candidate_initMvmt_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c0;
                                                                                                                                                                                                                                                                                                                                                                            return matches;
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                    while( (candidate_initMvmt_edge__edge11 = candidate_initMvmt_edge__edge11.lgspOutNext) != head_candidate_initMvmt_edge__edge11 );
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                candidate_initMvmt_edge__edge10.lgspFlags = candidate_initMvmt_edge__edge10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge10;
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            while( (candidate_initMvmt_edge__edge10 = candidate_initMvmt_edge__edge10.lgspOutNext) != head_candidate_initMvmt_edge__edge10 );
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    while( (candidate_initMvmt_edge_c31 = candidate_initMvmt_edge_c31.lgspInNext) != head_candidate_initMvmt_edge_c31 );
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                candidate_initMvmt_node_v12_p0.lgspFlags = candidate_initMvmt_node_v12_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v12_p0;
                                                                                                                                                                                                                                                                                                                                                candidate_initMvmt_edge_c30.lgspFlags = candidate_initMvmt_edge_c30.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c30;
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            while( (candidate_initMvmt_edge_c30 = candidate_initMvmt_edge_c30.lgspInNext) != head_candidate_initMvmt_edge_c30 );
                                                                                                                                                                                                                                                                                                                                        }
label80: ;
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                    while( (candidate_initMvmt_edge_c29 = candidate_initMvmt_edge_c29.lgspInNext) != head_candidate_initMvmt_edge_c29 );
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                candidate_initMvmt_node_n_right.lgspFlags = candidate_initMvmt_node_n_right.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_n_right;
                                                                                                                                                                                                                                                                                                                                candidate_initMvmt_edge__edge1.lgspFlags = candidate_initMvmt_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge1;
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                            while( (candidate_initMvmt_edge__edge1 = candidate_initMvmt_edge__edge1.lgspOutNext) != head_candidate_initMvmt_edge__edge1 );
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        candidate_initMvmt_node_v12.lgspFlags = candidate_initMvmt_node_v12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v12;
                                                                                                                                                                                                                                                                                                                        candidate_initMvmt_edge_c28.lgspFlags = candidate_initMvmt_edge_c28.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c28;
label78: ;
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                    while( (candidate_initMvmt_edge_c28 = candidate_initMvmt_edge_c28.lgspInNext) != head_candidate_initMvmt_edge_c28 );
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                candidate_initMvmt_node_n_left.lgspFlags = candidate_initMvmt_node_n_left.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_n_left;
                                                                                                                                                                                                                                                                                                                candidate_initMvmt_edge__edge9.lgspFlags = candidate_initMvmt_edge__edge9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge9;
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                            while( (candidate_initMvmt_edge__edge9 = candidate_initMvmt_edge__edge9.lgspOutNext) != head_candidate_initMvmt_edge__edge9 );
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        candidate_initMvmt_node_v19.lgspFlags = candidate_initMvmt_node_v19.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v19;
                                                                                                                                                                                                                                                                                                        candidate_initMvmt_edge_c27.lgspFlags = candidate_initMvmt_edge_c27.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c27;
label76: ;
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                    while( (candidate_initMvmt_edge_c27 = candidate_initMvmt_edge_c27.lgspInNext) != head_candidate_initMvmt_edge_c27 );
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                candidate_initMvmt_node_v17.lgspFlags = candidate_initMvmt_node_v17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v17;
                                                                                                                                                                                                                                                                                                candidate_initMvmt_edge_c26.lgspFlags = candidate_initMvmt_edge_c26.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c26;
label74: ;
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                            while( (candidate_initMvmt_edge_c26 = candidate_initMvmt_edge_c26.lgspInNext) != head_candidate_initMvmt_edge_c26 );
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        candidate_initMvmt_node_v16_p0.lgspFlags = candidate_initMvmt_node_v16_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v16_p0;
                                                                                                                                                                                                                                                                                        candidate_initMvmt_edge_c25.lgspFlags = candidate_initMvmt_edge_c25.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c25;
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    while( (candidate_initMvmt_edge_c25 = candidate_initMvmt_edge_c25.lgspInNext) != head_candidate_initMvmt_edge_c25 );
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                candidate_initMvmt_node_v13.lgspFlags = candidate_initMvmt_node_v13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v13;
                                                                                                                                                                                                                                                                                candidate_initMvmt_edge_c24.lgspFlags = candidate_initMvmt_edge_c24.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c24;
label72: ;
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            while( (candidate_initMvmt_edge_c24 = candidate_initMvmt_edge_c24.lgspInNext) != head_candidate_initMvmt_edge_c24 );
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        candidate_initMvmt_node_v11.lgspFlags = candidate_initMvmt_node_v11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v11;
                                                                                                                                                                                                                                                                        candidate_initMvmt_edge_c23.lgspFlags = candidate_initMvmt_edge_c23.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c23;
label70: ;
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    while( (candidate_initMvmt_edge_c23 = candidate_initMvmt_edge_c23.lgspInNext) != head_candidate_initMvmt_edge_c23 );
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                candidate_initMvmt_node_v10_p0.lgspFlags = candidate_initMvmt_node_v10_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v10_p0;
                                                                                                                                                                                                                                                                candidate_initMvmt_edge_c22.lgspFlags = candidate_initMvmt_edge_c22.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c22;
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            while( (candidate_initMvmt_edge_c22 = candidate_initMvmt_edge_c22.lgspInNext) != head_candidate_initMvmt_edge_c22 );
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        candidate_initMvmt_edge__edge6.lgspFlags = candidate_initMvmt_edge__edge6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge6;
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    while( (candidate_initMvmt_edge__edge6 = candidate_initMvmt_edge__edge6.lgspOutNext) != head_candidate_initMvmt_edge__edge6 );
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                candidate_initMvmt_edge__edge5.lgspFlags = candidate_initMvmt_edge__edge5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge5;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            while( (candidate_initMvmt_edge__edge5 = candidate_initMvmt_edge__edge5.lgspOutNext) != head_candidate_initMvmt_edge__edge5 );
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        candidate_initMvmt_node_v16.lgspFlags = candidate_initMvmt_node_v16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v16;
                                                                                                                                                                                                                                        candidate_initMvmt_edge_c21.lgspFlags = candidate_initMvmt_edge_c21.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c21;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    while( (candidate_initMvmt_edge_c21 = candidate_initMvmt_edge_c21.lgspInNext) != head_candidate_initMvmt_edge_c21 );
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                candidate_initMvmt_node_y3.lgspFlags = candidate_initMvmt_node_y3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_y3;
                                                                                                                                                                                                                                candidate_initMvmt_edge__edge4.lgspFlags = candidate_initMvmt_edge__edge4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge4;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            while( (candidate_initMvmt_edge__edge4 = candidate_initMvmt_edge__edge4.lgspOutNext) != head_candidate_initMvmt_edge__edge4 );
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        candidate_initMvmt_node_v10.lgspFlags = candidate_initMvmt_node_v10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v10;
                                                                                                                                                                                                                        candidate_initMvmt_edge_c20.lgspFlags = candidate_initMvmt_edge_c20.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c20;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    while( (candidate_initMvmt_edge_c20 = candidate_initMvmt_edge_c20.lgspInNext) != head_candidate_initMvmt_edge_c20 );
                                                                                                                                                                                                                }
                                                                                                                                                                                                                candidate_initMvmt_node_v8_p0.lgspFlags = candidate_initMvmt_node_v8_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v8_p0;
                                                                                                                                                                                                                candidate_initMvmt_edge_c19.lgspFlags = candidate_initMvmt_edge_c19.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c19;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            while( (candidate_initMvmt_edge_c19 = candidate_initMvmt_edge_c19.lgspInNext) != head_candidate_initMvmt_edge_c19 );
                                                                                                                                                                                                        }
                                                                                                                                                                                                        candidate_initMvmt_node_y2.lgspFlags = candidate_initMvmt_node_y2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_y2;
                                                                                                                                                                                                        candidate_initMvmt_edge__edge2.lgspFlags = candidate_initMvmt_edge__edge2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge2;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    while( (candidate_initMvmt_edge__edge2 = candidate_initMvmt_edge__edge2.lgspOutNext) != head_candidate_initMvmt_edge__edge2 );
                                                                                                                                                                                                }
                                                                                                                                                                                                candidate_initMvmt_node_v5_p0.lgspFlags = candidate_initMvmt_node_v5_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v5_p0;
                                                                                                                                                                                                candidate_initMvmt_edge_c18.lgspFlags = candidate_initMvmt_edge_c18.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c18;
                                                                                                                                                                                            }
                                                                                                                                                                                            while( (candidate_initMvmt_edge_c18 = candidate_initMvmt_edge_c18.lgspInNext) != head_candidate_initMvmt_edge_c18 );
                                                                                                                                                                                        }
                                                                                                                                                                                        candidate_initMvmt_node_y1.lgspFlags = candidate_initMvmt_node_y1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_y1;
                                                                                                                                                                                        candidate_initMvmt_edge__edge7.lgspFlags = candidate_initMvmt_edge__edge7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge7;
                                                                                                                                                                                    }
                                                                                                                                                                                    while( (candidate_initMvmt_edge__edge7 = candidate_initMvmt_edge__edge7.lgspOutNext) != head_candidate_initMvmt_edge__edge7 );
                                                                                                                                                                                }
                                                                                                                                                                                candidate_initMvmt_edge__edge3.lgspFlags = candidate_initMvmt_edge__edge3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge3;
                                                                                                                                                                            }
                                                                                                                                                                            while( (candidate_initMvmt_edge__edge3 = candidate_initMvmt_edge__edge3.lgspOutNext) != head_candidate_initMvmt_edge__edge3 );
                                                                                                                                                                        }
                                                                                                                                                                        candidate_initMvmt_edge__edge8.lgspFlags = candidate_initMvmt_edge__edge8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge8;
                                                                                                                                                                    }
                                                                                                                                                                    while( (candidate_initMvmt_edge__edge8 = candidate_initMvmt_edge__edge8.lgspOutNext) != head_candidate_initMvmt_edge__edge8 );
                                                                                                                                                                }
                                                                                                                                                                candidate_initMvmt_node_v15.lgspFlags = candidate_initMvmt_node_v15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v15;
                                                                                                                                                                candidate_initMvmt_edge_c15.lgspFlags = candidate_initMvmt_edge_c15.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c15;
label68: ;
                                                                                                                                                            }
                                                                                                                                                            while( (candidate_initMvmt_edge_c15 = candidate_initMvmt_edge_c15.lgspInNext) != head_candidate_initMvmt_edge_c15 );
                                                                                                                                                        }
                                                                                                                                                        candidate_initMvmt_node_v14_p0.lgspFlags = candidate_initMvmt_node_v14_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v14_p0;
                                                                                                                                                        candidate_initMvmt_edge_c14.lgspFlags = candidate_initMvmt_edge_c14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c14;
                                                                                                                                                    }
                                                                                                                                                    while( (candidate_initMvmt_edge_c14 = candidate_initMvmt_edge_c14.lgspInNext) != head_candidate_initMvmt_edge_c14 );
                                                                                                                                                }
                                                                                                                                                candidate_initMvmt_node_v9.lgspFlags = candidate_initMvmt_node_v9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v9;
                                                                                                                                                candidate_initMvmt_edge_c13.lgspFlags = candidate_initMvmt_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c13;
label66: ;
                                                                                                                                            }
                                                                                                                                            while( (candidate_initMvmt_edge_c13 = candidate_initMvmt_edge_c13.lgspInNext) != head_candidate_initMvmt_edge_c13 );
                                                                                                                                        }
                                                                                                                                        candidate_initMvmt_node_v8.lgspFlags = candidate_initMvmt_node_v8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v8;
                                                                                                                                        candidate_initMvmt_edge_c12.lgspFlags = candidate_initMvmt_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c12;
label64: ;
                                                                                                                                    }
                                                                                                                                    while( (candidate_initMvmt_edge_c12 = candidate_initMvmt_edge_c12.lgspInNext) != head_candidate_initMvmt_edge_c12 );
                                                                                                                                }
                                                                                                                                candidate_initMvmt_node_v7_p0.lgspFlags = candidate_initMvmt_node_v7_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v7_p0;
                                                                                                                                candidate_initMvmt_edge_c11.lgspFlags = candidate_initMvmt_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c11;
                                                                                                                            }
                                                                                                                            while( (candidate_initMvmt_edge_c11 = candidate_initMvmt_edge_c11.lgspInNext) != head_candidate_initMvmt_edge_c11 );
                                                                                                                        }
                                                                                                                        candidate_initMvmt_node_v6.lgspFlags = candidate_initMvmt_node_v6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v6;
                                                                                                                        candidate_initMvmt_edge_c10.lgspFlags = candidate_initMvmt_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c10;
label62: ;
                                                                                                                    }
                                                                                                                    while( (candidate_initMvmt_edge_c10 = candidate_initMvmt_edge_c10.lgspInNext) != head_candidate_initMvmt_edge_c10 );
                                                                                                                }
                                                                                                                candidate_initMvmt_node_v5.lgspFlags = candidate_initMvmt_node_v5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v5;
                                                                                                                candidate_initMvmt_edge_c9.lgspFlags = candidate_initMvmt_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c9;
label60: ;
                                                                                                            }
                                                                                                            while( (candidate_initMvmt_edge_c9 = candidate_initMvmt_edge_c9.lgspInNext) != head_candidate_initMvmt_edge_c9 );
                                                                                                        }
                                                                                                        candidate_initMvmt_node_v4_p0.lgspFlags = candidate_initMvmt_node_v4_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v4_p0;
                                                                                                        candidate_initMvmt_edge_c8.lgspFlags = candidate_initMvmt_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c8;
                                                                                                    }
                                                                                                    while( (candidate_initMvmt_edge_c8 = candidate_initMvmt_edge_c8.lgspInNext) != head_candidate_initMvmt_edge_c8 );
                                                                                                }
                                                                                                candidate_initMvmt_node_v2_p0.lgspFlags = candidate_initMvmt_node_v2_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v2_p0;
                                                                                                candidate_initMvmt_edge_c17.lgspFlags = candidate_initMvmt_edge_c17.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c17;
                                                                                            }
                                                                                            while( (candidate_initMvmt_edge_c17 = candidate_initMvmt_edge_c17.lgspInNext) != head_candidate_initMvmt_edge_c17 );
                                                                                        }
                                                                                        candidate_initMvmt_node_v1_p0.lgspFlags = candidate_initMvmt_node_v1_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v1_p0;
                                                                                        candidate_initMvmt_edge_c16.lgspFlags = candidate_initMvmt_edge_c16.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c16;
                                                                                    }
                                                                                    while( (candidate_initMvmt_edge_c16 = candidate_initMvmt_edge_c16.lgspInNext) != head_candidate_initMvmt_edge_c16 );
                                                                                }
                                                                                candidate_initMvmt_node_y0.lgspFlags = candidate_initMvmt_node_y0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_y0;
                                                                                candidate_initMvmt_edge__edge0.lgspFlags = candidate_initMvmt_edge__edge0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge__edge0;
                                                                            }
                                                                            while( (candidate_initMvmt_edge__edge0 = candidate_initMvmt_edge__edge0.lgspOutNext) != head_candidate_initMvmt_edge__edge0 );
                                                                        }
                                                                        candidate_initMvmt_node_v14.lgspFlags = candidate_initMvmt_node_v14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v14;
                                                                        candidate_initMvmt_edge_c3.lgspFlags = candidate_initMvmt_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c3;
                                                                    }
                                                                    while( (candidate_initMvmt_edge_c3 = candidate_initMvmt_edge_c3.lgspInNext) != head_candidate_initMvmt_edge_c3 );
                                                                }
                                                                candidate_initMvmt_node_v7.lgspFlags = candidate_initMvmt_node_v7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v7;
                                                                candidate_initMvmt_edge_c2.lgspFlags = candidate_initMvmt_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c2;
label58: ;
                                                            }
                                                            while( (candidate_initMvmt_edge_c2 = candidate_initMvmt_edge_c2.lgspInNext) != head_candidate_initMvmt_edge_c2 );
                                                        }
                                                        candidate_initMvmt_node_v4.lgspFlags = candidate_initMvmt_node_v4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v4;
                                                        candidate_initMvmt_edge_c1.lgspFlags = candidate_initMvmt_edge_c1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c1;
                                                    }
                                                    while( (candidate_initMvmt_edge_c1 = candidate_initMvmt_edge_c1.lgspInNext) != head_candidate_initMvmt_edge_c1 );
                                                }
                                                candidate_initMvmt_node_v3.lgspFlags = candidate_initMvmt_node_v3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v3;
                                                candidate_initMvmt_edge_c7.lgspFlags = candidate_initMvmt_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c7;
label56: ;
                                            }
                                            while( (candidate_initMvmt_edge_c7 = candidate_initMvmt_edge_c7.lgspInNext) != head_candidate_initMvmt_edge_c7 );
                                        }
                                        candidate_initMvmt_node_v2.lgspFlags = candidate_initMvmt_node_v2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v2;
                                        candidate_initMvmt_edge_c6.lgspFlags = candidate_initMvmt_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c6;
label54: ;
                                    }
                                    while( (candidate_initMvmt_edge_c6 = candidate_initMvmt_edge_c6.lgspInNext) != head_candidate_initMvmt_edge_c6 );
                                }
                                candidate_initMvmt_node_v1.lgspFlags = candidate_initMvmt_node_v1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v1;
                                candidate_initMvmt_edge_c5.lgspFlags = candidate_initMvmt_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c5;
label52: ;
                            }
                            while( (candidate_initMvmt_edge_c5 = candidate_initMvmt_edge_c5.lgspInNext) != head_candidate_initMvmt_edge_c5 );
                        }
                        candidate_initMvmt_node_v0_p0.lgspFlags = candidate_initMvmt_node_v0_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v0_p0;
                        candidate_initMvmt_edge_c4.lgspFlags = candidate_initMvmt_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c4;
                    }
                    while( (candidate_initMvmt_edge_c4 = candidate_initMvmt_edge_c4.lgspInNext) != head_candidate_initMvmt_edge_c4 );
                }
                candidate_initMvmt_node_r0.lgspFlags = candidate_initMvmt_node_r0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_r0;
                candidate_initMvmt_node_v0.lgspFlags = candidate_initMvmt_node_v0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_node_v0;
                candidate_initMvmt_edge_c0.lgspFlags = candidate_initMvmt_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_initMvmt_edge_c0;
label50: ;
            }
            return matches;
        }
        /// <summary> Type of the matcher method (with parameters processing environment containing host graph, maximum number of matches to search for (zero=unlimited), and rule parameters; returning found matches). </summary>
        public delegate GRGEN_LIBGR.IMatchesExact<Rule_initMvmt.IMatch_initMvmt> MatchInvoker(GRGEN_LGSP.LGSPActionExecutionEnvironment actionEnv, int maxMatches);
        /// <summary> A delegate pointing to the current matcher program for this rule. </summary>
        public MatchInvoker DynamicMatch;
        /// <summary> The RulePattern object from which this LGSPAction object has been created. </summary>
        public GRGEN_LIBGR.IRulePattern RulePattern { get { return _rulePattern; } }
        public GRGEN_LIBGR.IMatchesExact<Rule_initMvmt.IMatch_initMvmt> Match(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int maxMatches)
        {
            return DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, maxMatches);
        }
        public void Modify(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, Rule_initMvmt.IMatch_initMvmt match)
        {
            _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, match);
        }
        public void ModifyAll(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatchesExact<Rule_initMvmt.IMatch_initMvmt> matches)
        {
            foreach(Rule_initMvmt.IMatch_initMvmt match in matches)
            {
                
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, match);
            }
        }
        public bool Apply(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_initMvmt.IMatch_initMvmt> matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
            if(matches.Count <= 0) return false;
            _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, matches.First);
            return true;
        }
        public int ApplyAll(int maxMatches, GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_initMvmt.IMatch_initMvmt> matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, maxMatches);
            if(matches.Count <= 0) return 0;
            foreach(Rule_initMvmt.IMatch_initMvmt match in matches)
            {
                
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, match);
            }
            return matches.Count;
        }
        public bool ApplyStar(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_initMvmt.IMatch_initMvmt> matches;
            
            while(true)
            {
                matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
                if(matches.Count <= 0) return true;
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, matches.First);
            }
        }
        public bool ApplyPlus(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_initMvmt.IMatch_initMvmt> matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
            if(matches.Count <= 0) return false;
            
            do
            {
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, matches.First);
                matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
            }
            while(matches.Count > 0) ;
            return true;
        }
        public bool ApplyMinMax(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int min, int max)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_initMvmt.IMatch_initMvmt> matches;
            
            for(int i = 0; i < max; i++)
            {
                matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
                if(matches.Count <= 0) return i >= min;
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, matches.First);
            }
            return true;
        }
        // implementation of inexact action interface by delegation to exact action interface
        public GRGEN_LIBGR.IMatches Match(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int maxMatches, object[] parameters)
        {
            return Match(actionEnv, maxMatches);
        }
        public object[] Modify(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatch match)
        {
            
            Modify(actionEnv, (Rule_initMvmt.IMatch_initMvmt)match);
            return ReturnArray;
        }
        public List<object[]> ModifyAll(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatches matches)
        {
            ModifyAll(actionEnv, (GRGEN_LIBGR.IMatchesExact<Rule_initMvmt.IMatch_initMvmt>)matches);
            while(AvailableReturnArrays.Count < matches.Count) AvailableReturnArrays.Add(new object[0]);
            ReturnArrayListForAll.Clear();
            for(int i=0; i<matches.Count; ++i)
            {
                ReturnArrayListForAll.Add(AvailableReturnArrays[i]);
            }
            return ReturnArrayListForAll;
        }
        object[] GRGEN_LIBGR.IAction.Apply(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            
            if(Apply(actionEnv)) {
                return ReturnArray;
            }
            else return null;
        }
        object[] GRGEN_LIBGR.IAction.Apply(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, params object[] parameters)
        {
            
            if(Apply(actionEnv)) {
                return ReturnArray;
            }
            else return null;
        }
        public List<object[]> Reserve(int numReturns)
        {
            if(AvailableReturnArrays == null)
                AvailableReturnArrays = new List<object[]>();
            while(AvailableReturnArrays.Count < numReturns) AvailableReturnArrays.Add(new object[0]);
            if(ReturnArrayListForAll == null)
                ReturnArrayListForAll = new List<object[]>();
            ReturnArrayListForAll.Clear();
            for(int i=0; i<numReturns; ++i)
            {
                ReturnArrayListForAll.Add(AvailableReturnArrays[i]);
            }
            return ReturnArrayListForAll;
        }
        List<object[]> GRGEN_LIBGR.IAction.ApplyAll(int maxMatches, GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            int matchesCount = ApplyAll(maxMatches, actionEnv);
            while(AvailableReturnArrays.Count < matchesCount) AvailableReturnArrays.Add(new object[0]);
            ReturnArrayListForAll.Clear();
            for(int i=0; i<matchesCount; ++i)
            {
                ReturnArrayListForAll.Add(AvailableReturnArrays[i]);
            }
            return ReturnArrayListForAll;
        }
        List<object[]> GRGEN_LIBGR.IAction.ApplyAll(int maxMatches, GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, params object[] parameters)
        {
            int matchesCount = ApplyAll(maxMatches, actionEnv);
            while(AvailableReturnArrays.Count < matchesCount) AvailableReturnArrays.Add(new object[0]);
            ReturnArrayListForAll.Clear();
            for(int i=0; i<matchesCount; ++i)
            {
                ReturnArrayListForAll.Add(AvailableReturnArrays[i]);
            }
            return ReturnArrayListForAll;
        }
        bool GRGEN_LIBGR.IAction.ApplyStar(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            return ApplyStar(actionEnv);
        }
        bool GRGEN_LIBGR.IAction.ApplyStar(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, params object[] parameters)
        {
            return ApplyStar(actionEnv);
        }
        bool GRGEN_LIBGR.IAction.ApplyPlus(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            return ApplyPlus(actionEnv);
        }
        bool GRGEN_LIBGR.IAction.ApplyPlus(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, params object[] parameters)
        {
            return ApplyPlus(actionEnv);
        }
        bool GRGEN_LIBGR.IAction.ApplyMinMax(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int min, int max)
        {
            return ApplyMinMax(actionEnv, min, max);
        }
        bool GRGEN_LIBGR.IAction.ApplyMinMax(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int min, int max, params object[] parameters)
        {
            return ApplyMinMax(actionEnv, min, max);
        }
        public void Filter(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatches matches, GRGEN_LIBGR.FilterCallWithArguments filter)
        {
            switch(filter.PackagePrefixedName) {
                case "keepFirst": matches.Filter_keepFirst((System.Int32)(filter.Arguments[0])); break;
                case "keepLast": matches.Filter_keepLast((System.Int32)(filter.Arguments[0])); break;
                case "keepFirstFraction": matches.Filter_keepFirstFraction((System.Double)(filter.Arguments[0])); break;
                case "keepLastFraction": matches.Filter_keepLastFraction((System.Double)(filter.Arguments[0])); break;
                case "removeFirst": matches.Filter_removeFirst((System.Int32)(filter.Arguments[0])); break;
                case "removeLast": matches.Filter_removeLast((System.Int32)(filter.Arguments[0])); break;
                case "removeFirstFraction": matches.Filter_removeFirstFraction((System.Double)(filter.Arguments[0])); break;
                case "removeLastFraction": matches.Filter_removeLastFraction((System.Double)(filter.Arguments[0])); break;
                default: throw new Exception("Unknown filter name " + filter.PackagePrefixedName + "!");
            }
        }
    }
    
    /// <summary>
    /// An object representing an executable rule - same as IAction, but with exact types and distinct parameters.
    /// </summary>
    public interface IAction_move
    {
        /// <summary> same as IAction.Match, but with exact types and distinct parameters. </summary>
        GRGEN_LIBGR.IMatchesExact<Rule_move.IMatch_move> Match(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int maxMatches);
        /// <summary> same as IAction.Modify, but with exact types and distinct parameters. </summary>
        void Modify(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, Rule_move.IMatch_move match);
        /// <summary> same as IAction.ModifyAll, but with exact types and distinct parameters. </summary>
        void ModifyAll(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatchesExact<Rule_move.IMatch_move> matches);
        /// <summary> same as IAction.Apply, but with exact types and distinct parameters; returns true if applied </summary>
        bool Apply(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv);
        /// <summary> same as IAction.ApplyAll, but with exact types and distinct parameters; returns the number of matches found/applied. </summary>
        int ApplyAll(int maxMatches, GRGEN_LIBGR.IActionExecutionEnvironment actionEnv);
        /// <summary> same as IAction.ApplyStar, but with exact types and distinct parameters. </summary>
        bool ApplyStar(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv);
        /// <summary> same as IAction.ApplyPlus, but with exact types and distinct parameters. </summary>
        bool ApplyPlus(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv);
        /// <summary> same as IAction.ApplyMinMax, but with exact types and distinct parameters. </summary>
        bool ApplyMinMax(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int min, int max);
    }
    
    public class Action_move : GRGEN_LGSP.LGSPAction, GRGEN_LIBGR.IAction, IAction_move
    {
        public Action_move()
            : base(Rule_move.Instance.patternGraph)
        {
            _rulePattern = Rule_move.Instance;
            DynamicMatch = myMatch;
        }

        public Rule_move _rulePattern;
        public override GRGEN_LGSP.LGSPRulePattern rulePattern { get { return _rulePattern; } }
        public override string Name { get { return "move"; } }
        [ThreadStatic] private static GRGEN_LGSP.LGSPMatchesList<Rule_move.Match_move, Rule_move.IMatch_move> matches;

        // Performance optimization: saves us usage of new for the return array or the return arrays. In the object/string-style modify/apply methods of the action interface implementation.
        [ThreadStatic] public static object[] ReturnArray;
        [ThreadStatic] public static List<object[]> ReturnArrayListForAll;
        [ThreadStatic] public static List<object[]> AvailableReturnArrays;
        public static Action_move Instance { get { return instance; } set { instance = value; } }
        private static Action_move instance = new Action_move();
        
        public GRGEN_LIBGR.IMatchesExact<Rule_move.IMatch_move> myMatch(GRGEN_LGSP.LGSPActionExecutionEnvironment actionEnv, int maxMatches)
        {
            GRGEN_LGSP.LGSPGraph graph = actionEnv.graph;
            if(matches == null)
                matches = new GRGEN_LGSP.LGSPMatchesList<Rule_move.Match_move, Rule_move.IMatch_move>(this);
            matches.Clear();
            if(ReturnArray == null)
                ReturnArray = new object[0];
            int isoSpace = 0;
            Stack<GRGEN_LGSP.LGSPSubpatternAction> openTasks = new Stack<GRGEN_LGSP.LGSPSubpatternAction>();
            List<Stack<GRGEN_LIBGR.IMatch>> foundPartialMatches = new List<Stack<GRGEN_LIBGR.IMatch>>();
            List<Stack<GRGEN_LIBGR.IMatch>> matchesList = foundPartialMatches;
            // Lookup move_edge_c0 
            int type_id_candidate_move_edge_c0 = 3;
            for(GRGEN_LGSP.LGSPEdge head_candidate_move_edge_c0 = graph.edgesByTypeHeads[type_id_candidate_move_edge_c0], candidate_move_edge_c0 = head_candidate_move_edge_c0.lgspTypeNext; candidate_move_edge_c0 != head_candidate_move_edge_c0; candidate_move_edge_c0 = candidate_move_edge_c0.lgspTypeNext)
            {
                uint prev__candidate_move_edge_c0;
                prev__candidate_move_edge_c0 = candidate_move_edge_c0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                candidate_move_edge_c0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                // Implicit Source move_node_v0 from move_edge_c0 
                GRGEN_LGSP.LGSPNode candidate_move_node_v0 = candidate_move_edge_c0.lgspSource;
                if(candidate_move_node_v0.lgspType.TypeID!=15) {
                    candidate_move_edge_c0.lgspFlags = candidate_move_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c0;
                    continue;
                }
                uint prev__candidate_move_node_v0;
                prev__candidate_move_node_v0 = candidate_move_node_v0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                candidate_move_node_v0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                // Implicit Target move_node_r0 from move_edge_c0 
                GRGEN_LGSP.LGSPNode candidate_move_node_r0 = candidate_move_edge_c0.lgspTarget;
                if((candidate_move_node_r0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                {
                    candidate_move_node_v0.lgspFlags = candidate_move_node_v0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v0;
                    candidate_move_edge_c0.lgspFlags = candidate_move_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c0;
                    continue;
                }
                uint prev__candidate_move_node_r0;
                prev__candidate_move_node_r0 = candidate_move_node_r0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                candidate_move_node_r0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                // Extend Incoming move_edge_c2 from move_node_v0 
                GRGEN_LGSP.LGSPEdge head_candidate_move_edge_c2 = candidate_move_node_v0.lgspInhead;
                if(head_candidate_move_edge_c2 != null)
                {
                    GRGEN_LGSP.LGSPEdge candidate_move_edge_c2 = head_candidate_move_edge_c2;
                    do
                    {
                        if(candidate_move_edge_c2.lgspType.TypeID!=5) {
                            continue;
                        }
                        uint prev__candidate_move_edge_c2;
                        prev__candidate_move_edge_c2 = candidate_move_edge_c2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                        candidate_move_edge_c2.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                        // Implicit Source move_node_v0_p0 from move_edge_c2 
                        GRGEN_LGSP.LGSPNode candidate_move_node_v0_p0 = candidate_move_edge_c2.lgspSource;
                        if(candidate_move_node_v0_p0.lgspType.TypeID!=7) {
                            candidate_move_edge_c2.lgspFlags = candidate_move_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c2;
                            continue;
                        }
                        if((candidate_move_node_v0_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                        {
                            candidate_move_edge_c2.lgspFlags = candidate_move_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c2;
                            continue;
                        }
                        uint prev__candidate_move_node_v0_p0;
                        prev__candidate_move_node_v0_p0 = candidate_move_node_v0_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                        candidate_move_node_v0_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                        // Condition 
                        if(!((((GRGEN_MODEL.IBPort)candidate_move_node_v0_p0).@ix == 0))) {
                            candidate_move_node_v0_p0.lgspFlags = candidate_move_node_v0_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v0_p0;
                            candidate_move_edge_c2.lgspFlags = candidate_move_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c2;
                            continue;
                        }
                        // Extend Incoming move_edge_c3 from move_node_v0 
                        GRGEN_LGSP.LGSPEdge head_candidate_move_edge_c3 = candidate_move_node_v0.lgspInhead;
                        if(head_candidate_move_edge_c3 != null)
                        {
                            GRGEN_LGSP.LGSPEdge candidate_move_edge_c3 = head_candidate_move_edge_c3;
                            do
                            {
                                if(candidate_move_edge_c3.lgspType.TypeID!=3) {
                                    continue;
                                }
                                if((candidate_move_edge_c3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                {
                                    continue;
                                }
                                uint prev__candidate_move_edge_c3;
                                prev__candidate_move_edge_c3 = candidate_move_edge_c3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                candidate_move_edge_c3.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                // Implicit Source move_node_v1 from move_edge_c3 
                                GRGEN_LGSP.LGSPNode candidate_move_node_v1 = candidate_move_edge_c3.lgspSource;
                                if(candidate_move_node_v1.lgspType.TypeID!=17) {
                                    candidate_move_edge_c3.lgspFlags = candidate_move_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c3;
                                    continue;
                                }
                                if((candidate_move_node_v1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                {
                                    candidate_move_edge_c3.lgspFlags = candidate_move_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c3;
                                    continue;
                                }
                                uint prev__candidate_move_node_v1;
                                prev__candidate_move_node_v1 = candidate_move_node_v1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                candidate_move_node_v1.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat3_43 assigned from expression 1 
                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat3_43 = (System.Int32)1;
                                // Element nac_NodesWithoutSites_node_src_inlined_pat3_43 assigned from other element move_node_v1 
                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat3_43 = candidate_move_node_v1;
                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat3_43.lgspType.TypeID]) {
                                    candidate_move_node_v1.lgspFlags = candidate_move_node_v1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v1;
                                    candidate_move_edge_c3.lgspFlags = candidate_move_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c3;
                                    continue;
                                }
                                // NegativePattern 
                                {
                                    ++isoSpace;
                                    // Condition 
                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat3_43, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat3_43))) {
                                        --isoSpace;
                                        goto label81;
                                    }
                                    // negative pattern found
                                    --isoSpace;
                                    candidate_move_node_v1.lgspFlags = candidate_move_node_v1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v1;
                                    candidate_move_edge_c3.lgspFlags = candidate_move_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c3;
                                    goto label82;
                                    --isoSpace;
                                }
label81: ;
                                // Extend Incoming move_edge_c4 from move_node_v0 
                                GRGEN_LGSP.LGSPEdge head_candidate_move_edge_c4 = candidate_move_node_v0.lgspInhead;
                                if(head_candidate_move_edge_c4 != null)
                                {
                                    GRGEN_LGSP.LGSPEdge candidate_move_edge_c4 = head_candidate_move_edge_c4;
                                    do
                                    {
                                        if(candidate_move_edge_c4.lgspType.TypeID!=3) {
                                            continue;
                                        }
                                        if((candidate_move_edge_c4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                        {
                                            continue;
                                        }
                                        uint prev__candidate_move_edge_c4;
                                        prev__candidate_move_edge_c4 = candidate_move_edge_c4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                        candidate_move_edge_c4.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                        // Implicit Source move_node_v3 from move_edge_c4 
                                        GRGEN_LGSP.LGSPNode candidate_move_node_v3 = candidate_move_edge_c4.lgspSource;
                                        if(candidate_move_node_v3.lgspType.TypeID!=18) {
                                            candidate_move_edge_c4.lgspFlags = candidate_move_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c4;
                                            continue;
                                        }
                                        if((candidate_move_node_v3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                        {
                                            candidate_move_edge_c4.lgspFlags = candidate_move_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c4;
                                            continue;
                                        }
                                        uint prev__candidate_move_node_v3;
                                        prev__candidate_move_node_v3 = candidate_move_node_v3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                        candidate_move_node_v3.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat5_45 assigned from expression 1 
                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat5_45 = (System.Int32)1;
                                        // Element nac_NodesWithoutSites_node_src_inlined_pat5_45 assigned from other element move_node_v3 
                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat5_45 = candidate_move_node_v3;
                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat5_45.lgspType.TypeID]) {
                                            candidate_move_node_v3.lgspFlags = candidate_move_node_v3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v3;
                                            candidate_move_edge_c4.lgspFlags = candidate_move_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c4;
                                            continue;
                                        }
                                        // NegativePattern 
                                        {
                                            ++isoSpace;
                                            // Condition 
                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat5_45, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat5_45))) {
                                                --isoSpace;
                                                goto label83;
                                            }
                                            // negative pattern found
                                            --isoSpace;
                                            candidate_move_node_v3.lgspFlags = candidate_move_node_v3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v3;
                                            candidate_move_edge_c4.lgspFlags = candidate_move_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c4;
                                            goto label84;
                                            --isoSpace;
                                        }
label83: ;
                                        // Extend Incoming move_edge_c1 from move_node_r0 
                                        GRGEN_LGSP.LGSPEdge head_candidate_move_edge_c1 = candidate_move_node_r0.lgspInhead;
                                        if(head_candidate_move_edge_c1 != null)
                                        {
                                            GRGEN_LGSP.LGSPEdge candidate_move_edge_c1 = head_candidate_move_edge_c1;
                                            do
                                            {
                                                if(candidate_move_edge_c1.lgspType.TypeID!=3) {
                                                    continue;
                                                }
                                                if((candidate_move_edge_c1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                {
                                                    continue;
                                                }
                                                uint prev__candidate_move_edge_c1;
                                                prev__candidate_move_edge_c1 = candidate_move_edge_c1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                candidate_move_edge_c1.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                // Implicit Source move_node_v9 from move_edge_c1 
                                                GRGEN_LGSP.LGSPNode candidate_move_node_v9 = candidate_move_edge_c1.lgspSource;
                                                if(candidate_move_node_v9.lgspType.TypeID!=15) {
                                                    candidate_move_edge_c1.lgspFlags = candidate_move_edge_c1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c1;
                                                    continue;
                                                }
                                                if((candidate_move_node_v9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                {
                                                    candidate_move_edge_c1.lgspFlags = candidate_move_edge_c1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c1;
                                                    continue;
                                                }
                                                uint prev__candidate_move_node_v9;
                                                prev__candidate_move_node_v9 = candidate_move_node_v9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                candidate_move_node_v9.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                // Extend Outgoing move_edge__edge0 from move_node_v0_p0 
                                                GRGEN_LGSP.LGSPEdge head_candidate_move_edge__edge0 = candidate_move_node_v0_p0.lgspOuthead;
                                                if(head_candidate_move_edge__edge0 != null)
                                                {
                                                    GRGEN_LGSP.LGSPEdge candidate_move_edge__edge0 = head_candidate_move_edge__edge0;
                                                    do
                                                    {
                                                        if(candidate_move_edge__edge0.lgspType.TypeID!=7) {
                                                            continue;
                                                        }
                                                        uint prev__candidate_move_edge__edge0;
                                                        prev__candidate_move_edge__edge0 = candidate_move_edge__edge0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                        candidate_move_edge__edge0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                        // Implicit Target move_node_src from move_edge__edge0 
                                                        GRGEN_LGSP.LGSPNode candidate_move_node_src = candidate_move_edge__edge0.lgspTarget;
                                                        if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_move_node_src.lgspType.TypeID]) {
                                                            candidate_move_edge__edge0.lgspFlags = candidate_move_edge__edge0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge__edge0;
                                                            continue;
                                                        }
                                                        if((candidate_move_node_src.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                        {
                                                            candidate_move_edge__edge0.lgspFlags = candidate_move_edge__edge0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge__edge0;
                                                            continue;
                                                        }
                                                        uint prev__candidate_move_node_src;
                                                        prev__candidate_move_node_src = candidate_move_node_src.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                        candidate_move_node_src.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                        // Extend Incoming move_edge_c7 from move_node_v1 
                                                        GRGEN_LGSP.LGSPEdge head_candidate_move_edge_c7 = candidate_move_node_v1.lgspInhead;
                                                        if(head_candidate_move_edge_c7 != null)
                                                        {
                                                            GRGEN_LGSP.LGSPEdge candidate_move_edge_c7 = head_candidate_move_edge_c7;
                                                            do
                                                            {
                                                                if(candidate_move_edge_c7.lgspType.TypeID!=5) {
                                                                    continue;
                                                                }
                                                                if((candidate_move_edge_c7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                {
                                                                    continue;
                                                                }
                                                                uint prev__candidate_move_edge_c7;
                                                                prev__candidate_move_edge_c7 = candidate_move_edge_c7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                candidate_move_edge_c7.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                // Implicit Source move_node_v1_p0 from move_edge_c7 
                                                                GRGEN_LGSP.LGSPNode candidate_move_node_v1_p0 = candidate_move_edge_c7.lgspSource;
                                                                if(candidate_move_node_v1_p0.lgspType.TypeID!=7) {
                                                                    candidate_move_edge_c7.lgspFlags = candidate_move_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c7;
                                                                    continue;
                                                                }
                                                                if((candidate_move_node_v1_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                {
                                                                    candidate_move_edge_c7.lgspFlags = candidate_move_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c7;
                                                                    continue;
                                                                }
                                                                uint prev__candidate_move_node_v1_p0;
                                                                prev__candidate_move_node_v1_p0 = candidate_move_node_v1_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                candidate_move_node_v1_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                // Condition 
                                                                if(!((((GRGEN_MODEL.IBPort)candidate_move_node_v1_p0).@ix == 0))) {
                                                                    candidate_move_node_v1_p0.lgspFlags = candidate_move_node_v1_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v1_p0;
                                                                    candidate_move_edge_c7.lgspFlags = candidate_move_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c7;
                                                                    continue;
                                                                }
                                                                // Extend Incoming move_edge_c8 from move_node_v1 
                                                                GRGEN_LGSP.LGSPEdge head_candidate_move_edge_c8 = candidate_move_node_v1.lgspInhead;
                                                                if(head_candidate_move_edge_c8 != null)
                                                                {
                                                                    GRGEN_LGSP.LGSPEdge candidate_move_edge_c8 = head_candidate_move_edge_c8;
                                                                    do
                                                                    {
                                                                        if(candidate_move_edge_c8.lgspType.TypeID!=3) {
                                                                            continue;
                                                                        }
                                                                        if((candidate_move_edge_c8.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                        {
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_move_edge_c8;
                                                                        prev__candidate_move_edge_c8 = candidate_move_edge_c8.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                        candidate_move_edge_c8.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                        // Implicit Source move_node_v2 from move_edge_c8 
                                                                        GRGEN_LGSP.LGSPNode candidate_move_node_v2 = candidate_move_edge_c8.lgspSource;
                                                                        if(candidate_move_node_v2.lgspType.TypeID!=35) {
                                                                            candidate_move_edge_c8.lgspFlags = candidate_move_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c8;
                                                                            continue;
                                                                        }
                                                                        if((candidate_move_node_v2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                        {
                                                                            candidate_move_edge_c8.lgspFlags = candidate_move_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c8;
                                                                            continue;
                                                                        }
                                                                        uint prev__candidate_move_node_v2;
                                                                        prev__candidate_move_node_v2 = candidate_move_node_v2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                        candidate_move_node_v2.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat4_44 assigned from expression 0 
                                                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat4_44 = (System.Int32)0;
                                                                        // Element nac_NodesWithoutSites_node_src_inlined_pat4_44 assigned from other element move_node_v2 
                                                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat4_44 = candidate_move_node_v2;
                                                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat4_44.lgspType.TypeID]) {
                                                                            candidate_move_node_v2.lgspFlags = candidate_move_node_v2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v2;
                                                                            candidate_move_edge_c8.lgspFlags = candidate_move_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c8;
                                                                            continue;
                                                                        }
                                                                        // NegativePattern 
                                                                        {
                                                                            ++isoSpace;
                                                                            // Condition 
                                                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat4_44, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat4_44))) {
                                                                                --isoSpace;
                                                                                goto label85;
                                                                            }
                                                                            // negative pattern found
                                                                            --isoSpace;
                                                                            candidate_move_node_v2.lgspFlags = candidate_move_node_v2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v2;
                                                                            candidate_move_edge_c8.lgspFlags = candidate_move_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c8;
                                                                            goto label86;
                                                                            --isoSpace;
                                                                        }
label85: ;
                                                                        // Extend Incoming move_edge_c9 from move_node_v3 
                                                                        GRGEN_LGSP.LGSPEdge head_candidate_move_edge_c9 = candidate_move_node_v3.lgspInhead;
                                                                        if(head_candidate_move_edge_c9 != null)
                                                                        {
                                                                            GRGEN_LGSP.LGSPEdge candidate_move_edge_c9 = head_candidate_move_edge_c9;
                                                                            do
                                                                            {
                                                                                if(candidate_move_edge_c9.lgspType.TypeID!=3) {
                                                                                    continue;
                                                                                }
                                                                                if((candidate_move_edge_c9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                uint prev__candidate_move_edge_c9;
                                                                                prev__candidate_move_edge_c9 = candidate_move_edge_c9.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                candidate_move_edge_c9.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                // Implicit Source move_node_v4 from move_edge_c9 
                                                                                GRGEN_LGSP.LGSPNode candidate_move_node_v4 = candidate_move_edge_c9.lgspSource;
                                                                                if(candidate_move_node_v4.lgspType.TypeID!=19) {
                                                                                    candidate_move_edge_c9.lgspFlags = candidate_move_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c9;
                                                                                    continue;
                                                                                }
                                                                                if((candidate_move_node_v4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                {
                                                                                    candidate_move_edge_c9.lgspFlags = candidate_move_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c9;
                                                                                    continue;
                                                                                }
                                                                                uint prev__candidate_move_node_v4;
                                                                                prev__candidate_move_node_v4 = candidate_move_node_v4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                candidate_move_node_v4.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                // Extend Incoming move_edge_c5 from move_node_v9 
                                                                                GRGEN_LGSP.LGSPEdge head_candidate_move_edge_c5 = candidate_move_node_v9.lgspInhead;
                                                                                if(head_candidate_move_edge_c5 != null)
                                                                                {
                                                                                    GRGEN_LGSP.LGSPEdge candidate_move_edge_c5 = head_candidate_move_edge_c5;
                                                                                    do
                                                                                    {
                                                                                        if(candidate_move_edge_c5.lgspType.TypeID!=5) {
                                                                                            continue;
                                                                                        }
                                                                                        if((candidate_move_edge_c5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        uint prev__candidate_move_edge_c5;
                                                                                        prev__candidate_move_edge_c5 = candidate_move_edge_c5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                        candidate_move_edge_c5.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                        // Implicit Source move_node_v9_p0 from move_edge_c5 
                                                                                        GRGEN_LGSP.LGSPNode candidate_move_node_v9_p0 = candidate_move_edge_c5.lgspSource;
                                                                                        if(candidate_move_node_v9_p0.lgspType.TypeID!=7) {
                                                                                            candidate_move_edge_c5.lgspFlags = candidate_move_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c5;
                                                                                            continue;
                                                                                        }
                                                                                        if((candidate_move_node_v9_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                        {
                                                                                            candidate_move_edge_c5.lgspFlags = candidate_move_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c5;
                                                                                            continue;
                                                                                        }
                                                                                        uint prev__candidate_move_node_v9_p0;
                                                                                        prev__candidate_move_node_v9_p0 = candidate_move_node_v9_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                        candidate_move_node_v9_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                        // Condition 
                                                                                        if(!((((GRGEN_MODEL.IBPort)candidate_move_node_v9_p0).@ix == 0))) {
                                                                                            candidate_move_node_v9_p0.lgspFlags = candidate_move_node_v9_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v9_p0;
                                                                                            candidate_move_edge_c5.lgspFlags = candidate_move_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c5;
                                                                                            continue;
                                                                                        }
                                                                                        // Extend Incoming move_edge_c6 from move_node_v9 
                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_move_edge_c6 = candidate_move_node_v9.lgspInhead;
                                                                                        if(head_candidate_move_edge_c6 != null)
                                                                                        {
                                                                                            GRGEN_LGSP.LGSPEdge candidate_move_edge_c6 = head_candidate_move_edge_c6;
                                                                                            do
                                                                                            {
                                                                                                if(candidate_move_edge_c6.lgspType.TypeID!=3) {
                                                                                                    continue;
                                                                                                }
                                                                                                if((candidate_move_edge_c6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                uint prev__candidate_move_edge_c6;
                                                                                                prev__candidate_move_edge_c6 = candidate_move_edge_c6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                candidate_move_edge_c6.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                // Implicit Source move_node_v10 from move_edge_c6 
                                                                                                GRGEN_LGSP.LGSPNode candidate_move_node_v10 = candidate_move_edge_c6.lgspSource;
                                                                                                if(candidate_move_node_v10.lgspType.TypeID!=18) {
                                                                                                    candidate_move_edge_c6.lgspFlags = candidate_move_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c6;
                                                                                                    continue;
                                                                                                }
                                                                                                if((candidate_move_node_v10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                {
                                                                                                    candidate_move_edge_c6.lgspFlags = candidate_move_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c6;
                                                                                                    continue;
                                                                                                }
                                                                                                uint prev__candidate_move_node_v10;
                                                                                                prev__candidate_move_node_v10 = candidate_move_node_v10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                candidate_move_node_v10.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat2_42 assigned from expression 0 
                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat2_42 = (System.Int32)0;
                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat2_42 assigned from other element move_node_v10 
                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat2_42 = candidate_move_node_v10;
                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat2_42.lgspType.TypeID]) {
                                                                                                    candidate_move_node_v10.lgspFlags = candidate_move_node_v10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v10;
                                                                                                    candidate_move_edge_c6.lgspFlags = candidate_move_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c6;
                                                                                                    continue;
                                                                                                }
                                                                                                // NegativePattern 
                                                                                                {
                                                                                                    ++isoSpace;
                                                                                                    // Condition 
                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat2_42, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat2_42))) {
                                                                                                        --isoSpace;
                                                                                                        goto label87;
                                                                                                    }
                                                                                                    // negative pattern found
                                                                                                    --isoSpace;
                                                                                                    candidate_move_node_v10.lgspFlags = candidate_move_node_v10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v10;
                                                                                                    candidate_move_edge_c6.lgspFlags = candidate_move_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c6;
                                                                                                    goto label88;
                                                                                                    --isoSpace;
                                                                                                }
label87: ;
                                                                                                // Extend Outgoing move_edge__edge2 from move_node_v1_p0 
                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_move_edge__edge2 = candidate_move_node_v1_p0.lgspOuthead;
                                                                                                if(head_candidate_move_edge__edge2 != null)
                                                                                                {
                                                                                                    GRGEN_LGSP.LGSPEdge candidate_move_edge__edge2 = head_candidate_move_edge__edge2;
                                                                                                    do
                                                                                                    {
                                                                                                        if(candidate_move_edge__edge2.lgspType.TypeID!=7) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        if((candidate_move_edge__edge2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        uint prev__candidate_move_edge__edge2;
                                                                                                        prev__candidate_move_edge__edge2 = candidate_move_edge__edge2.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                        candidate_move_edge__edge2.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                        // Extend Incoming move_edge_c10 from move_node_v2 
                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_move_edge_c10 = candidate_move_node_v2.lgspInhead;
                                                                                                        if(head_candidate_move_edge_c10 != null)
                                                                                                        {
                                                                                                            GRGEN_LGSP.LGSPEdge candidate_move_edge_c10 = head_candidate_move_edge_c10;
                                                                                                            do
                                                                                                            {
                                                                                                                if(candidate_move_edge_c10.lgspType.TypeID!=5) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((candidate_move_edge_c10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                uint prev__candidate_move_edge_c10;
                                                                                                                prev__candidate_move_edge_c10 = candidate_move_edge_c10.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                candidate_move_edge_c10.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                // Implicit Source move_node_v2_p0 from move_edge_c10 
                                                                                                                GRGEN_LGSP.LGSPNode candidate_move_node_v2_p0 = candidate_move_edge_c10.lgspSource;
                                                                                                                if(candidate_move_node_v2_p0.lgspType.TypeID!=7) {
                                                                                                                    candidate_move_edge_c10.lgspFlags = candidate_move_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c10;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                if((candidate_move_node_v2_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                {
                                                                                                                    candidate_move_edge_c10.lgspFlags = candidate_move_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c10;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                uint prev__candidate_move_node_v2_p0;
                                                                                                                prev__candidate_move_node_v2_p0 = candidate_move_node_v2_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                candidate_move_node_v2_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                // Condition 
                                                                                                                if(!((((GRGEN_MODEL.IBPort)candidate_move_node_v2_p0).@ix == 0))) {
                                                                                                                    candidate_move_node_v2_p0.lgspFlags = candidate_move_node_v2_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v2_p0;
                                                                                                                    candidate_move_edge_c10.lgspFlags = candidate_move_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c10;
                                                                                                                    continue;
                                                                                                                }
                                                                                                                // Extend Incoming move_edge_c11 from move_node_v4 
                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_move_edge_c11 = candidate_move_node_v4.lgspInhead;
                                                                                                                if(head_candidate_move_edge_c11 != null)
                                                                                                                {
                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_move_edge_c11 = head_candidate_move_edge_c11;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        if(candidate_move_edge_c11.lgspType.TypeID!=5) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if((candidate_move_edge_c11.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        uint prev__candidate_move_edge_c11;
                                                                                                                        prev__candidate_move_edge_c11 = candidate_move_edge_c11.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                        candidate_move_edge_c11.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                        // Implicit Source move_node_v4_p0 from move_edge_c11 
                                                                                                                        GRGEN_LGSP.LGSPNode candidate_move_node_v4_p0 = candidate_move_edge_c11.lgspSource;
                                                                                                                        if(candidate_move_node_v4_p0.lgspType.TypeID!=7) {
                                                                                                                            candidate_move_edge_c11.lgspFlags = candidate_move_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c11;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        if((candidate_move_node_v4_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                        {
                                                                                                                            candidate_move_edge_c11.lgspFlags = candidate_move_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c11;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        uint prev__candidate_move_node_v4_p0;
                                                                                                                        prev__candidate_move_node_v4_p0 = candidate_move_node_v4_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                        candidate_move_node_v4_p0.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                        // Condition 
                                                                                                                        if(!((((GRGEN_MODEL.IBPort)candidate_move_node_v4_p0).@ix == 0))) {
                                                                                                                            candidate_move_node_v4_p0.lgspFlags = candidate_move_node_v4_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v4_p0;
                                                                                                                            candidate_move_edge_c11.lgspFlags = candidate_move_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c11;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        // Extend Incoming move_edge_c12 from move_node_v4 
                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_move_edge_c12 = candidate_move_node_v4.lgspInhead;
                                                                                                                        if(head_candidate_move_edge_c12 != null)
                                                                                                                        {
                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_move_edge_c12 = head_candidate_move_edge_c12;
                                                                                                                            do
                                                                                                                            {
                                                                                                                                if(candidate_move_edge_c12.lgspType.TypeID!=3) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if((candidate_move_edge_c12.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                uint prev__candidate_move_edge_c12;
                                                                                                                                prev__candidate_move_edge_c12 = candidate_move_edge_c12.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                candidate_move_edge_c12.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                // Implicit Source move_node_v5 from move_edge_c12 
                                                                                                                                GRGEN_LGSP.LGSPNode candidate_move_node_v5 = candidate_move_edge_c12.lgspSource;
                                                                                                                                if(candidate_move_node_v5.lgspType.TypeID!=34) {
                                                                                                                                    candidate_move_edge_c12.lgspFlags = candidate_move_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c12;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                if((candidate_move_node_v5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                {
                                                                                                                                    candidate_move_edge_c12.lgspFlags = candidate_move_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c12;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                uint prev__candidate_move_node_v5;
                                                                                                                                prev__candidate_move_node_v5 = candidate_move_node_v5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                candidate_move_node_v5.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat6_46 assigned from expression 1 
                                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat6_46 = (System.Int32)1;
                                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat6_46 assigned from other element move_node_v5 
                                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat6_46 = candidate_move_node_v5;
                                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat6_46.lgspType.TypeID]) {
                                                                                                                                    candidate_move_node_v5.lgspFlags = candidate_move_node_v5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v5;
                                                                                                                                    candidate_move_edge_c12.lgspFlags = candidate_move_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c12;
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                // NegativePattern 
                                                                                                                                {
                                                                                                                                    ++isoSpace;
                                                                                                                                    // Condition 
                                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat6_46, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat6_46))) {
                                                                                                                                        --isoSpace;
                                                                                                                                        goto label89;
                                                                                                                                    }
                                                                                                                                    // negative pattern found
                                                                                                                                    --isoSpace;
                                                                                                                                    candidate_move_node_v5.lgspFlags = candidate_move_node_v5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v5;
                                                                                                                                    candidate_move_edge_c12.lgspFlags = candidate_move_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c12;
                                                                                                                                    goto label90;
                                                                                                                                    --isoSpace;
                                                                                                                                }
label89: ;
                                                                                                                                // Extend Incoming move_edge_c13 from move_node_v4 
                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_move_edge_c13 = candidate_move_node_v4.lgspInhead;
                                                                                                                                if(head_candidate_move_edge_c13 != null)
                                                                                                                                {
                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_move_edge_c13 = head_candidate_move_edge_c13;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                        if(candidate_move_edge_c13.lgspType.TypeID!=3) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if((candidate_move_edge_c13.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        uint prev__candidate_move_edge_c13;
                                                                                                                                        prev__candidate_move_edge_c13 = candidate_move_edge_c13.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                        candidate_move_edge_c13.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                        // Implicit Source move_node_v7 from move_edge_c13 
                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_move_node_v7 = candidate_move_edge_c13.lgspSource;
                                                                                                                                        if(candidate_move_node_v7.lgspType.TypeID!=36) {
                                                                                                                                            candidate_move_edge_c13.lgspFlags = candidate_move_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c13;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        if((candidate_move_node_v7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                        {
                                                                                                                                            candidate_move_edge_c13.lgspFlags = candidate_move_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c13;
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        uint prev__candidate_move_node_v7;
                                                                                                                                        prev__candidate_move_node_v7 = candidate_move_node_v7.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                        candidate_move_node_v7.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                        // Extend Outgoing move_edge__edge1 from move_node_v9_p0 
                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_move_edge__edge1 = candidate_move_node_v9_p0.lgspOuthead;
                                                                                                                                        if(head_candidate_move_edge__edge1 != null)
                                                                                                                                        {
                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_move_edge__edge1 = head_candidate_move_edge__edge1;
                                                                                                                                            do
                                                                                                                                            {
                                                                                                                                                if(candidate_move_edge__edge1.lgspType.TypeID!=7) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if((candidate_move_edge__edge1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                uint prev__candidate_move_edge__edge1;
                                                                                                                                                prev__candidate_move_edge__edge1 = candidate_move_edge__edge1.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                candidate_move_edge__edge1.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                // Implicit Target move_node_tgt from move_edge__edge1 
                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_move_node_tgt = candidate_move_edge__edge1.lgspTarget;
                                                                                                                                                if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_move_node_tgt.lgspType.TypeID]) {
                                                                                                                                                    candidate_move_edge__edge1.lgspFlags = candidate_move_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge__edge1;
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if(candidate_move_edge__edge2.lgspTarget != candidate_move_node_tgt) {
                                                                                                                                                    candidate_move_edge__edge1.lgspFlags = candidate_move_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge__edge1;
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                if((candidate_move_node_tgt.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                {
                                                                                                                                                    candidate_move_edge__edge1.lgspFlags = candidate_move_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge__edge1;
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                uint prev__candidate_move_node_tgt;
                                                                                                                                                prev__candidate_move_node_tgt = candidate_move_node_tgt.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                candidate_move_node_tgt.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                // Extend Outgoing move_edge__edge3 from move_node_v2_p0 
                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_move_edge__edge3 = candidate_move_node_v2_p0.lgspOuthead;
                                                                                                                                                if(head_candidate_move_edge__edge3 != null)
                                                                                                                                                {
                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_move_edge__edge3 = head_candidate_move_edge__edge3;
                                                                                                                                                    do
                                                                                                                                                    {
                                                                                                                                                        if(candidate_move_edge__edge3.lgspType.TypeID!=7) {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if((candidate_move_edge__edge3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        uint prev__candidate_move_edge__edge3;
                                                                                                                                                        prev__candidate_move_edge__edge3 = candidate_move_edge__edge3.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                        candidate_move_edge__edge3.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                        // Implicit Target move_node_n_id from move_edge__edge3 
                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_move_node_n_id = candidate_move_edge__edge3.lgspTarget;
                                                                                                                                                        if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_move_node_n_id.lgspType.TypeID]) {
                                                                                                                                                            candidate_move_edge__edge3.lgspFlags = candidate_move_edge__edge3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge__edge3;
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        if((candidate_move_node_n_id.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                        {
                                                                                                                                                            candidate_move_edge__edge3.lgspFlags = candidate_move_edge__edge3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge__edge3;
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        uint prev__candidate_move_node_n_id;
                                                                                                                                                        prev__candidate_move_node_n_id = candidate_move_node_n_id.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                        candidate_move_node_n_id.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                        // Extend Outgoing move_edge__edge4 from move_node_v4_p0 
                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_move_edge__edge4 = candidate_move_node_v4_p0.lgspOuthead;
                                                                                                                                                        if(head_candidate_move_edge__edge4 != null)
                                                                                                                                                        {
                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_move_edge__edge4 = head_candidate_move_edge__edge4;
                                                                                                                                                            do
                                                                                                                                                            {
                                                                                                                                                                if(candidate_move_edge__edge4.lgspType.TypeID!=7) {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if(candidate_move_edge__edge4.lgspTarget != candidate_move_node_n_id) {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                if((candidate_move_edge__edge4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                uint prev__candidate_move_edge__edge4;
                                                                                                                                                                prev__candidate_move_edge__edge4 = candidate_move_edge__edge4.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                candidate_move_edge__edge4.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                // Extend Incoming move_edge_c14 from move_node_v5 
                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_move_edge_c14 = candidate_move_node_v5.lgspInhead;
                                                                                                                                                                if(head_candidate_move_edge_c14 != null)
                                                                                                                                                                {
                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_move_edge_c14 = head_candidate_move_edge_c14;
                                                                                                                                                                    do
                                                                                                                                                                    {
                                                                                                                                                                        if(candidate_move_edge_c14.lgspType.TypeID!=3) {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if((candidate_move_edge_c14.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        uint prev__candidate_move_edge_c14;
                                                                                                                                                                        prev__candidate_move_edge_c14 = candidate_move_edge_c14.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                        candidate_move_edge_c14.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                        // Implicit Source move_node_v6 from move_edge_c14 
                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_move_node_v6 = candidate_move_edge_c14.lgspSource;
                                                                                                                                                                        if(candidate_move_node_v6.lgspType.TypeID!=35) {
                                                                                                                                                                            candidate_move_edge_c14.lgspFlags = candidate_move_edge_c14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c14;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        if((candidate_move_node_v6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                        {
                                                                                                                                                                            candidate_move_edge_c14.lgspFlags = candidate_move_edge_c14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c14;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        uint prev__candidate_move_node_v6;
                                                                                                                                                                        prev__candidate_move_node_v6 = candidate_move_node_v6.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                        candidate_move_node_v6.lgspFlags |= (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace;
                                                                                                                                                                        // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat0_40 assigned from expression 0 
                                                                                                                                                                        System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat0_40 = (System.Int32)0;
                                                                                                                                                                        // Element nac_NodesWithoutSites_node_src_inlined_pat0_40 assigned from other element move_node_v6 
                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat0_40 = candidate_move_node_v6;
                                                                                                                                                                        if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat0_40.lgspType.TypeID]) {
                                                                                                                                                                            candidate_move_node_v6.lgspFlags = candidate_move_node_v6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v6;
                                                                                                                                                                            candidate_move_edge_c14.lgspFlags = candidate_move_edge_c14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c14;
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        // NegativePattern 
                                                                                                                                                                        {
                                                                                                                                                                            ++isoSpace;
                                                                                                                                                                            // Condition 
                                                                                                                                                                            if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat0_40, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat0_40))) {
                                                                                                                                                                                --isoSpace;
                                                                                                                                                                                goto label91;
                                                                                                                                                                            }
                                                                                                                                                                            // negative pattern found
                                                                                                                                                                            --isoSpace;
                                                                                                                                                                            candidate_move_node_v6.lgspFlags = candidate_move_node_v6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v6;
                                                                                                                                                                            candidate_move_edge_c14.lgspFlags = candidate_move_edge_c14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c14;
                                                                                                                                                                            goto label92;
                                                                                                                                                                            --isoSpace;
                                                                                                                                                                        }
label91: ;
                                                                                                                                                                        // Extend Incoming move_edge_c15 from move_node_v7 
                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_move_edge_c15 = candidate_move_node_v7.lgspInhead;
                                                                                                                                                                        if(head_candidate_move_edge_c15 != null)
                                                                                                                                                                        {
                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_move_edge_c15 = head_candidate_move_edge_c15;
                                                                                                                                                                            do
                                                                                                                                                                            {
                                                                                                                                                                                if(candidate_move_edge_c15.lgspType.TypeID!=3) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if((candidate_move_edge_c15.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                // Implicit Source move_node_v8 from move_edge_c15 
                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_move_node_v8 = candidate_move_edge_c15.lgspSource;
                                                                                                                                                                                if(candidate_move_node_v8.lgspType.TypeID!=37) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                if((candidate_move_node_v8.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                // Variable nac_NodesWithoutSites_var_validChildCount_inlined_pat1_41 assigned from expression 0 
                                                                                                                                                                                System.Int32 var_nac_NodesWithoutSites_var_validChildCount_inlined_pat1_41 = (System.Int32)0;
                                                                                                                                                                                // Element nac_NodesWithoutSites_node_src_inlined_pat1_41 assigned from other element move_node_v8 
                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_nac_NodesWithoutSites_node_src_inlined_pat1_41 = candidate_move_node_v8;
                                                                                                                                                                                if(!GRGEN_MODEL.NodeType_BNode.isMyType[candidate_nac_NodesWithoutSites_node_src_inlined_pat1_41.lgspType.TypeID]) {
                                                                                                                                                                                    continue;
                                                                                                                                                                                }
                                                                                                                                                                                // NegativePattern 
                                                                                                                                                                                {
                                                                                                                                                                                    ++isoSpace;
                                                                                                                                                                                    // Condition 
                                                                                                                                                                                    if(!(((GRGEN_LIBGR.GraphHelper.AdjacentIncoming((GRGEN_LIBGR.INode)candidate_nac_NodesWithoutSites_node_src_inlined_pat1_41, GRGEN_MODEL.EdgeType_bPrnt.typeVar, GRGEN_MODEL.NodeType_Node.typeVar)).Count != var_nac_NodesWithoutSites_var_validChildCount_inlined_pat1_41))) {
                                                                                                                                                                                        --isoSpace;
                                                                                                                                                                                        goto label93;
                                                                                                                                                                                    }
                                                                                                                                                                                    // negative pattern found
                                                                                                                                                                                    --isoSpace;
                                                                                                                                                                                    goto label94;
                                                                                                                                                                                    --isoSpace;
                                                                                                                                                                                }
label93: ;
                                                                                                                                                                                // Extend Incoming move_edge_c16 from move_node_v6 
                                                                                                                                                                                GRGEN_LGSP.LGSPEdge head_candidate_move_edge_c16 = candidate_move_node_v6.lgspInhead;
                                                                                                                                                                                if(head_candidate_move_edge_c16 != null)
                                                                                                                                                                                {
                                                                                                                                                                                    GRGEN_LGSP.LGSPEdge candidate_move_edge_c16 = head_candidate_move_edge_c16;
                                                                                                                                                                                    do
                                                                                                                                                                                    {
                                                                                                                                                                                        if(candidate_move_edge_c16.lgspType.TypeID!=5) {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        if((candidate_move_edge_c16.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                        {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        // Implicit Source move_node_v6_p0 from move_edge_c16 
                                                                                                                                                                                        GRGEN_LGSP.LGSPNode candidate_move_node_v6_p0 = candidate_move_edge_c16.lgspSource;
                                                                                                                                                                                        if(candidate_move_node_v6_p0.lgspType.TypeID!=7) {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        if((candidate_move_node_v6_p0.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                        {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        // Condition 
                                                                                                                                                                                        if(!((((GRGEN_MODEL.IBPort)candidate_move_node_v6_p0).@ix == 0))) {
                                                                                                                                                                                            continue;
                                                                                                                                                                                        }
                                                                                                                                                                                        // Extend Outgoing move_edge__edge5 from move_node_v6_p0 
                                                                                                                                                                                        GRGEN_LGSP.LGSPEdge head_candidate_move_edge__edge5 = candidate_move_node_v6_p0.lgspOuthead;
                                                                                                                                                                                        if(head_candidate_move_edge__edge5 != null)
                                                                                                                                                                                        {
                                                                                                                                                                                            GRGEN_LGSP.LGSPEdge candidate_move_edge__edge5 = head_candidate_move_edge__edge5;
                                                                                                                                                                                            do
                                                                                                                                                                                            {
                                                                                                                                                                                                if(candidate_move_edge__edge5.lgspType.TypeID!=7) {
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                if((candidate_move_edge__edge5.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                {
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                // Implicit Target move_node_ref from move_edge__edge5 
                                                                                                                                                                                                GRGEN_LGSP.LGSPNode candidate_move_node_ref = candidate_move_edge__edge5.lgspTarget;
                                                                                                                                                                                                if(!GRGEN_MODEL.NodeType_BLink.isMyType[candidate_move_node_ref.lgspType.TypeID]) {
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                if((candidate_move_node_ref.lgspFlags & (uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) != 0)
                                                                                                                                                                                                {
                                                                                                                                                                                                    continue;
                                                                                                                                                                                                }
                                                                                                                                                                                                Rule_move.Match_move match = matches.GetNextUnfilledPosition();
                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat0 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                match_pat0.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat1 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                match_pat1.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat2 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                match_pat2.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat3 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                match_pat3.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat4 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                match_pat4.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat5 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                match_pat5.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites match_pat6 = new Pattern_nac_NodesWithoutSites.Match_nac_NodesWithoutSites();
                                                                                                                                                                                                match_pat6.SetMatchOfEnclosingPattern(match);
                                                                                                                                                                                                match._node_v0 = candidate_move_node_v0;
                                                                                                                                                                                                match._node_r0 = candidate_move_node_r0;
                                                                                                                                                                                                match._node_v9 = candidate_move_node_v9;
                                                                                                                                                                                                match._node_v0_p0 = candidate_move_node_v0_p0;
                                                                                                                                                                                                match._node_v1 = candidate_move_node_v1;
                                                                                                                                                                                                match._node_v3 = candidate_move_node_v3;
                                                                                                                                                                                                match._node_v9_p0 = candidate_move_node_v9_p0;
                                                                                                                                                                                                match._node_v10 = candidate_move_node_v10;
                                                                                                                                                                                                match._node_v1_p0 = candidate_move_node_v1_p0;
                                                                                                                                                                                                match._node_v2 = candidate_move_node_v2;
                                                                                                                                                                                                match._node_v4 = candidate_move_node_v4;
                                                                                                                                                                                                match._node_v2_p0 = candidate_move_node_v2_p0;
                                                                                                                                                                                                match._node_v4_p0 = candidate_move_node_v4_p0;
                                                                                                                                                                                                match._node_v5 = candidate_move_node_v5;
                                                                                                                                                                                                match._node_v7 = candidate_move_node_v7;
                                                                                                                                                                                                match._node_v6 = candidate_move_node_v6;
                                                                                                                                                                                                match._node_v8 = candidate_move_node_v8;
                                                                                                                                                                                                match._node_v6_p0 = candidate_move_node_v6_p0;
                                                                                                                                                                                                match._node_src = candidate_move_node_src;
                                                                                                                                                                                                match._node_tgt = candidate_move_node_tgt;
                                                                                                                                                                                                match._node_n_id = candidate_move_node_n_id;
                                                                                                                                                                                                match._node_ref = candidate_move_node_ref;
                                                                                                                                                                                                match_pat0._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat0_40;
                                                                                                                                                                                                match_pat1._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat1_41;
                                                                                                                                                                                                match_pat2._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat2_42;
                                                                                                                                                                                                match_pat3._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat3_43;
                                                                                                                                                                                                match_pat4._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat4_44;
                                                                                                                                                                                                match_pat5._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat5_45;
                                                                                                                                                                                                match_pat6._node_src = candidate_nac_NodesWithoutSites_node_src_inlined_pat6_46;
                                                                                                                                                                                                match._edge_c0 = candidate_move_edge_c0;
                                                                                                                                                                                                match._edge_c1 = candidate_move_edge_c1;
                                                                                                                                                                                                match._edge_c2 = candidate_move_edge_c2;
                                                                                                                                                                                                match._edge_c3 = candidate_move_edge_c3;
                                                                                                                                                                                                match._edge_c4 = candidate_move_edge_c4;
                                                                                                                                                                                                match._edge_c5 = candidate_move_edge_c5;
                                                                                                                                                                                                match._edge_c6 = candidate_move_edge_c6;
                                                                                                                                                                                                match._edge_c7 = candidate_move_edge_c7;
                                                                                                                                                                                                match._edge_c8 = candidate_move_edge_c8;
                                                                                                                                                                                                match._edge_c9 = candidate_move_edge_c9;
                                                                                                                                                                                                match._edge_c10 = candidate_move_edge_c10;
                                                                                                                                                                                                match._edge_c11 = candidate_move_edge_c11;
                                                                                                                                                                                                match._edge_c12 = candidate_move_edge_c12;
                                                                                                                                                                                                match._edge_c13 = candidate_move_edge_c13;
                                                                                                                                                                                                match._edge_c14 = candidate_move_edge_c14;
                                                                                                                                                                                                match._edge_c15 = candidate_move_edge_c15;
                                                                                                                                                                                                match._edge_c16 = candidate_move_edge_c16;
                                                                                                                                                                                                match._edge__edge0 = candidate_move_edge__edge0;
                                                                                                                                                                                                match._edge__edge1 = candidate_move_edge__edge1;
                                                                                                                                                                                                match._edge__edge2 = candidate_move_edge__edge2;
                                                                                                                                                                                                match._edge__edge3 = candidate_move_edge__edge3;
                                                                                                                                                                                                match._edge__edge4 = candidate_move_edge__edge4;
                                                                                                                                                                                                match._edge__edge5 = candidate_move_edge__edge5;
                                                                                                                                                                                                match_pat0._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat0_40;
                                                                                                                                                                                                match_pat1._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat1_41;
                                                                                                                                                                                                match_pat2._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat2_42;
                                                                                                                                                                                                match_pat3._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat3_43;
                                                                                                                                                                                                match_pat4._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat4_44;
                                                                                                                                                                                                match_pat5._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat5_45;
                                                                                                                                                                                                match_pat6._var_validChildCount = var_nac_NodesWithoutSites_var_validChildCount_inlined_pat6_46;
                                                                                                                                                                                                match._pat0 = match_pat0;
                                                                                                                                                                                                match._pat1 = match_pat1;
                                                                                                                                                                                                match._pat2 = match_pat2;
                                                                                                                                                                                                match._pat3 = match_pat3;
                                                                                                                                                                                                match._pat4 = match_pat4;
                                                                                                                                                                                                match._pat5 = match_pat5;
                                                                                                                                                                                                match._pat6 = match_pat6;
                                                                                                                                                                                                matches.PositionWasFilledFixIt();
                                                                                                                                                                                                // if enough matches were found, we leave
                                                                                                                                                                                                if(maxMatches > 0 && matches.Count >= maxMatches)
                                                                                                                                                                                                {
                                                                                                                                                                                                    candidate_move_node_v6_p0.MoveOutHeadAfter(candidate_move_edge__edge5);
                                                                                                                                                                                                    candidate_move_node_v6.MoveInHeadAfter(candidate_move_edge_c16);
                                                                                                                                                                                                    candidate_move_node_v7.MoveInHeadAfter(candidate_move_edge_c15);
                                                                                                                                                                                                    candidate_move_node_v5.MoveInHeadAfter(candidate_move_edge_c14);
                                                                                                                                                                                                    candidate_move_node_v4_p0.MoveOutHeadAfter(candidate_move_edge__edge4);
                                                                                                                                                                                                    candidate_move_node_v2_p0.MoveOutHeadAfter(candidate_move_edge__edge3);
                                                                                                                                                                                                    candidate_move_node_v9_p0.MoveOutHeadAfter(candidate_move_edge__edge1);
                                                                                                                                                                                                    candidate_move_node_v4.MoveInHeadAfter(candidate_move_edge_c13);
                                                                                                                                                                                                    candidate_move_node_v4.MoveInHeadAfter(candidate_move_edge_c12);
                                                                                                                                                                                                    candidate_move_node_v4.MoveInHeadAfter(candidate_move_edge_c11);
                                                                                                                                                                                                    candidate_move_node_v2.MoveInHeadAfter(candidate_move_edge_c10);
                                                                                                                                                                                                    candidate_move_node_v1_p0.MoveOutHeadAfter(candidate_move_edge__edge2);
                                                                                                                                                                                                    candidate_move_node_v9.MoveInHeadAfter(candidate_move_edge_c6);
                                                                                                                                                                                                    candidate_move_node_v9.MoveInHeadAfter(candidate_move_edge_c5);
                                                                                                                                                                                                    candidate_move_node_v3.MoveInHeadAfter(candidate_move_edge_c9);
                                                                                                                                                                                                    candidate_move_node_v1.MoveInHeadAfter(candidate_move_edge_c8);
                                                                                                                                                                                                    candidate_move_node_v1.MoveInHeadAfter(candidate_move_edge_c7);
                                                                                                                                                                                                    candidate_move_node_v0_p0.MoveOutHeadAfter(candidate_move_edge__edge0);
                                                                                                                                                                                                    candidate_move_node_r0.MoveInHeadAfter(candidate_move_edge_c1);
                                                                                                                                                                                                    candidate_move_node_v0.MoveInHeadAfter(candidate_move_edge_c4);
                                                                                                                                                                                                    candidate_move_node_v0.MoveInHeadAfter(candidate_move_edge_c3);
                                                                                                                                                                                                    candidate_move_node_v0.MoveInHeadAfter(candidate_move_edge_c2);
                                                                                                                                                                                                    graph.MoveHeadAfter(candidate_move_edge_c0);
                                                                                                                                                                                                    candidate_move_node_v6.lgspFlags = candidate_move_node_v6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v6;
                                                                                                                                                                                                    candidate_move_edge_c14.lgspFlags = candidate_move_edge_c14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c14;
                                                                                                                                                                                                    candidate_move_edge__edge4.lgspFlags = candidate_move_edge__edge4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge__edge4;
                                                                                                                                                                                                    candidate_move_node_n_id.lgspFlags = candidate_move_node_n_id.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_n_id;
                                                                                                                                                                                                    candidate_move_edge__edge3.lgspFlags = candidate_move_edge__edge3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge__edge3;
                                                                                                                                                                                                    candidate_move_node_tgt.lgspFlags = candidate_move_node_tgt.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_tgt;
                                                                                                                                                                                                    candidate_move_edge__edge1.lgspFlags = candidate_move_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge__edge1;
                                                                                                                                                                                                    candidate_move_node_v7.lgspFlags = candidate_move_node_v7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v7;
                                                                                                                                                                                                    candidate_move_edge_c13.lgspFlags = candidate_move_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c13;
                                                                                                                                                                                                    candidate_move_node_v5.lgspFlags = candidate_move_node_v5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v5;
                                                                                                                                                                                                    candidate_move_edge_c12.lgspFlags = candidate_move_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c12;
                                                                                                                                                                                                    candidate_move_node_v4_p0.lgspFlags = candidate_move_node_v4_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v4_p0;
                                                                                                                                                                                                    candidate_move_edge_c11.lgspFlags = candidate_move_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c11;
                                                                                                                                                                                                    candidate_move_node_v2_p0.lgspFlags = candidate_move_node_v2_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v2_p0;
                                                                                                                                                                                                    candidate_move_edge_c10.lgspFlags = candidate_move_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c10;
                                                                                                                                                                                                    candidate_move_edge__edge2.lgspFlags = candidate_move_edge__edge2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge__edge2;
                                                                                                                                                                                                    candidate_move_node_v10.lgspFlags = candidate_move_node_v10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v10;
                                                                                                                                                                                                    candidate_move_edge_c6.lgspFlags = candidate_move_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c6;
                                                                                                                                                                                                    candidate_move_node_v9_p0.lgspFlags = candidate_move_node_v9_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v9_p0;
                                                                                                                                                                                                    candidate_move_edge_c5.lgspFlags = candidate_move_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c5;
                                                                                                                                                                                                    candidate_move_node_v4.lgspFlags = candidate_move_node_v4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v4;
                                                                                                                                                                                                    candidate_move_edge_c9.lgspFlags = candidate_move_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c9;
                                                                                                                                                                                                    candidate_move_node_v2.lgspFlags = candidate_move_node_v2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v2;
                                                                                                                                                                                                    candidate_move_edge_c8.lgspFlags = candidate_move_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c8;
                                                                                                                                                                                                    candidate_move_node_v1_p0.lgspFlags = candidate_move_node_v1_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v1_p0;
                                                                                                                                                                                                    candidate_move_edge_c7.lgspFlags = candidate_move_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c7;
                                                                                                                                                                                                    candidate_move_node_src.lgspFlags = candidate_move_node_src.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_src;
                                                                                                                                                                                                    candidate_move_edge__edge0.lgspFlags = candidate_move_edge__edge0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge__edge0;
                                                                                                                                                                                                    candidate_move_node_v9.lgspFlags = candidate_move_node_v9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v9;
                                                                                                                                                                                                    candidate_move_edge_c1.lgspFlags = candidate_move_edge_c1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c1;
                                                                                                                                                                                                    candidate_move_node_v3.lgspFlags = candidate_move_node_v3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v3;
                                                                                                                                                                                                    candidate_move_edge_c4.lgspFlags = candidate_move_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c4;
                                                                                                                                                                                                    candidate_move_node_v1.lgspFlags = candidate_move_node_v1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v1;
                                                                                                                                                                                                    candidate_move_edge_c3.lgspFlags = candidate_move_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c3;
                                                                                                                                                                                                    candidate_move_node_v0_p0.lgspFlags = candidate_move_node_v0_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v0_p0;
                                                                                                                                                                                                    candidate_move_edge_c2.lgspFlags = candidate_move_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c2;
                                                                                                                                                                                                    candidate_move_node_r0.lgspFlags = candidate_move_node_r0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_r0;
                                                                                                                                                                                                    candidate_move_node_v0.lgspFlags = candidate_move_node_v0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v0;
                                                                                                                                                                                                    candidate_move_edge_c0.lgspFlags = candidate_move_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c0;
                                                                                                                                                                                                    return matches;
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                            while( (candidate_move_edge__edge5 = candidate_move_edge__edge5.lgspOutNext) != head_candidate_move_edge__edge5 );
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    while( (candidate_move_edge_c16 = candidate_move_edge_c16.lgspInNext) != head_candidate_move_edge_c16 );
                                                                                                                                                                                }
label94: ;
                                                                                                                                                                            }
                                                                                                                                                                            while( (candidate_move_edge_c15 = candidate_move_edge_c15.lgspInNext) != head_candidate_move_edge_c15 );
                                                                                                                                                                        }
                                                                                                                                                                        candidate_move_node_v6.lgspFlags = candidate_move_node_v6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v6;
                                                                                                                                                                        candidate_move_edge_c14.lgspFlags = candidate_move_edge_c14.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c14;
label92: ;
                                                                                                                                                                    }
                                                                                                                                                                    while( (candidate_move_edge_c14 = candidate_move_edge_c14.lgspInNext) != head_candidate_move_edge_c14 );
                                                                                                                                                                }
                                                                                                                                                                candidate_move_edge__edge4.lgspFlags = candidate_move_edge__edge4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge__edge4;
                                                                                                                                                            }
                                                                                                                                                            while( (candidate_move_edge__edge4 = candidate_move_edge__edge4.lgspOutNext) != head_candidate_move_edge__edge4 );
                                                                                                                                                        }
                                                                                                                                                        candidate_move_node_n_id.lgspFlags = candidate_move_node_n_id.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_n_id;
                                                                                                                                                        candidate_move_edge__edge3.lgspFlags = candidate_move_edge__edge3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge__edge3;
                                                                                                                                                    }
                                                                                                                                                    while( (candidate_move_edge__edge3 = candidate_move_edge__edge3.lgspOutNext) != head_candidate_move_edge__edge3 );
                                                                                                                                                }
                                                                                                                                                candidate_move_node_tgt.lgspFlags = candidate_move_node_tgt.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_tgt;
                                                                                                                                                candidate_move_edge__edge1.lgspFlags = candidate_move_edge__edge1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge__edge1;
                                                                                                                                            }
                                                                                                                                            while( (candidate_move_edge__edge1 = candidate_move_edge__edge1.lgspOutNext) != head_candidate_move_edge__edge1 );
                                                                                                                                        }
                                                                                                                                        candidate_move_node_v7.lgspFlags = candidate_move_node_v7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v7;
                                                                                                                                        candidate_move_edge_c13.lgspFlags = candidate_move_edge_c13.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c13;
                                                                                                                                    }
                                                                                                                                    while( (candidate_move_edge_c13 = candidate_move_edge_c13.lgspInNext) != head_candidate_move_edge_c13 );
                                                                                                                                }
                                                                                                                                candidate_move_node_v5.lgspFlags = candidate_move_node_v5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v5;
                                                                                                                                candidate_move_edge_c12.lgspFlags = candidate_move_edge_c12.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c12;
label90: ;
                                                                                                                            }
                                                                                                                            while( (candidate_move_edge_c12 = candidate_move_edge_c12.lgspInNext) != head_candidate_move_edge_c12 );
                                                                                                                        }
                                                                                                                        candidate_move_node_v4_p0.lgspFlags = candidate_move_node_v4_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v4_p0;
                                                                                                                        candidate_move_edge_c11.lgspFlags = candidate_move_edge_c11.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c11;
                                                                                                                    }
                                                                                                                    while( (candidate_move_edge_c11 = candidate_move_edge_c11.lgspInNext) != head_candidate_move_edge_c11 );
                                                                                                                }
                                                                                                                candidate_move_node_v2_p0.lgspFlags = candidate_move_node_v2_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v2_p0;
                                                                                                                candidate_move_edge_c10.lgspFlags = candidate_move_edge_c10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c10;
                                                                                                            }
                                                                                                            while( (candidate_move_edge_c10 = candidate_move_edge_c10.lgspInNext) != head_candidate_move_edge_c10 );
                                                                                                        }
                                                                                                        candidate_move_edge__edge2.lgspFlags = candidate_move_edge__edge2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge__edge2;
                                                                                                    }
                                                                                                    while( (candidate_move_edge__edge2 = candidate_move_edge__edge2.lgspOutNext) != head_candidate_move_edge__edge2 );
                                                                                                }
                                                                                                candidate_move_node_v10.lgspFlags = candidate_move_node_v10.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v10;
                                                                                                candidate_move_edge_c6.lgspFlags = candidate_move_edge_c6.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c6;
label88: ;
                                                                                            }
                                                                                            while( (candidate_move_edge_c6 = candidate_move_edge_c6.lgspInNext) != head_candidate_move_edge_c6 );
                                                                                        }
                                                                                        candidate_move_node_v9_p0.lgspFlags = candidate_move_node_v9_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v9_p0;
                                                                                        candidate_move_edge_c5.lgspFlags = candidate_move_edge_c5.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c5;
                                                                                    }
                                                                                    while( (candidate_move_edge_c5 = candidate_move_edge_c5.lgspInNext) != head_candidate_move_edge_c5 );
                                                                                }
                                                                                candidate_move_node_v4.lgspFlags = candidate_move_node_v4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v4;
                                                                                candidate_move_edge_c9.lgspFlags = candidate_move_edge_c9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c9;
                                                                            }
                                                                            while( (candidate_move_edge_c9 = candidate_move_edge_c9.lgspInNext) != head_candidate_move_edge_c9 );
                                                                        }
                                                                        candidate_move_node_v2.lgspFlags = candidate_move_node_v2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v2;
                                                                        candidate_move_edge_c8.lgspFlags = candidate_move_edge_c8.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c8;
label86: ;
                                                                    }
                                                                    while( (candidate_move_edge_c8 = candidate_move_edge_c8.lgspInNext) != head_candidate_move_edge_c8 );
                                                                }
                                                                candidate_move_node_v1_p0.lgspFlags = candidate_move_node_v1_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v1_p0;
                                                                candidate_move_edge_c7.lgspFlags = candidate_move_edge_c7.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c7;
                                                            }
                                                            while( (candidate_move_edge_c7 = candidate_move_edge_c7.lgspInNext) != head_candidate_move_edge_c7 );
                                                        }
                                                        candidate_move_node_src.lgspFlags = candidate_move_node_src.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_src;
                                                        candidate_move_edge__edge0.lgspFlags = candidate_move_edge__edge0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge__edge0;
                                                    }
                                                    while( (candidate_move_edge__edge0 = candidate_move_edge__edge0.lgspOutNext) != head_candidate_move_edge__edge0 );
                                                }
                                                candidate_move_node_v9.lgspFlags = candidate_move_node_v9.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v9;
                                                candidate_move_edge_c1.lgspFlags = candidate_move_edge_c1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c1;
                                            }
                                            while( (candidate_move_edge_c1 = candidate_move_edge_c1.lgspInNext) != head_candidate_move_edge_c1 );
                                        }
                                        candidate_move_node_v3.lgspFlags = candidate_move_node_v3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v3;
                                        candidate_move_edge_c4.lgspFlags = candidate_move_edge_c4.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c4;
label84: ;
                                    }
                                    while( (candidate_move_edge_c4 = candidate_move_edge_c4.lgspInNext) != head_candidate_move_edge_c4 );
                                }
                                candidate_move_node_v1.lgspFlags = candidate_move_node_v1.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v1;
                                candidate_move_edge_c3.lgspFlags = candidate_move_edge_c3.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c3;
label82: ;
                            }
                            while( (candidate_move_edge_c3 = candidate_move_edge_c3.lgspInNext) != head_candidate_move_edge_c3 );
                        }
                        candidate_move_node_v0_p0.lgspFlags = candidate_move_node_v0_p0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v0_p0;
                        candidate_move_edge_c2.lgspFlags = candidate_move_edge_c2.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c2;
                    }
                    while( (candidate_move_edge_c2 = candidate_move_edge_c2.lgspInNext) != head_candidate_move_edge_c2 );
                }
                candidate_move_node_r0.lgspFlags = candidate_move_node_r0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_r0;
                candidate_move_node_v0.lgspFlags = candidate_move_node_v0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_node_v0;
                candidate_move_edge_c0.lgspFlags = candidate_move_edge_c0.lgspFlags & ~((uint)GRGEN_LGSP.LGSPElemFlags.IS_MATCHED << isoSpace) | prev__candidate_move_edge_c0;
            }
            return matches;
        }
        /// <summary> Type of the matcher method (with parameters processing environment containing host graph, maximum number of matches to search for (zero=unlimited), and rule parameters; returning found matches). </summary>
        public delegate GRGEN_LIBGR.IMatchesExact<Rule_move.IMatch_move> MatchInvoker(GRGEN_LGSP.LGSPActionExecutionEnvironment actionEnv, int maxMatches);
        /// <summary> A delegate pointing to the current matcher program for this rule. </summary>
        public MatchInvoker DynamicMatch;
        /// <summary> The RulePattern object from which this LGSPAction object has been created. </summary>
        public GRGEN_LIBGR.IRulePattern RulePattern { get { return _rulePattern; } }
        public GRGEN_LIBGR.IMatchesExact<Rule_move.IMatch_move> Match(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int maxMatches)
        {
            return DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, maxMatches);
        }
        public void Modify(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, Rule_move.IMatch_move match)
        {
            _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, match);
        }
        public void ModifyAll(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatchesExact<Rule_move.IMatch_move> matches)
        {
            foreach(Rule_move.IMatch_move match in matches)
            {
                
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, match);
            }
        }
        public bool Apply(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_move.IMatch_move> matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
            if(matches.Count <= 0) return false;
            _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, matches.First);
            return true;
        }
        public int ApplyAll(int maxMatches, GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_move.IMatch_move> matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, maxMatches);
            if(matches.Count <= 0) return 0;
            foreach(Rule_move.IMatch_move match in matches)
            {
                
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, match);
            }
            return matches.Count;
        }
        public bool ApplyStar(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_move.IMatch_move> matches;
            
            while(true)
            {
                matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
                if(matches.Count <= 0) return true;
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, matches.First);
            }
        }
        public bool ApplyPlus(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_move.IMatch_move> matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
            if(matches.Count <= 0) return false;
            
            do
            {
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, matches.First);
                matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
            }
            while(matches.Count > 0) ;
            return true;
        }
        public bool ApplyMinMax(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int min, int max)
        {
            GRGEN_LIBGR.IMatchesExact<Rule_move.IMatch_move> matches;
            
            for(int i = 0; i < max; i++)
            {
                matches = DynamicMatch((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, 1);
                if(matches.Count <= 0) return i >= min;
                _rulePattern.Modify((GRGEN_LGSP.LGSPActionExecutionEnvironment)actionEnv, matches.First);
            }
            return true;
        }
        // implementation of inexact action interface by delegation to exact action interface
        public GRGEN_LIBGR.IMatches Match(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int maxMatches, object[] parameters)
        {
            return Match(actionEnv, maxMatches);
        }
        public object[] Modify(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatch match)
        {
            
            Modify(actionEnv, (Rule_move.IMatch_move)match);
            return ReturnArray;
        }
        public List<object[]> ModifyAll(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatches matches)
        {
            ModifyAll(actionEnv, (GRGEN_LIBGR.IMatchesExact<Rule_move.IMatch_move>)matches);
            while(AvailableReturnArrays.Count < matches.Count) AvailableReturnArrays.Add(new object[0]);
            ReturnArrayListForAll.Clear();
            for(int i=0; i<matches.Count; ++i)
            {
                ReturnArrayListForAll.Add(AvailableReturnArrays[i]);
            }
            return ReturnArrayListForAll;
        }
        object[] GRGEN_LIBGR.IAction.Apply(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            
            if(Apply(actionEnv)) {
                return ReturnArray;
            }
            else return null;
        }
        object[] GRGEN_LIBGR.IAction.Apply(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, params object[] parameters)
        {
            
            if(Apply(actionEnv)) {
                return ReturnArray;
            }
            else return null;
        }
        public List<object[]> Reserve(int numReturns)
        {
            if(AvailableReturnArrays == null)
                AvailableReturnArrays = new List<object[]>();
            while(AvailableReturnArrays.Count < numReturns) AvailableReturnArrays.Add(new object[0]);
            if(ReturnArrayListForAll == null)
                ReturnArrayListForAll = new List<object[]>();
            ReturnArrayListForAll.Clear();
            for(int i=0; i<numReturns; ++i)
            {
                ReturnArrayListForAll.Add(AvailableReturnArrays[i]);
            }
            return ReturnArrayListForAll;
        }
        List<object[]> GRGEN_LIBGR.IAction.ApplyAll(int maxMatches, GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            int matchesCount = ApplyAll(maxMatches, actionEnv);
            while(AvailableReturnArrays.Count < matchesCount) AvailableReturnArrays.Add(new object[0]);
            ReturnArrayListForAll.Clear();
            for(int i=0; i<matchesCount; ++i)
            {
                ReturnArrayListForAll.Add(AvailableReturnArrays[i]);
            }
            return ReturnArrayListForAll;
        }
        List<object[]> GRGEN_LIBGR.IAction.ApplyAll(int maxMatches, GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, params object[] parameters)
        {
            int matchesCount = ApplyAll(maxMatches, actionEnv);
            while(AvailableReturnArrays.Count < matchesCount) AvailableReturnArrays.Add(new object[0]);
            ReturnArrayListForAll.Clear();
            for(int i=0; i<matchesCount; ++i)
            {
                ReturnArrayListForAll.Add(AvailableReturnArrays[i]);
            }
            return ReturnArrayListForAll;
        }
        bool GRGEN_LIBGR.IAction.ApplyStar(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            return ApplyStar(actionEnv);
        }
        bool GRGEN_LIBGR.IAction.ApplyStar(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, params object[] parameters)
        {
            return ApplyStar(actionEnv);
        }
        bool GRGEN_LIBGR.IAction.ApplyPlus(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv)
        {
            return ApplyPlus(actionEnv);
        }
        bool GRGEN_LIBGR.IAction.ApplyPlus(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, params object[] parameters)
        {
            return ApplyPlus(actionEnv);
        }
        bool GRGEN_LIBGR.IAction.ApplyMinMax(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int min, int max)
        {
            return ApplyMinMax(actionEnv, min, max);
        }
        bool GRGEN_LIBGR.IAction.ApplyMinMax(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, int min, int max, params object[] parameters)
        {
            return ApplyMinMax(actionEnv, min, max);
        }
        public void Filter(GRGEN_LIBGR.IActionExecutionEnvironment actionEnv, GRGEN_LIBGR.IMatches matches, GRGEN_LIBGR.FilterCallWithArguments filter)
        {
            switch(filter.PackagePrefixedName) {
                case "keepFirst": matches.Filter_keepFirst((System.Int32)(filter.Arguments[0])); break;
                case "keepLast": matches.Filter_keepLast((System.Int32)(filter.Arguments[0])); break;
                case "keepFirstFraction": matches.Filter_keepFirstFraction((System.Double)(filter.Arguments[0])); break;
                case "keepLastFraction": matches.Filter_keepLastFraction((System.Double)(filter.Arguments[0])); break;
                case "removeFirst": matches.Filter_removeFirst((System.Int32)(filter.Arguments[0])); break;
                case "removeLast": matches.Filter_removeLast((System.Int32)(filter.Arguments[0])); break;
                case "removeFirstFraction": matches.Filter_removeFirstFraction((System.Double)(filter.Arguments[0])); break;
                case "removeLastFraction": matches.Filter_removeLastFraction((System.Double)(filter.Arguments[0])); break;
                default: throw new Exception("Unknown filter name " + filter.PackagePrefixedName + "!");
            }
        }
    }
    

    // class which instantiates and stores all the compiled actions of the module,
    // dynamic regeneration and compilation causes the old action to be overwritten by the new one
    // matching/rule patterns are analyzed at creation time here, once, so that later regeneration runs have all the information available
    public class rulesetActions : GRGEN_LGSP.LGSPActions
    {
        public rulesetActions(GRGEN_LGSP.LGSPGraph lgspgraph, string modelAsmName, string actionsAsmName)
            : base(lgspgraph, modelAsmName, actionsAsmName)
        {
            InitActions();
        }

        public rulesetActions(GRGEN_LGSP.LGSPGraph lgspgraph)
            : base(lgspgraph)
        {
            InitActions();
        }

        private void InitActions()
        {
            packages = new string[0];
            GRGEN_LGSP.PatternGraphAnalyzer analyzer = new GRGEN_LGSP.PatternGraphAnalyzer();
            analyzer.AnalyzeNestingOfPatternGraph(GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.patternGraph, false);
            GRGEN_LGSP.PatternGraphAnalyzer.PrepareInline(GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.patternGraph);
            analyzer.RememberMatchingPattern(GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance);
            analyzer.AnalyzeNestingOfPatternGraph(GRGEN_ACTIONS.Rule_es_0_1.Instance.patternGraph, false);
            GRGEN_LGSP.PatternGraphAnalyzer.PrepareInline(GRGEN_ACTIONS.Rule_es_0_1.Instance.patternGraph);
            analyzer.RememberMatchingPattern(GRGEN_ACTIONS.Rule_es_0_1.Instance);
            actions.Add("es_0_1", (GRGEN_LGSP.LGSPAction) GRGEN_ACTIONS.Action_es_0_1.Instance);
            @es_0_1 = GRGEN_ACTIONS.Action_es_0_1.Instance;
            analyzer.AnalyzeNestingOfPatternGraph(GRGEN_ACTIONS.Rule_ss_1_0.Instance.patternGraph, false);
            GRGEN_LGSP.PatternGraphAnalyzer.PrepareInline(GRGEN_ACTIONS.Rule_ss_1_0.Instance.patternGraph);
            analyzer.RememberMatchingPattern(GRGEN_ACTIONS.Rule_ss_1_0.Instance);
            actions.Add("ss_1_0", (GRGEN_LGSP.LGSPAction) GRGEN_ACTIONS.Action_ss_1_0.Instance);
            @ss_1_0 = GRGEN_ACTIONS.Action_ss_1_0.Instance;
            analyzer.AnalyzeNestingOfPatternGraph(GRGEN_ACTIONS.Rule_initMvmt.Instance.patternGraph, false);
            GRGEN_LGSP.PatternGraphAnalyzer.PrepareInline(GRGEN_ACTIONS.Rule_initMvmt.Instance.patternGraph);
            analyzer.RememberMatchingPattern(GRGEN_ACTIONS.Rule_initMvmt.Instance);
            actions.Add("initMvmt", (GRGEN_LGSP.LGSPAction) GRGEN_ACTIONS.Action_initMvmt.Instance);
            @initMvmt = GRGEN_ACTIONS.Action_initMvmt.Instance;
            analyzer.AnalyzeNestingOfPatternGraph(GRGEN_ACTIONS.Rule_move.Instance.patternGraph, false);
            GRGEN_LGSP.PatternGraphAnalyzer.PrepareInline(GRGEN_ACTIONS.Rule_move.Instance.patternGraph);
            analyzer.RememberMatchingPattern(GRGEN_ACTIONS.Rule_move.Instance);
            actions.Add("move", (GRGEN_LGSP.LGSPAction) GRGEN_ACTIONS.Action_move.Instance);
            @move = GRGEN_ACTIONS.Action_move.Instance;
            analyzer.ComputeInterPatternRelations(false);
            analyzer.AnalyzeWithInterPatternRelationsKnown(GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.patternGraph);
            analyzer.AnalyzeWithInterPatternRelationsKnown(GRGEN_ACTIONS.Rule_es_0_1.Instance.patternGraph);
            analyzer.AnalyzeWithInterPatternRelationsKnown(GRGEN_ACTIONS.Rule_ss_1_0.Instance.patternGraph);
            analyzer.AnalyzeWithInterPatternRelationsKnown(GRGEN_ACTIONS.Rule_initMvmt.Instance.patternGraph);
            analyzer.AnalyzeWithInterPatternRelationsKnown(GRGEN_ACTIONS.Rule_move.Instance.patternGraph);
            analyzer.InlineSubpatternUsages(GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.patternGraph);
            analyzer.InlineSubpatternUsages(GRGEN_ACTIONS.Rule_es_0_1.Instance.patternGraph);
            analyzer.InlineSubpatternUsages(GRGEN_ACTIONS.Rule_ss_1_0.Instance.patternGraph);
            analyzer.InlineSubpatternUsages(GRGEN_ACTIONS.Rule_initMvmt.Instance.patternGraph);
            analyzer.InlineSubpatternUsages(GRGEN_ACTIONS.Rule_move.Instance.patternGraph);
            GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.patternGraph.maxIsoSpace = 0;
            GRGEN_ACTIONS.Rule_es_0_1.Instance.patternGraph.maxIsoSpace = 0;
            GRGEN_ACTIONS.Rule_ss_1_0.Instance.patternGraph.maxIsoSpace = 0;
            GRGEN_ACTIONS.Rule_initMvmt.Instance.patternGraph.maxIsoSpace = 0;
            GRGEN_ACTIONS.Rule_move.Instance.patternGraph.maxIsoSpace = 0;
            analyzer.AnalyzeNestingOfPatternGraph(GRGEN_ACTIONS.Pattern_nac_NodesWithoutSites.Instance.patternGraph, true);
            analyzer.AnalyzeNestingOfPatternGraph(GRGEN_ACTIONS.Rule_es_0_1.Instance.patternGraph, true);
            analyzer.AnalyzeNestingOfPatternGraph(GRGEN_ACTIONS.Rule_ss_1_0.Instance.patternGraph, true);
            analyzer.AnalyzeNestingOfPatternGraph(GRGEN_ACTIONS.Rule_initMvmt.Instance.patternGraph, true);
            analyzer.AnalyzeNestingOfPatternGraph(GRGEN_ACTIONS.Rule_move.Instance.patternGraph, true);
            analyzer.ComputeInterPatternRelations(true);
        }
        
        public GRGEN_ACTIONS.IAction_es_0_1 @es_0_1;
        public GRGEN_ACTIONS.IAction_ss_1_0 @ss_1_0;
        public GRGEN_ACTIONS.IAction_initMvmt @initMvmt;
        public GRGEN_ACTIONS.IAction_move @move;
        
        
        public override string[] Packages { get { return packages; } }
        private string[] packages;
        
        public override string Name { get { return "rulesetActions"; } }
        public override string StatisticsPath { get { return null; } }
        public override bool LazyNIC { get { return false; } }
        public override bool InlineIndependents { get { return true; } }
        public override bool Profile { get { return false; } }

        public override IList ArrayOrderAscendingBy(IList array, string member)
        {
            if(array.Count == 0)
                return array;
            string arrayType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array.GetType());
            string arrayValueType = GRGEN_LIBGR.TypesHelper.ExtractSrc(arrayType);
            if(!arrayValueType.StartsWith("match<"))
                return null;
            if(array[0] == null)
                return null;
            if(arrayValueType == "match<>")
                arrayValueType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array[0].GetType());
            if(arrayValueType.StartsWith("match<class "))
            {
                switch(arrayValueType.Substring(12, arrayValueType.Length - 12 - 1))
                {
                default:
                    return null;
                }
            }
            else
            {
                switch(arrayValueType.Substring(6, arrayValueType.Length - 6 - 1))
                {
                case "es_0_1":
                    switch(member)
                    {
                    default:
                        return null;
                    }
                case "ss_1_0":
                    switch(member)
                    {
                    default:
                        return null;
                    }
                case "initMvmt":
                    switch(member)
                    {
                    default:
                        return null;
                    }
                case "move":
                    switch(member)
                    {
                    default:
                        return null;
                    }
                default:
                    return null;
                }
            }
        }

        public override IList ArrayOrderDescendingBy(IList array, string member)
        {
            if(array.Count == 0)
                return array;
            string arrayType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array.GetType());
            string arrayValueType = GRGEN_LIBGR.TypesHelper.ExtractSrc(arrayType);
            if(!arrayValueType.StartsWith("match<"))
                return null;
            if(array[0] == null)
                return null;
            if(arrayValueType == "match<>")
                arrayValueType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array[0].GetType());
            if(arrayValueType.StartsWith("match<class "))
            {
                switch(arrayValueType.Substring(12, arrayValueType.Length - 12 - 1))
                {
                default:
                    return null;
                }
            }
            else
            {
                switch(arrayValueType.Substring(6, arrayValueType.Length - 6 - 1))
                {
                case "es_0_1":
                    switch(member)
                    {
                    default:
                        return null;
                    }
                case "ss_1_0":
                    switch(member)
                    {
                    default:
                        return null;
                    }
                case "initMvmt":
                    switch(member)
                    {
                    default:
                        return null;
                    }
                case "move":
                    switch(member)
                    {
                    default:
                        return null;
                    }
                default:
                    return null;
                }
            }
        }

        public override IList ArrayGroupBy(IList array, string member)
        {
            if(array.Count == 0)
                return array;
            string arrayType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array.GetType());
            string arrayValueType = GRGEN_LIBGR.TypesHelper.ExtractSrc(arrayType);
            if(!arrayValueType.StartsWith("match<"))
                return null;
            if(array[0] == null)
                return null;
            if(arrayValueType == "match<>")
                arrayValueType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array[0].GetType());
            if(arrayValueType.StartsWith("match<class "))
            {
                switch(arrayValueType.Substring(12, arrayValueType.Length - 12 - 1))
                {
                default:
                    return null;
                }
            }
            else
            {
                switch(arrayValueType.Substring(6, arrayValueType.Length - 6 - 1))
                {
                case "es_0_1":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_es_0_1_groupBy_v0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "r0":
                        return ArrayHelper.Array_es_0_1_groupBy_r0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v9":
                        return ArrayHelper.Array_es_0_1_groupBy_v9(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v0_p0":
                        return ArrayHelper.Array_es_0_1_groupBy_v0_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v1":
                        return ArrayHelper.Array_es_0_1_groupBy_v1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v2":
                        return ArrayHelper.Array_es_0_1_groupBy_v2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v9_p0":
                        return ArrayHelper.Array_es_0_1_groupBy_v9_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v10":
                        return ArrayHelper.Array_es_0_1_groupBy_v10(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v1_p0":
                        return ArrayHelper.Array_es_0_1_groupBy_v1_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v3":
                        return ArrayHelper.Array_es_0_1_groupBy_v3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v11":
                        return ArrayHelper.Array_es_0_1_groupBy_v11(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v3_p0":
                        return ArrayHelper.Array_es_0_1_groupBy_v3_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v4":
                        return ArrayHelper.Array_es_0_1_groupBy_v4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v6":
                        return ArrayHelper.Array_es_0_1_groupBy_v6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v8":
                        return ArrayHelper.Array_es_0_1_groupBy_v8(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v11_p0":
                        return ArrayHelper.Array_es_0_1_groupBy_v11_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v12":
                        return ArrayHelper.Array_es_0_1_groupBy_v12(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v14":
                        return ArrayHelper.Array_es_0_1_groupBy_v14(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v16":
                        return ArrayHelper.Array_es_0_1_groupBy_v16(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v5":
                        return ArrayHelper.Array_es_0_1_groupBy_v5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v7":
                        return ArrayHelper.Array_es_0_1_groupBy_v7(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v13":
                        return ArrayHelper.Array_es_0_1_groupBy_v13(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v15":
                        return ArrayHelper.Array_es_0_1_groupBy_v15(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v7_p0":
                        return ArrayHelper.Array_es_0_1_groupBy_v7_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v15_p0":
                        return ArrayHelper.Array_es_0_1_groupBy_v15_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "left":
                        return ArrayHelper.Array_es_0_1_groupBy_left(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "rn0":
                        return ArrayHelper.Array_es_0_1_groupBy_rn0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "e0":
                        return ArrayHelper.Array_es_0_1_groupBy_e0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "right":
                        return ArrayHelper.Array_es_0_1_groupBy_right(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "rn1":
                        return ArrayHelper.Array_es_0_1_groupBy_rn1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c0":
                        return ArrayHelper.Array_es_0_1_groupBy_c0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c1":
                        return ArrayHelper.Array_es_0_1_groupBy_c1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c2":
                        return ArrayHelper.Array_es_0_1_groupBy_c2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c3":
                        return ArrayHelper.Array_es_0_1_groupBy_c3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c4":
                        return ArrayHelper.Array_es_0_1_groupBy_c4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c5":
                        return ArrayHelper.Array_es_0_1_groupBy_c5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c6":
                        return ArrayHelper.Array_es_0_1_groupBy_c6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c7":
                        return ArrayHelper.Array_es_0_1_groupBy_c7(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c8":
                        return ArrayHelper.Array_es_0_1_groupBy_c8(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c9":
                        return ArrayHelper.Array_es_0_1_groupBy_c9(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c10":
                        return ArrayHelper.Array_es_0_1_groupBy_c10(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c11":
                        return ArrayHelper.Array_es_0_1_groupBy_c11(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c12":
                        return ArrayHelper.Array_es_0_1_groupBy_c12(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c13":
                        return ArrayHelper.Array_es_0_1_groupBy_c13(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c14":
                        return ArrayHelper.Array_es_0_1_groupBy_c14(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c15":
                        return ArrayHelper.Array_es_0_1_groupBy_c15(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c16":
                        return ArrayHelper.Array_es_0_1_groupBy_c16(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c17":
                        return ArrayHelper.Array_es_0_1_groupBy_c17(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c18":
                        return ArrayHelper.Array_es_0_1_groupBy_c18(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c19":
                        return ArrayHelper.Array_es_0_1_groupBy_c19(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c20":
                        return ArrayHelper.Array_es_0_1_groupBy_c20(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c21":
                        return ArrayHelper.Array_es_0_1_groupBy_c21(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c22":
                        return ArrayHelper.Array_es_0_1_groupBy_c22(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c23":
                        return ArrayHelper.Array_es_0_1_groupBy_c23(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "_edge0":
                        return ArrayHelper.Array_es_0_1_groupBy__edge0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "_edge1":
                        return ArrayHelper.Array_es_0_1_groupBy__edge1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "_edge2":
                        return ArrayHelper.Array_es_0_1_groupBy__edge2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "_edge3":
                        return ArrayHelper.Array_es_0_1_groupBy__edge3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "_edge4":
                        return ArrayHelper.Array_es_0_1_groupBy__edge4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "_edge5":
                        return ArrayHelper.Array_es_0_1_groupBy__edge5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "_edge6":
                        return ArrayHelper.Array_es_0_1_groupBy__edge6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    default:
                        return null;
                    }
                case "ss_1_0":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_ss_1_0_groupBy_v0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "r0":
                        return ArrayHelper.Array_ss_1_0_groupBy_r0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v8":
                        return ArrayHelper.Array_ss_1_0_groupBy_v8(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v0_p0":
                        return ArrayHelper.Array_ss_1_0_groupBy_v0_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v1":
                        return ArrayHelper.Array_ss_1_0_groupBy_v1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v2":
                        return ArrayHelper.Array_ss_1_0_groupBy_v2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v8_p0":
                        return ArrayHelper.Array_ss_1_0_groupBy_v8_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v9":
                        return ArrayHelper.Array_ss_1_0_groupBy_v9(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v1_p0":
                        return ArrayHelper.Array_ss_1_0_groupBy_v1_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v3":
                        return ArrayHelper.Array_ss_1_0_groupBy_v3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v10":
                        return ArrayHelper.Array_ss_1_0_groupBy_v10(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v3_p0":
                        return ArrayHelper.Array_ss_1_0_groupBy_v3_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v4":
                        return ArrayHelper.Array_ss_1_0_groupBy_v4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v6":
                        return ArrayHelper.Array_ss_1_0_groupBy_v6(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v7":
                        return ArrayHelper.Array_ss_1_0_groupBy_v7(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v10_p0":
                        return ArrayHelper.Array_ss_1_0_groupBy_v10_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v11":
                        return ArrayHelper.Array_ss_1_0_groupBy_v11(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v13":
                        return ArrayHelper.Array_ss_1_0_groupBy_v13(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v14":
                        return ArrayHelper.Array_ss_1_0_groupBy_v14(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v5":
                        return ArrayHelper.Array_ss_1_0_groupBy_v5(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v12":
                        return ArrayHelper.Array_ss_1_0_groupBy_v12(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "rn0":
                        return ArrayHelper.Array_ss_1_0_groupBy_rn0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "right":
                        return ArrayHelper.Array_ss_1_0_groupBy_right(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "rn1":
                        return ArrayHelper.Array_ss_1_0_groupBy_rn1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "left":
                        return ArrayHelper.Array_ss_1_0_groupBy_left(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c0":
                        return ArrayHelper.Array_ss_1_0_groupBy_c0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c1":
                        return ArrayHelper.Array_ss_1_0_groupBy_c1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c2":
                        return ArrayHelper.Array_ss_1_0_groupBy_c2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c3":
                        return ArrayHelper.Array_ss_1_0_groupBy_c3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c4":
                        return ArrayHelper.Array_ss_1_0_groupBy_c4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c5":
                        return ArrayHelper.Array_ss_1_0_groupBy_c5(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c6":
                        return ArrayHelper.Array_ss_1_0_groupBy_c6(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c7":
                        return ArrayHelper.Array_ss_1_0_groupBy_c7(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c8":
                        return ArrayHelper.Array_ss_1_0_groupBy_c8(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c9":
                        return ArrayHelper.Array_ss_1_0_groupBy_c9(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c10":
                        return ArrayHelper.Array_ss_1_0_groupBy_c10(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c11":
                        return ArrayHelper.Array_ss_1_0_groupBy_c11(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c12":
                        return ArrayHelper.Array_ss_1_0_groupBy_c12(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c13":
                        return ArrayHelper.Array_ss_1_0_groupBy_c13(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c14":
                        return ArrayHelper.Array_ss_1_0_groupBy_c14(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c15":
                        return ArrayHelper.Array_ss_1_0_groupBy_c15(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c16":
                        return ArrayHelper.Array_ss_1_0_groupBy_c16(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c17":
                        return ArrayHelper.Array_ss_1_0_groupBy_c17(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c18":
                        return ArrayHelper.Array_ss_1_0_groupBy_c18(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c19":
                        return ArrayHelper.Array_ss_1_0_groupBy_c19(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "_edge0":
                        return ArrayHelper.Array_ss_1_0_groupBy__edge0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "_edge1":
                        return ArrayHelper.Array_ss_1_0_groupBy__edge1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "_edge2":
                        return ArrayHelper.Array_ss_1_0_groupBy__edge2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "_edge3":
                        return ArrayHelper.Array_ss_1_0_groupBy__edge3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "_edge4":
                        return ArrayHelper.Array_ss_1_0_groupBy__edge4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    default:
                        return null;
                    }
                case "initMvmt":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_initMvmt_groupBy_v0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "r0":
                        return ArrayHelper.Array_initMvmt_groupBy_r0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v4":
                        return ArrayHelper.Array_initMvmt_groupBy_v4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v7":
                        return ArrayHelper.Array_initMvmt_groupBy_v7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v14":
                        return ArrayHelper.Array_initMvmt_groupBy_v14(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v0_p0":
                        return ArrayHelper.Array_initMvmt_groupBy_v0_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v1":
                        return ArrayHelper.Array_initMvmt_groupBy_v1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v2":
                        return ArrayHelper.Array_initMvmt_groupBy_v2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v3":
                        return ArrayHelper.Array_initMvmt_groupBy_v3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v4_p0":
                        return ArrayHelper.Array_initMvmt_groupBy_v4_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v5":
                        return ArrayHelper.Array_initMvmt_groupBy_v5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v6":
                        return ArrayHelper.Array_initMvmt_groupBy_v6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v7_p0":
                        return ArrayHelper.Array_initMvmt_groupBy_v7_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v8":
                        return ArrayHelper.Array_initMvmt_groupBy_v8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v9":
                        return ArrayHelper.Array_initMvmt_groupBy_v9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v14_p0":
                        return ArrayHelper.Array_initMvmt_groupBy_v14_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v15":
                        return ArrayHelper.Array_initMvmt_groupBy_v15(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v1_p0":
                        return ArrayHelper.Array_initMvmt_groupBy_v1_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v2_p0":
                        return ArrayHelper.Array_initMvmt_groupBy_v2_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v5_p0":
                        return ArrayHelper.Array_initMvmt_groupBy_v5_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v8_p0":
                        return ArrayHelper.Array_initMvmt_groupBy_v8_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v10":
                        return ArrayHelper.Array_initMvmt_groupBy_v10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v16":
                        return ArrayHelper.Array_initMvmt_groupBy_v16(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v10_p0":
                        return ArrayHelper.Array_initMvmt_groupBy_v10_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v11":
                        return ArrayHelper.Array_initMvmt_groupBy_v11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v13":
                        return ArrayHelper.Array_initMvmt_groupBy_v13(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v16_p0":
                        return ArrayHelper.Array_initMvmt_groupBy_v16_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v17":
                        return ArrayHelper.Array_initMvmt_groupBy_v17(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v19":
                        return ArrayHelper.Array_initMvmt_groupBy_v19(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v12":
                        return ArrayHelper.Array_initMvmt_groupBy_v12(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v18":
                        return ArrayHelper.Array_initMvmt_groupBy_v18(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v12_p0":
                        return ArrayHelper.Array_initMvmt_groupBy_v12_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v18_p0":
                        return ArrayHelper.Array_initMvmt_groupBy_v18_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "y0":
                        return ArrayHelper.Array_initMvmt_groupBy_y0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "n_right":
                        return ArrayHelper.Array_initMvmt_groupBy_n_right(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "y2":
                        return ArrayHelper.Array_initMvmt_groupBy_y2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "y3":
                        return ArrayHelper.Array_initMvmt_groupBy_y3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "y1":
                        return ArrayHelper.Array_initMvmt_groupBy_y1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "n_left":
                        return ArrayHelper.Array_initMvmt_groupBy_n_left(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "e0":
                        return ArrayHelper.Array_initMvmt_groupBy_e0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c0":
                        return ArrayHelper.Array_initMvmt_groupBy_c0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c1":
                        return ArrayHelper.Array_initMvmt_groupBy_c1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c2":
                        return ArrayHelper.Array_initMvmt_groupBy_c2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c3":
                        return ArrayHelper.Array_initMvmt_groupBy_c3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c4":
                        return ArrayHelper.Array_initMvmt_groupBy_c4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c5":
                        return ArrayHelper.Array_initMvmt_groupBy_c5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c6":
                        return ArrayHelper.Array_initMvmt_groupBy_c6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c7":
                        return ArrayHelper.Array_initMvmt_groupBy_c7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c8":
                        return ArrayHelper.Array_initMvmt_groupBy_c8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c9":
                        return ArrayHelper.Array_initMvmt_groupBy_c9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c10":
                        return ArrayHelper.Array_initMvmt_groupBy_c10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c11":
                        return ArrayHelper.Array_initMvmt_groupBy_c11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c12":
                        return ArrayHelper.Array_initMvmt_groupBy_c12(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c13":
                        return ArrayHelper.Array_initMvmt_groupBy_c13(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c14":
                        return ArrayHelper.Array_initMvmt_groupBy_c14(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c15":
                        return ArrayHelper.Array_initMvmt_groupBy_c15(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c16":
                        return ArrayHelper.Array_initMvmt_groupBy_c16(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c17":
                        return ArrayHelper.Array_initMvmt_groupBy_c17(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c18":
                        return ArrayHelper.Array_initMvmt_groupBy_c18(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c19":
                        return ArrayHelper.Array_initMvmt_groupBy_c19(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c20":
                        return ArrayHelper.Array_initMvmt_groupBy_c20(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c21":
                        return ArrayHelper.Array_initMvmt_groupBy_c21(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c22":
                        return ArrayHelper.Array_initMvmt_groupBy_c22(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c23":
                        return ArrayHelper.Array_initMvmt_groupBy_c23(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c24":
                        return ArrayHelper.Array_initMvmt_groupBy_c24(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c25":
                        return ArrayHelper.Array_initMvmt_groupBy_c25(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c26":
                        return ArrayHelper.Array_initMvmt_groupBy_c26(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c27":
                        return ArrayHelper.Array_initMvmt_groupBy_c27(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c28":
                        return ArrayHelper.Array_initMvmt_groupBy_c28(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c29":
                        return ArrayHelper.Array_initMvmt_groupBy_c29(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c30":
                        return ArrayHelper.Array_initMvmt_groupBy_c30(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c31":
                        return ArrayHelper.Array_initMvmt_groupBy_c31(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge0":
                        return ArrayHelper.Array_initMvmt_groupBy__edge0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge1":
                        return ArrayHelper.Array_initMvmt_groupBy__edge1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge2":
                        return ArrayHelper.Array_initMvmt_groupBy__edge2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge3":
                        return ArrayHelper.Array_initMvmt_groupBy__edge3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge4":
                        return ArrayHelper.Array_initMvmt_groupBy__edge4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge5":
                        return ArrayHelper.Array_initMvmt_groupBy__edge5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge6":
                        return ArrayHelper.Array_initMvmt_groupBy__edge6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge7":
                        return ArrayHelper.Array_initMvmt_groupBy__edge7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge8":
                        return ArrayHelper.Array_initMvmt_groupBy__edge8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge9":
                        return ArrayHelper.Array_initMvmt_groupBy__edge9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge10":
                        return ArrayHelper.Array_initMvmt_groupBy__edge10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge11":
                        return ArrayHelper.Array_initMvmt_groupBy__edge11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    default:
                        return null;
                    }
                case "move":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_move_groupBy_v0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "r0":
                        return ArrayHelper.Array_move_groupBy_r0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v9":
                        return ArrayHelper.Array_move_groupBy_v9(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v0_p0":
                        return ArrayHelper.Array_move_groupBy_v0_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v1":
                        return ArrayHelper.Array_move_groupBy_v1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v3":
                        return ArrayHelper.Array_move_groupBy_v3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v9_p0":
                        return ArrayHelper.Array_move_groupBy_v9_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v10":
                        return ArrayHelper.Array_move_groupBy_v10(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v1_p0":
                        return ArrayHelper.Array_move_groupBy_v1_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v2":
                        return ArrayHelper.Array_move_groupBy_v2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v4":
                        return ArrayHelper.Array_move_groupBy_v4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v2_p0":
                        return ArrayHelper.Array_move_groupBy_v2_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v4_p0":
                        return ArrayHelper.Array_move_groupBy_v4_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v5":
                        return ArrayHelper.Array_move_groupBy_v5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v7":
                        return ArrayHelper.Array_move_groupBy_v7(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v6":
                        return ArrayHelper.Array_move_groupBy_v6(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v8":
                        return ArrayHelper.Array_move_groupBy_v8(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v6_p0":
                        return ArrayHelper.Array_move_groupBy_v6_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "src":
                        return ArrayHelper.Array_move_groupBy_src(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "tgt":
                        return ArrayHelper.Array_move_groupBy_tgt(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "n_id":
                        return ArrayHelper.Array_move_groupBy_n_id(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "ref":
                        return ArrayHelper.Array_move_groupBy_ref(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c0":
                        return ArrayHelper.Array_move_groupBy_c0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c1":
                        return ArrayHelper.Array_move_groupBy_c1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c2":
                        return ArrayHelper.Array_move_groupBy_c2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c3":
                        return ArrayHelper.Array_move_groupBy_c3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c4":
                        return ArrayHelper.Array_move_groupBy_c4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c5":
                        return ArrayHelper.Array_move_groupBy_c5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c6":
                        return ArrayHelper.Array_move_groupBy_c6(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c7":
                        return ArrayHelper.Array_move_groupBy_c7(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c8":
                        return ArrayHelper.Array_move_groupBy_c8(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c9":
                        return ArrayHelper.Array_move_groupBy_c9(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c10":
                        return ArrayHelper.Array_move_groupBy_c10(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c11":
                        return ArrayHelper.Array_move_groupBy_c11(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c12":
                        return ArrayHelper.Array_move_groupBy_c12(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c13":
                        return ArrayHelper.Array_move_groupBy_c13(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c14":
                        return ArrayHelper.Array_move_groupBy_c14(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c15":
                        return ArrayHelper.Array_move_groupBy_c15(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c16":
                        return ArrayHelper.Array_move_groupBy_c16(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "_edge0":
                        return ArrayHelper.Array_move_groupBy__edge0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "_edge1":
                        return ArrayHelper.Array_move_groupBy__edge1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "_edge2":
                        return ArrayHelper.Array_move_groupBy__edge2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "_edge3":
                        return ArrayHelper.Array_move_groupBy__edge3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "_edge4":
                        return ArrayHelper.Array_move_groupBy__edge4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "_edge5":
                        return ArrayHelper.Array_move_groupBy__edge5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    default:
                        return null;
                    }
                default:
                    return null;
                }
            }
        }

        public override IList ArrayKeepOneForEach(IList array, string member)
        {
            if(array.Count == 0)
                return array;
            string arrayType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array.GetType());
            string arrayValueType = GRGEN_LIBGR.TypesHelper.ExtractSrc(arrayType);
            if(!arrayValueType.StartsWith("match<"))
                return null;
            if(array[0] == null)
                return null;
            if(arrayValueType == "match<>")
                arrayValueType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array[0].GetType());
            if(arrayValueType.StartsWith("match<class "))
            {
                switch(arrayValueType.Substring(12, arrayValueType.Length - 12 - 1))
                {
                default:
                    return null;
                }
            }
            else
            {
                switch(arrayValueType.Substring(6, arrayValueType.Length - 6 - 1))
                {
                case "es_0_1":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "r0":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_r0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v9":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v9(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v0_p0":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v0_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v1":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v2":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v9_p0":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v9_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v10":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v10(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v1_p0":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v1_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v3":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v11":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v11(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v3_p0":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v3_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v4":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v6":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v8":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v8(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v11_p0":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v11_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v12":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v12(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v14":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v14(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v16":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v16(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v5":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v7":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v7(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v13":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v13(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v15":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v15(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v7_p0":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v7_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "v15_p0":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_v15_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "left":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_left(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "rn0":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_rn0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "e0":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_e0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "right":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_right(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "rn1":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_rn1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c0":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c1":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c2":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c3":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c4":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c5":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c6":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c7":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c7(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c8":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c8(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c9":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c9(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c10":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c10(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c11":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c11(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c12":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c12(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c13":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c13(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c14":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c14(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c15":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c15(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c16":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c16(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c17":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c17(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c18":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c18(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c19":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c19(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c20":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c20(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c21":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c21(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c22":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c22(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "c23":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy_c23(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "_edge0":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy__edge0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "_edge1":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy__edge1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "_edge2":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy__edge2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "_edge3":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy__edge3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "_edge4":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy__edge4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "_edge5":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy__edge5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    case "_edge6":
                        return ArrayHelper.Array_es_0_1_keepOneForEachBy__edge6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array));
                    default:
                        return null;
                    }
                case "ss_1_0":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "r0":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_r0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v8":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v8(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v0_p0":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v0_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v1":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v2":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v8_p0":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v8_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v9":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v9(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v1_p0":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v1_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v3":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v10":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v10(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v3_p0":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v3_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v4":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v6":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v6(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v7":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v7(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v10_p0":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v10_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v11":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v11(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v13":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v13(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v14":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v14(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v5":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v5(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "v12":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_v12(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "rn0":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_rn0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "right":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_right(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "rn1":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_rn1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "left":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_left(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c0":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c1":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c2":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c3":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c4":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c5":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c5(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c6":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c6(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c7":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c7(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c8":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c8(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c9":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c9(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c10":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c10(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c11":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c11(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c12":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c12(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c13":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c13(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c14":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c14(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c15":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c15(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c16":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c16(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c17":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c17(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c18":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c18(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "c19":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy_c19(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "_edge0":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy__edge0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "_edge1":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy__edge1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "_edge2":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy__edge2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "_edge3":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy__edge3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    case "_edge4":
                        return ArrayHelper.Array_ss_1_0_keepOneForEachBy__edge4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array));
                    default:
                        return null;
                    }
                case "initMvmt":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "r0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_r0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v4":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v7":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v14":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v14(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v0_p0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v0_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v1":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v2":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v3":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v4_p0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v4_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v5":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v6":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v7_p0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v7_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v8":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v9":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v14_p0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v14_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v15":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v15(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v1_p0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v1_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v2_p0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v2_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v5_p0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v5_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v8_p0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v8_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v10":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v16":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v16(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v10_p0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v10_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v11":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v13":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v13(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v16_p0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v16_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v17":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v17(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v19":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v19(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v12":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v12(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v18":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v18(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v12_p0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v12_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "v18_p0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_v18_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "y0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_y0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "n_right":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_n_right(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "y2":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_y2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "y3":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_y3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "y1":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_y1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "n_left":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_n_left(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "e0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_e0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c1":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c2":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c3":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c4":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c5":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c6":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c7":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c8":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c9":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c10":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c11":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c12":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c12(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c13":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c13(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c14":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c14(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c15":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c15(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c16":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c16(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c17":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c17(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c18":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c18(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c19":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c19(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c20":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c20(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c21":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c21(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c22":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c22(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c23":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c23(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c24":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c24(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c25":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c25(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c26":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c26(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c27":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c27(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c28":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c28(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c29":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c29(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c30":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c30(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "c31":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy_c31(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge0":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy__edge0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge1":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy__edge1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge2":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy__edge2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge3":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy__edge3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge4":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy__edge4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge5":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy__edge5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge6":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy__edge6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge7":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy__edge7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge8":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy__edge8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge9":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy__edge9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge10":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy__edge10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    case "_edge11":
                        return ArrayHelper.Array_initMvmt_keepOneForEachBy__edge11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array));
                    default:
                        return null;
                    }
                case "move":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_move_keepOneForEachBy_v0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "r0":
                        return ArrayHelper.Array_move_keepOneForEachBy_r0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v9":
                        return ArrayHelper.Array_move_keepOneForEachBy_v9(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v0_p0":
                        return ArrayHelper.Array_move_keepOneForEachBy_v0_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v1":
                        return ArrayHelper.Array_move_keepOneForEachBy_v1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v3":
                        return ArrayHelper.Array_move_keepOneForEachBy_v3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v9_p0":
                        return ArrayHelper.Array_move_keepOneForEachBy_v9_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v10":
                        return ArrayHelper.Array_move_keepOneForEachBy_v10(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v1_p0":
                        return ArrayHelper.Array_move_keepOneForEachBy_v1_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v2":
                        return ArrayHelper.Array_move_keepOneForEachBy_v2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v4":
                        return ArrayHelper.Array_move_keepOneForEachBy_v4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v2_p0":
                        return ArrayHelper.Array_move_keepOneForEachBy_v2_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v4_p0":
                        return ArrayHelper.Array_move_keepOneForEachBy_v4_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v5":
                        return ArrayHelper.Array_move_keepOneForEachBy_v5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v7":
                        return ArrayHelper.Array_move_keepOneForEachBy_v7(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v6":
                        return ArrayHelper.Array_move_keepOneForEachBy_v6(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v8":
                        return ArrayHelper.Array_move_keepOneForEachBy_v8(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "v6_p0":
                        return ArrayHelper.Array_move_keepOneForEachBy_v6_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "src":
                        return ArrayHelper.Array_move_keepOneForEachBy_src(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "tgt":
                        return ArrayHelper.Array_move_keepOneForEachBy_tgt(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "n_id":
                        return ArrayHelper.Array_move_keepOneForEachBy_n_id(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "ref":
                        return ArrayHelper.Array_move_keepOneForEachBy_ref(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c0":
                        return ArrayHelper.Array_move_keepOneForEachBy_c0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c1":
                        return ArrayHelper.Array_move_keepOneForEachBy_c1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c2":
                        return ArrayHelper.Array_move_keepOneForEachBy_c2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c3":
                        return ArrayHelper.Array_move_keepOneForEachBy_c3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c4":
                        return ArrayHelper.Array_move_keepOneForEachBy_c4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c5":
                        return ArrayHelper.Array_move_keepOneForEachBy_c5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c6":
                        return ArrayHelper.Array_move_keepOneForEachBy_c6(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c7":
                        return ArrayHelper.Array_move_keepOneForEachBy_c7(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c8":
                        return ArrayHelper.Array_move_keepOneForEachBy_c8(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c9":
                        return ArrayHelper.Array_move_keepOneForEachBy_c9(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c10":
                        return ArrayHelper.Array_move_keepOneForEachBy_c10(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c11":
                        return ArrayHelper.Array_move_keepOneForEachBy_c11(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c12":
                        return ArrayHelper.Array_move_keepOneForEachBy_c12(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c13":
                        return ArrayHelper.Array_move_keepOneForEachBy_c13(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c14":
                        return ArrayHelper.Array_move_keepOneForEachBy_c14(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c15":
                        return ArrayHelper.Array_move_keepOneForEachBy_c15(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "c16":
                        return ArrayHelper.Array_move_keepOneForEachBy_c16(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "_edge0":
                        return ArrayHelper.Array_move_keepOneForEachBy__edge0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "_edge1":
                        return ArrayHelper.Array_move_keepOneForEachBy__edge1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "_edge2":
                        return ArrayHelper.Array_move_keepOneForEachBy__edge2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "_edge3":
                        return ArrayHelper.Array_move_keepOneForEachBy__edge3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "_edge4":
                        return ArrayHelper.Array_move_keepOneForEachBy__edge4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    case "_edge5":
                        return ArrayHelper.Array_move_keepOneForEachBy__edge5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array));
                    default:
                        return null;
                    }
                default:
                    return null;
                }
            }
        }

        public override int ArrayIndexOfBy(IList array, string member, object value)
        {
            if(array.Count == 0)
                return -1;
            string arrayType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array.GetType());
            string arrayValueType = GRGEN_LIBGR.TypesHelper.ExtractSrc(arrayType);
            if(!arrayValueType.StartsWith("match<"))
                return -1;
            if(array[0] == null)
                return -1;
            if(arrayValueType == "match<>")
                arrayValueType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array[0].GetType());
            if(arrayValueType.StartsWith("match<class "))
            {
                switch(arrayValueType.Substring(12, arrayValueType.Length - 12 - 1))
                {
                default:
                    return -1;
                }
            }
            else
            {
                switch(arrayValueType.Substring(6, arrayValueType.Length - 6 - 1))
                {
                case "es_0_1":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "r0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_r0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_LIBGR.INode)value);
                    case "v9":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v9(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "v0_p0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v0_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v1":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value);
                    case "v2":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v9_p0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v9_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v10":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v10(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v1_p0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v1_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v3":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value);
                    case "v11":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v11(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value);
                    case "v3_p0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v3_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v4":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IID)value);
                    case "v6":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value);
                    case "v8":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v8(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value);
                    case "v11_p0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v11_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v12":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v12(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IID)value);
                    case "v14":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v14(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value);
                    case "v16":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v16(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value);
                    case "v5":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IN0)value);
                    case "v7":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v7(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value);
                    case "v13":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v13(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IN1)value);
                    case "v15":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v15(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value);
                    case "v7_p0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v7_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v15_p0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v15_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "left":
                        return ArrayHelper.Array_es_0_1_indexOfBy_left(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "rn0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_rn0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "e0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_e0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBEdge)value);
                    case "right":
                        return ArrayHelper.Array_es_0_1_indexOfBy_right(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "rn1":
                        return ArrayHelper.Array_es_0_1_indexOfBy_rn1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "c0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c1":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c2":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c3":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c4":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c5":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c6":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c7":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c7(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c8":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c8(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c9":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c9(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c10":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c10(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c11":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c11(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c12":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c12(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c13":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c13(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c14":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c14(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c15":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c15(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c16":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c16(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c17":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c17(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c18":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c18(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c19":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c19(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c20":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c20(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c21":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c21(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c22":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c22(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c23":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c23(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "_edge0":
                        return ArrayHelper.Array_es_0_1_indexOfBy__edge0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge1":
                        return ArrayHelper.Array_es_0_1_indexOfBy__edge1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge2":
                        return ArrayHelper.Array_es_0_1_indexOfBy__edge2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge3":
                        return ArrayHelper.Array_es_0_1_indexOfBy__edge3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge4":
                        return ArrayHelper.Array_es_0_1_indexOfBy__edge4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge5":
                        return ArrayHelper.Array_es_0_1_indexOfBy__edge5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge6":
                        return ArrayHelper.Array_es_0_1_indexOfBy__edge6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    default:
                        return -1;
                    }
                case "ss_1_0":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "r0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_r0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_LIBGR.INode)value);
                    case "v8":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v8(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "v0_p0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v0_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v1":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value);
                    case "v2":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v8_p0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v8_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v9":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v9(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v1_p0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v1_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v3":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value);
                    case "v10":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v10(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value);
                    case "v3_p0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v3_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v4":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IID)value);
                    case "v6":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v6(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value);
                    case "v7":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v7(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value);
                    case "v10_p0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v10_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v11":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v11(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IID)value);
                    case "v13":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v13(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value);
                    case "v14":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v14(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value);
                    case "v5":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v5(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IN1)value);
                    case "v12":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v12(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IN0)value);
                    case "rn0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_rn0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "right":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_right(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "rn1":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_rn1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "left":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_left(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "c0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c1":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c2":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c3":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c4":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c5":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c5(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c6":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c6(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c7":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c7(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c8":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c8(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c9":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c9(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c10":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c10(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c11":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c11(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c12":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c12(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c13":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c13(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c14":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c14(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c15":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c15(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c16":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c16(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c17":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c17(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c18":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c18(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c19":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c19(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "_edge0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy__edge0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge1":
                        return ArrayHelper.Array_ss_1_0_indexOfBy__edge1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge2":
                        return ArrayHelper.Array_ss_1_0_indexOfBy__edge2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge3":
                        return ArrayHelper.Array_ss_1_0_indexOfBy__edge3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge4":
                        return ArrayHelper.Array_ss_1_0_indexOfBy__edge4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    default:
                        return -1;
                    }
                case "initMvmt":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "r0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_r0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_LIBGR.INode)value);
                    case "v4":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "v7":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "v14":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v14(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "v0_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v0_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v1":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value);
                    case "v2":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value);
                    case "v3":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v4_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v4_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v5":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value);
                    case "v6":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v7_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v7_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v8":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value);
                    case "v9":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v14_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v14_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v15":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v15(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v1_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v1_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v2_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v2_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v5_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v5_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v8_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v8_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v10":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value);
                    case "v16":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v16(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value);
                    case "v10_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v10_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v11":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value);
                    case "v13":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v13(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value);
                    case "v16_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v16_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v17":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v17(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value);
                    case "v19":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v19(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value);
                    case "v12":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v12(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value);
                    case "v18":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v18(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value);
                    case "v12_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v12_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v18_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v18_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "y0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_y0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "n_right":
                        return ArrayHelper.Array_initMvmt_indexOfBy_n_right(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "y2":
                        return ArrayHelper.Array_initMvmt_indexOfBy_y2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "y3":
                        return ArrayHelper.Array_initMvmt_indexOfBy_y3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "y1":
                        return ArrayHelper.Array_initMvmt_indexOfBy_y1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "n_left":
                        return ArrayHelper.Array_initMvmt_indexOfBy_n_left(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "e0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_e0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBEdge)value);
                    case "c0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c1":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c2":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c3":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c4":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c5":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c6":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c7":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c8":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c9":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c10":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c11":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c12":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c12(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c13":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c13(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c14":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c14(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c15":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c15(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c16":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c16(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c17":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c17(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c18":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c18(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c19":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c19(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c20":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c20(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c21":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c21(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c22":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c22(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c23":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c23(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c24":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c24(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c25":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c25(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c26":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c26(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c27":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c27(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c28":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c28(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c29":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c29(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c30":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c30(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c31":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c31(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "_edge0":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge1":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge2":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge3":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge4":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge5":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge6":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge7":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge8":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge9":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge10":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge11":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    default:
                        return -1;
                    }
                case "move":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_move_indexOfBy_v0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "r0":
                        return ArrayHelper.Array_move_indexOfBy_r0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_LIBGR.INode)value);
                    case "v9":
                        return ArrayHelper.Array_move_indexOfBy_v9(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "v0_p0":
                        return ArrayHelper.Array_move_indexOfBy_v0_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v1":
                        return ArrayHelper.Array_move_indexOfBy_v1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IWayPoint)value);
                    case "v3":
                        return ArrayHelper.Array_move_indexOfBy_v3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v9_p0":
                        return ArrayHelper.Array_move_indexOfBy_v9_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v10":
                        return ArrayHelper.Array_move_indexOfBy_v10(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v1_p0":
                        return ArrayHelper.Array_move_indexOfBy_v1_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v2":
                        return ArrayHelper.Array_move_indexOfBy_v2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value);
                    case "v4":
                        return ArrayHelper.Array_move_indexOfBy_v4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value);
                    case "v2_p0":
                        return ArrayHelper.Array_move_indexOfBy_v2_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v4_p0":
                        return ArrayHelper.Array_move_indexOfBy_v4_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v5":
                        return ArrayHelper.Array_move_indexOfBy_v5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value);
                    case "v7":
                        return ArrayHelper.Array_move_indexOfBy_v7(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value);
                    case "v6":
                        return ArrayHelper.Array_move_indexOfBy_v6(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value);
                    case "v8":
                        return ArrayHelper.Array_move_indexOfBy_v8(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IToken)value);
                    case "v6_p0":
                        return ArrayHelper.Array_move_indexOfBy_v6_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "src":
                        return ArrayHelper.Array_move_indexOfBy_src(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "tgt":
                        return ArrayHelper.Array_move_indexOfBy_tgt(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "n_id":
                        return ArrayHelper.Array_move_indexOfBy_n_id(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "ref":
                        return ArrayHelper.Array_move_indexOfBy_ref(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "c0":
                        return ArrayHelper.Array_move_indexOfBy_c0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c1":
                        return ArrayHelper.Array_move_indexOfBy_c1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c2":
                        return ArrayHelper.Array_move_indexOfBy_c2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c3":
                        return ArrayHelper.Array_move_indexOfBy_c3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c4":
                        return ArrayHelper.Array_move_indexOfBy_c4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c5":
                        return ArrayHelper.Array_move_indexOfBy_c5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c6":
                        return ArrayHelper.Array_move_indexOfBy_c6(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c7":
                        return ArrayHelper.Array_move_indexOfBy_c7(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c8":
                        return ArrayHelper.Array_move_indexOfBy_c8(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c9":
                        return ArrayHelper.Array_move_indexOfBy_c9(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c10":
                        return ArrayHelper.Array_move_indexOfBy_c10(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c11":
                        return ArrayHelper.Array_move_indexOfBy_c11(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c12":
                        return ArrayHelper.Array_move_indexOfBy_c12(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c13":
                        return ArrayHelper.Array_move_indexOfBy_c13(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c14":
                        return ArrayHelper.Array_move_indexOfBy_c14(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c15":
                        return ArrayHelper.Array_move_indexOfBy_c15(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c16":
                        return ArrayHelper.Array_move_indexOfBy_c16(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "_edge0":
                        return ArrayHelper.Array_move_indexOfBy__edge0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge1":
                        return ArrayHelper.Array_move_indexOfBy__edge1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge2":
                        return ArrayHelper.Array_move_indexOfBy__edge2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge3":
                        return ArrayHelper.Array_move_indexOfBy__edge3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge4":
                        return ArrayHelper.Array_move_indexOfBy__edge4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge5":
                        return ArrayHelper.Array_move_indexOfBy__edge5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    default:
                        return -1;
                    }
                default:
                    return -1;
                }
            }
        }

        public override int ArrayIndexOfBy(IList array, string member, object value, int startIndex)
        {
            if(array.Count == 0)
                return -1;
            string arrayType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array.GetType());
            string arrayValueType = GRGEN_LIBGR.TypesHelper.ExtractSrc(arrayType);
            if(!arrayValueType.StartsWith("match<"))
                return -1;
            if(array[0] == null)
                return -1;
            if(arrayValueType == "match<>")
                arrayValueType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array[0].GetType());
            if(arrayValueType.StartsWith("match<class "))
            {
                switch(arrayValueType.Substring(12, arrayValueType.Length - 12 - 1))
                {
                default:
                    return -1;
                }
            }
            else
            {
                switch(arrayValueType.Substring(6, arrayValueType.Length - 6 - 1))
                {
                case "es_0_1":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "r0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_r0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_LIBGR.INode)value, startIndex);
                    case "v9":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v9(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "v0_p0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v0_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v1":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value, startIndex);
                    case "v2":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v9_p0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v9_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v10":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v10(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v1_p0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v1_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v3":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value, startIndex);
                    case "v11":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v11(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value, startIndex);
                    case "v3_p0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v3_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v4":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IID)value, startIndex);
                    case "v6":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value, startIndex);
                    case "v8":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v8(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value, startIndex);
                    case "v11_p0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v11_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v12":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v12(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IID)value, startIndex);
                    case "v14":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v14(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value, startIndex);
                    case "v16":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v16(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value, startIndex);
                    case "v5":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IN0)value, startIndex);
                    case "v7":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v7(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value, startIndex);
                    case "v13":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v13(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IN1)value, startIndex);
                    case "v15":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v15(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value, startIndex);
                    case "v7_p0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v7_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v15_p0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_v15_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "left":
                        return ArrayHelper.Array_es_0_1_indexOfBy_left(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "rn0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_rn0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "e0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_e0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBEdge)value, startIndex);
                    case "right":
                        return ArrayHelper.Array_es_0_1_indexOfBy_right(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "rn1":
                        return ArrayHelper.Array_es_0_1_indexOfBy_rn1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "c0":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c1":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c2":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c3":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c4":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c5":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c6":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c7":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c7(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c8":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c8(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c9":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c9(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c10":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c10(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c11":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c11(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c12":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c12(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c13":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c13(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c14":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c14(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c15":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c15(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c16":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c16(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c17":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c17(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c18":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c18(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c19":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c19(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c20":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c20(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c21":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c21(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c22":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c22(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c23":
                        return ArrayHelper.Array_es_0_1_indexOfBy_c23(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "_edge0":
                        return ArrayHelper.Array_es_0_1_indexOfBy__edge0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge1":
                        return ArrayHelper.Array_es_0_1_indexOfBy__edge1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge2":
                        return ArrayHelper.Array_es_0_1_indexOfBy__edge2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge3":
                        return ArrayHelper.Array_es_0_1_indexOfBy__edge3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge4":
                        return ArrayHelper.Array_es_0_1_indexOfBy__edge4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge5":
                        return ArrayHelper.Array_es_0_1_indexOfBy__edge5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge6":
                        return ArrayHelper.Array_es_0_1_indexOfBy__edge6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    default:
                        return -1;
                    }
                case "ss_1_0":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "r0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_r0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_LIBGR.INode)value, startIndex);
                    case "v8":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v8(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "v0_p0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v0_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v1":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value, startIndex);
                    case "v2":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v8_p0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v8_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v9":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v9(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v1_p0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v1_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v3":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value, startIndex);
                    case "v10":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v10(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value, startIndex);
                    case "v3_p0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v3_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v4":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IID)value, startIndex);
                    case "v6":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v6(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value, startIndex);
                    case "v7":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v7(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value, startIndex);
                    case "v10_p0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v10_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v11":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v11(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IID)value, startIndex);
                    case "v13":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v13(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value, startIndex);
                    case "v14":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v14(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value, startIndex);
                    case "v5":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v5(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IN1)value, startIndex);
                    case "v12":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_v12(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IN0)value, startIndex);
                    case "rn0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_rn0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "right":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_right(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "rn1":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_rn1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "left":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_left(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "c0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c1":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c2":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c3":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c4":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c5":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c5(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c6":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c6(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c7":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c7(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c8":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c8(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c9":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c9(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c10":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c10(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c11":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c11(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c12":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c12(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c13":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c13(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c14":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c14(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c15":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c15(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c16":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c16(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c17":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c17(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c18":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c18(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c19":
                        return ArrayHelper.Array_ss_1_0_indexOfBy_c19(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "_edge0":
                        return ArrayHelper.Array_ss_1_0_indexOfBy__edge0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge1":
                        return ArrayHelper.Array_ss_1_0_indexOfBy__edge1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge2":
                        return ArrayHelper.Array_ss_1_0_indexOfBy__edge2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge3":
                        return ArrayHelper.Array_ss_1_0_indexOfBy__edge3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge4":
                        return ArrayHelper.Array_ss_1_0_indexOfBy__edge4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    default:
                        return -1;
                    }
                case "initMvmt":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "r0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_r0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_LIBGR.INode)value, startIndex);
                    case "v4":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "v7":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "v14":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v14(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "v0_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v0_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v1":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value, startIndex);
                    case "v2":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value, startIndex);
                    case "v3":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v4_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v4_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v5":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value, startIndex);
                    case "v6":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v7_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v7_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v8":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value, startIndex);
                    case "v9":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v14_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v14_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v15":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v15(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v1_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v1_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v2_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v2_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v5_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v5_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v8_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v8_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v10":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value, startIndex);
                    case "v16":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v16(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value, startIndex);
                    case "v10_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v10_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v11":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value, startIndex);
                    case "v13":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v13(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value, startIndex);
                    case "v16_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v16_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v17":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v17(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value, startIndex);
                    case "v19":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v19(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value, startIndex);
                    case "v12":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v12(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value, startIndex);
                    case "v18":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v18(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value, startIndex);
                    case "v12_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v12_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v18_p0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_v18_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "y0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_y0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "n_right":
                        return ArrayHelper.Array_initMvmt_indexOfBy_n_right(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "y2":
                        return ArrayHelper.Array_initMvmt_indexOfBy_y2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "y3":
                        return ArrayHelper.Array_initMvmt_indexOfBy_y3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "y1":
                        return ArrayHelper.Array_initMvmt_indexOfBy_y1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "n_left":
                        return ArrayHelper.Array_initMvmt_indexOfBy_n_left(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "e0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_e0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBEdge)value, startIndex);
                    case "c0":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c1":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c2":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c3":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c4":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c5":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c6":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c7":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c8":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c9":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c10":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c11":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c12":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c12(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c13":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c13(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c14":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c14(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c15":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c15(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c16":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c16(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c17":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c17(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c18":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c18(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c19":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c19(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c20":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c20(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c21":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c21(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c22":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c22(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c23":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c23(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c24":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c24(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c25":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c25(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c26":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c26(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c27":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c27(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c28":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c28(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c29":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c29(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c30":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c30(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c31":
                        return ArrayHelper.Array_initMvmt_indexOfBy_c31(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "_edge0":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge1":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge2":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge3":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge4":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge5":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge6":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge7":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge8":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge9":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge10":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge11":
                        return ArrayHelper.Array_initMvmt_indexOfBy__edge11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    default:
                        return -1;
                    }
                case "move":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_move_indexOfBy_v0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "r0":
                        return ArrayHelper.Array_move_indexOfBy_r0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_LIBGR.INode)value, startIndex);
                    case "v9":
                        return ArrayHelper.Array_move_indexOfBy_v9(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "v0_p0":
                        return ArrayHelper.Array_move_indexOfBy_v0_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v1":
                        return ArrayHelper.Array_move_indexOfBy_v1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IWayPoint)value, startIndex);
                    case "v3":
                        return ArrayHelper.Array_move_indexOfBy_v3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v9_p0":
                        return ArrayHelper.Array_move_indexOfBy_v9_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v10":
                        return ArrayHelper.Array_move_indexOfBy_v10(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v1_p0":
                        return ArrayHelper.Array_move_indexOfBy_v1_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v2":
                        return ArrayHelper.Array_move_indexOfBy_v2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value, startIndex);
                    case "v4":
                        return ArrayHelper.Array_move_indexOfBy_v4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value, startIndex);
                    case "v2_p0":
                        return ArrayHelper.Array_move_indexOfBy_v2_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v4_p0":
                        return ArrayHelper.Array_move_indexOfBy_v4_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v5":
                        return ArrayHelper.Array_move_indexOfBy_v5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value, startIndex);
                    case "v7":
                        return ArrayHelper.Array_move_indexOfBy_v7(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value, startIndex);
                    case "v6":
                        return ArrayHelper.Array_move_indexOfBy_v6(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value, startIndex);
                    case "v8":
                        return ArrayHelper.Array_move_indexOfBy_v8(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IToken)value, startIndex);
                    case "v6_p0":
                        return ArrayHelper.Array_move_indexOfBy_v6_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "src":
                        return ArrayHelper.Array_move_indexOfBy_src(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "tgt":
                        return ArrayHelper.Array_move_indexOfBy_tgt(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "n_id":
                        return ArrayHelper.Array_move_indexOfBy_n_id(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "ref":
                        return ArrayHelper.Array_move_indexOfBy_ref(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "c0":
                        return ArrayHelper.Array_move_indexOfBy_c0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c1":
                        return ArrayHelper.Array_move_indexOfBy_c1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c2":
                        return ArrayHelper.Array_move_indexOfBy_c2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c3":
                        return ArrayHelper.Array_move_indexOfBy_c3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c4":
                        return ArrayHelper.Array_move_indexOfBy_c4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c5":
                        return ArrayHelper.Array_move_indexOfBy_c5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c6":
                        return ArrayHelper.Array_move_indexOfBy_c6(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c7":
                        return ArrayHelper.Array_move_indexOfBy_c7(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c8":
                        return ArrayHelper.Array_move_indexOfBy_c8(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c9":
                        return ArrayHelper.Array_move_indexOfBy_c9(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c10":
                        return ArrayHelper.Array_move_indexOfBy_c10(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c11":
                        return ArrayHelper.Array_move_indexOfBy_c11(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c12":
                        return ArrayHelper.Array_move_indexOfBy_c12(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c13":
                        return ArrayHelper.Array_move_indexOfBy_c13(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c14":
                        return ArrayHelper.Array_move_indexOfBy_c14(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c15":
                        return ArrayHelper.Array_move_indexOfBy_c15(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c16":
                        return ArrayHelper.Array_move_indexOfBy_c16(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "_edge0":
                        return ArrayHelper.Array_move_indexOfBy__edge0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge1":
                        return ArrayHelper.Array_move_indexOfBy__edge1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge2":
                        return ArrayHelper.Array_move_indexOfBy__edge2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge3":
                        return ArrayHelper.Array_move_indexOfBy__edge3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge4":
                        return ArrayHelper.Array_move_indexOfBy__edge4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge5":
                        return ArrayHelper.Array_move_indexOfBy__edge5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    default:
                        return -1;
                    }
                default:
                    return -1;
                }
            }
        }

        public override int ArrayLastIndexOfBy(IList array, string member, object value)
        {
            if(array.Count == 0)
                return -1;
            string arrayType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array.GetType());
            string arrayValueType = GRGEN_LIBGR.TypesHelper.ExtractSrc(arrayType);
            if(!arrayValueType.StartsWith("match<"))
                return -1;
            if(array[0] == null)
                return -1;
            if(arrayValueType == "match<>")
                arrayValueType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array[0].GetType());
            if(arrayValueType.StartsWith("match<class "))
            {
                switch(arrayValueType.Substring(12, arrayValueType.Length - 12 - 1))
                {
                default:
                    return -1;
                }
            }
            else
            {
                switch(arrayValueType.Substring(6, arrayValueType.Length - 6 - 1))
                {
                case "es_0_1":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "r0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_r0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_LIBGR.INode)value);
                    case "v9":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v9(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "v0_p0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v0_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v1":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value);
                    case "v2":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v9_p0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v9_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v10":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v10(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v1_p0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v1_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v3":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value);
                    case "v11":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v11(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value);
                    case "v3_p0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v3_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v4":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IID)value);
                    case "v6":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value);
                    case "v8":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v8(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value);
                    case "v11_p0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v11_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v12":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v12(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IID)value);
                    case "v14":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v14(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value);
                    case "v16":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v16(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value);
                    case "v5":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IN0)value);
                    case "v7":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v7(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value);
                    case "v13":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v13(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IN1)value);
                    case "v15":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v15(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value);
                    case "v7_p0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v7_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v15_p0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v15_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "left":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_left(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "rn0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_rn0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "e0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_e0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBEdge)value);
                    case "right":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_right(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "rn1":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_rn1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "c0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c1":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c2":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c3":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c4":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c5":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c6":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c7":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c7(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c8":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c8(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c9":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c9(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c10":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c10(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c11":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c11(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c12":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c12(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c13":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c13(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c14":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c14(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c15":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c15(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c16":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c16(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c17":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c17(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c18":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c18(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c19":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c19(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c20":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c20(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c21":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c21(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c22":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c22(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c23":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c23(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "_edge0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy__edge0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge1":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy__edge1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge2":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy__edge2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge3":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy__edge3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge4":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy__edge4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge5":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy__edge5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge6":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy__edge6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    default:
                        return -1;
                    }
                case "ss_1_0":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "r0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_r0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_LIBGR.INode)value);
                    case "v8":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v8(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "v0_p0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v0_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v1":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value);
                    case "v2":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v8_p0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v8_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v9":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v9(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v1_p0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v1_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v3":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value);
                    case "v10":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v10(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value);
                    case "v3_p0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v3_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v4":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IID)value);
                    case "v6":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v6(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value);
                    case "v7":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v7(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value);
                    case "v10_p0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v10_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v11":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v11(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IID)value);
                    case "v13":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v13(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value);
                    case "v14":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v14(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value);
                    case "v5":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v5(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IN1)value);
                    case "v12":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v12(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IN0)value);
                    case "rn0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_rn0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "right":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_right(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "rn1":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_rn1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "left":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_left(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "c0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c1":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c2":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c3":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c4":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c5":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c5(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c6":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c6(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c7":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c7(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c8":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c8(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c9":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c9(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c10":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c10(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c11":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c11(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c12":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c12(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c13":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c13(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c14":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c14(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c15":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c15(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c16":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c16(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c17":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c17(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c18":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c18(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c19":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c19(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "_edge0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy__edge0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge1":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy__edge1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge2":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy__edge2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge3":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy__edge3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge4":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy__edge4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    default:
                        return -1;
                    }
                case "initMvmt":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "r0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_r0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_LIBGR.INode)value);
                    case "v4":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "v7":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "v14":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v14(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "v0_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v0_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v1":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value);
                    case "v2":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value);
                    case "v3":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v4_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v4_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v5":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value);
                    case "v6":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v7_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v7_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v8":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value);
                    case "v9":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v14_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v14_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v15":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v15(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v1_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v1_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v2_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v2_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v5_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v5_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v8_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v8_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v10":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value);
                    case "v16":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v16(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value);
                    case "v10_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v10_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v11":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value);
                    case "v13":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v13(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value);
                    case "v16_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v16_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v17":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v17(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value);
                    case "v19":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v19(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value);
                    case "v12":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v12(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value);
                    case "v18":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v18(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value);
                    case "v12_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v12_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v18_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v18_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "y0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_y0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "n_right":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_n_right(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "y2":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_y2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "y3":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_y3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "y1":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_y1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "n_left":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_n_left(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "e0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_e0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBEdge)value);
                    case "c0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c1":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c2":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c3":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c4":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c5":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c6":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c7":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c8":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c9":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c10":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c11":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c12":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c12(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c13":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c13(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c14":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c14(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c15":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c15(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c16":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c16(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c17":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c17(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c18":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c18(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c19":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c19(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c20":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c20(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c21":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c21(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c22":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c22(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c23":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c23(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c24":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c24(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c25":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c25(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c26":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c26(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c27":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c27(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c28":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c28(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c29":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c29(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c30":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c30(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c31":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c31(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "_edge0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge1":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge2":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge3":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge4":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge5":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge6":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge7":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge8":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge9":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge10":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge11":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    default:
                        return -1;
                    }
                case "move":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_move_lastIndexOfBy_v0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "r0":
                        return ArrayHelper.Array_move_lastIndexOfBy_r0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_LIBGR.INode)value);
                    case "v9":
                        return ArrayHelper.Array_move_lastIndexOfBy_v9(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value);
                    case "v0_p0":
                        return ArrayHelper.Array_move_lastIndexOfBy_v0_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v1":
                        return ArrayHelper.Array_move_lastIndexOfBy_v1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IWayPoint)value);
                    case "v3":
                        return ArrayHelper.Array_move_lastIndexOfBy_v3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v9_p0":
                        return ArrayHelper.Array_move_lastIndexOfBy_v9_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v10":
                        return ArrayHelper.Array_move_lastIndexOfBy_v10(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value);
                    case "v1_p0":
                        return ArrayHelper.Array_move_lastIndexOfBy_v1_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v2":
                        return ArrayHelper.Array_move_lastIndexOfBy_v2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value);
                    case "v4":
                        return ArrayHelper.Array_move_lastIndexOfBy_v4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value);
                    case "v2_p0":
                        return ArrayHelper.Array_move_lastIndexOfBy_v2_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v4_p0":
                        return ArrayHelper.Array_move_lastIndexOfBy_v4_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "v5":
                        return ArrayHelper.Array_move_lastIndexOfBy_v5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value);
                    case "v7":
                        return ArrayHelper.Array_move_lastIndexOfBy_v7(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value);
                    case "v6":
                        return ArrayHelper.Array_move_lastIndexOfBy_v6(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value);
                    case "v8":
                        return ArrayHelper.Array_move_lastIndexOfBy_v8(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IToken)value);
                    case "v6_p0":
                        return ArrayHelper.Array_move_lastIndexOfBy_v6_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value);
                    case "src":
                        return ArrayHelper.Array_move_lastIndexOfBy_src(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "tgt":
                        return ArrayHelper.Array_move_lastIndexOfBy_tgt(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "n_id":
                        return ArrayHelper.Array_move_lastIndexOfBy_n_id(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "ref":
                        return ArrayHelper.Array_move_lastIndexOfBy_ref(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value);
                    case "c0":
                        return ArrayHelper.Array_move_lastIndexOfBy_c0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c1":
                        return ArrayHelper.Array_move_lastIndexOfBy_c1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c2":
                        return ArrayHelper.Array_move_lastIndexOfBy_c2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c3":
                        return ArrayHelper.Array_move_lastIndexOfBy_c3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c4":
                        return ArrayHelper.Array_move_lastIndexOfBy_c4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c5":
                        return ArrayHelper.Array_move_lastIndexOfBy_c5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c6":
                        return ArrayHelper.Array_move_lastIndexOfBy_c6(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c7":
                        return ArrayHelper.Array_move_lastIndexOfBy_c7(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c8":
                        return ArrayHelper.Array_move_lastIndexOfBy_c8(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c9":
                        return ArrayHelper.Array_move_lastIndexOfBy_c9(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c10":
                        return ArrayHelper.Array_move_lastIndexOfBy_c10(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c11":
                        return ArrayHelper.Array_move_lastIndexOfBy_c11(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "c12":
                        return ArrayHelper.Array_move_lastIndexOfBy_c12(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c13":
                        return ArrayHelper.Array_move_lastIndexOfBy_c13(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c14":
                        return ArrayHelper.Array_move_lastIndexOfBy_c14(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c15":
                        return ArrayHelper.Array_move_lastIndexOfBy_c15(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value);
                    case "c16":
                        return ArrayHelper.Array_move_lastIndexOfBy_c16(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value);
                    case "_edge0":
                        return ArrayHelper.Array_move_lastIndexOfBy__edge0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge1":
                        return ArrayHelper.Array_move_lastIndexOfBy__edge1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge2":
                        return ArrayHelper.Array_move_lastIndexOfBy__edge2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge3":
                        return ArrayHelper.Array_move_lastIndexOfBy__edge3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge4":
                        return ArrayHelper.Array_move_lastIndexOfBy__edge4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    case "_edge5":
                        return ArrayHelper.Array_move_lastIndexOfBy__edge5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value);
                    default:
                        return -1;
                    }
                default:
                    return -1;
                }
            }
        }

        public override int ArrayLastIndexOfBy(IList array, string member, object value, int startIndex)
        {
            if(array.Count == 0)
                return -1;
            string arrayType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array.GetType());
            string arrayValueType = GRGEN_LIBGR.TypesHelper.ExtractSrc(arrayType);
            if(!arrayValueType.StartsWith("match<"))
                return -1;
            if(array[0] == null)
                return -1;
            if(arrayValueType == "match<>")
                arrayValueType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array[0].GetType());
            if(arrayValueType.StartsWith("match<class "))
            {
                switch(arrayValueType.Substring(12, arrayValueType.Length - 12 - 1))
                {
                default:
                    return -1;
                }
            }
            else
            {
                switch(arrayValueType.Substring(6, arrayValueType.Length - 6 - 1))
                {
                case "es_0_1":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "r0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_r0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_LIBGR.INode)value, startIndex);
                    case "v9":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v9(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "v0_p0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v0_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v1":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value, startIndex);
                    case "v2":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v9_p0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v9_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v10":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v10(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v1_p0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v1_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v3":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value, startIndex);
                    case "v11":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v11(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value, startIndex);
                    case "v3_p0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v3_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v4":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IID)value, startIndex);
                    case "v6":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value, startIndex);
                    case "v8":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v8(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value, startIndex);
                    case "v11_p0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v11_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v12":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v12(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IID)value, startIndex);
                    case "v14":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v14(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value, startIndex);
                    case "v16":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v16(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value, startIndex);
                    case "v5":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IN0)value, startIndex);
                    case "v7":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v7(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value, startIndex);
                    case "v13":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v13(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IN1)value, startIndex);
                    case "v15":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v15(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value, startIndex);
                    case "v7_p0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v7_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v15_p0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_v15_p0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "left":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_left(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "rn0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_rn0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "e0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_e0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBEdge)value, startIndex);
                    case "right":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_right(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "rn1":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_rn1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "c0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c1":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c2":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c3":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c4":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c5":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c6":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c7":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c7(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c8":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c8(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c9":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c9(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c10":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c10(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c11":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c11(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c12":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c12(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c13":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c13(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c14":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c14(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c15":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c15(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c16":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c16(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c17":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c17(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c18":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c18(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c19":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c19(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c20":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c20(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c21":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c21(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c22":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c22(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c23":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy_c23(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "_edge0":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy__edge0(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge1":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy__edge1(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge2":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy__edge2(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge3":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy__edge3(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge4":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy__edge4(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge5":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy__edge5(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge6":
                        return ArrayHelper.Array_es_0_1_lastIndexOfBy__edge6(GRGEN_ACTIONS.Rule_es_0_1.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    default:
                        return -1;
                    }
                case "ss_1_0":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "r0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_r0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_LIBGR.INode)value, startIndex);
                    case "v8":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v8(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "v0_p0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v0_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v1":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value, startIndex);
                    case "v2":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v8_p0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v8_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v9":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v9(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v1_p0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v1_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v3":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value, startIndex);
                    case "v10":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v10(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value, startIndex);
                    case "v3_p0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v3_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v4":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IID)value, startIndex);
                    case "v6":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v6(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value, startIndex);
                    case "v7":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v7(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value, startIndex);
                    case "v10_p0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v10_p0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v11":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v11(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IID)value, startIndex);
                    case "v13":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v13(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value, startIndex);
                    case "v14":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v14(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value, startIndex);
                    case "v5":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v5(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IN1)value, startIndex);
                    case "v12":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_v12(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IN0)value, startIndex);
                    case "rn0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_rn0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "right":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_right(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "rn1":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_rn1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "left":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_left(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "c0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c1":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c2":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c3":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c4":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c5":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c5(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c6":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c6(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c7":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c7(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c8":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c8(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c9":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c9(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c10":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c10(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c11":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c11(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c12":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c12(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c13":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c13(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c14":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c14(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c15":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c15(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c16":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c16(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c17":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c17(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c18":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c18(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c19":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy_c19(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "_edge0":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy__edge0(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge1":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy__edge1(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge2":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy__edge2(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge3":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy__edge3(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge4":
                        return ArrayHelper.Array_ss_1_0_lastIndexOfBy__edge4(GRGEN_ACTIONS.Rule_ss_1_0.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    default:
                        return -1;
                    }
                case "initMvmt":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "r0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_r0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_LIBGR.INode)value, startIndex);
                    case "v4":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "v7":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "v14":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v14(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "v0_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v0_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v1":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value, startIndex);
                    case "v2":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value, startIndex);
                    case "v3":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v4_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v4_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v5":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value, startIndex);
                    case "v6":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v7_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v7_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v8":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRoute)value, startIndex);
                    case "v9":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v14_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v14_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v15":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v15(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v1_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v1_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v2_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v2_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v5_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v5_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v8_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v8_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v10":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value, startIndex);
                    case "v16":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v16(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value, startIndex);
                    case "v10_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v10_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v11":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value, startIndex);
                    case "v13":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v13(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value, startIndex);
                    case "v16_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v16_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v17":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v17(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value, startIndex);
                    case "v19":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v19(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value, startIndex);
                    case "v12":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v12(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value, startIndex);
                    case "v18":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v18(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value, startIndex);
                    case "v12_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v12_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v18_p0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_v18_p0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "y0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_y0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "n_right":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_n_right(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "y2":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_y2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "y3":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_y3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "y1":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_y1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "n_left":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_n_left(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "e0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_e0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IBEdge)value, startIndex);
                    case "c0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c1":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c2":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c3":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c4":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c5":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c6":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c7":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c8":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c9":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c10":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c11":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c12":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c12(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c13":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c13(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c14":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c14(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c15":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c15(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c16":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c16(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c17":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c17(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c18":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c18(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c19":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c19(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c20":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c20(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c21":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c21(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c22":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c22(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c23":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c23(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c24":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c24(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c25":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c25(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c26":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c26(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c27":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c27(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c28":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c28(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c29":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c29(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c30":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c30(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c31":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy_c31(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "_edge0":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge0(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge1":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge1(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge2":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge2(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge3":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge3(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge4":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge4(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge5":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge5(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge6":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge6(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge7":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge7(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge8":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge8(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge9":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge9(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge10":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge10(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge11":
                        return ArrayHelper.Array_initMvmt_lastIndexOfBy__edge11(GRGEN_ACTIONS.Rule_initMvmt.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    default:
                        return -1;
                    }
                case "move":
                    switch(member)
                    {
                    case "v0":
                        return ArrayHelper.Array_move_lastIndexOfBy_v0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "r0":
                        return ArrayHelper.Array_move_lastIndexOfBy_r0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_LIBGR.INode)value, startIndex);
                    case "v9":
                        return ArrayHelper.Array_move_lastIndexOfBy_v9(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ILocale)value, startIndex);
                    case "v0_p0":
                        return ArrayHelper.Array_move_lastIndexOfBy_v0_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v1":
                        return ArrayHelper.Array_move_lastIndexOfBy_v1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IWayPoint)value, startIndex);
                    case "v3":
                        return ArrayHelper.Array_move_lastIndexOfBy_v3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v9_p0":
                        return ArrayHelper.Array_move_lastIndexOfBy_v9_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v10":
                        return ArrayHelper.Array_move_lastIndexOfBy_v10(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IOccupiedBy)value, startIndex);
                    case "v1_p0":
                        return ArrayHelper.Array_move_lastIndexOfBy_v1_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v2":
                        return ArrayHelper.Array_move_lastIndexOfBy_v2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value, startIndex);
                    case "v4":
                        return ArrayHelper.Array_move_lastIndexOfBy_v4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IRobot)value, startIndex);
                    case "v2_p0":
                        return ArrayHelper.Array_move_lastIndexOfBy_v2_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v4_p0":
                        return ArrayHelper.Array_move_lastIndexOfBy_v4_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "v5":
                        return ArrayHelper.Array_move_lastIndexOfBy_v5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ISLck)value, startIndex);
                    case "v7":
                        return ArrayHelper.Array_move_lastIndexOfBy_v7(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IMvmt)value, startIndex);
                    case "v6":
                        return ArrayHelper.Array_move_lastIndexOfBy_v6(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.ISLckRef)value, startIndex);
                    case "v8":
                        return ArrayHelper.Array_move_lastIndexOfBy_v8(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IToken)value, startIndex);
                    case "v6_p0":
                        return ArrayHelper.Array_move_lastIndexOfBy_v6_p0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBPort)value, startIndex);
                    case "src":
                        return ArrayHelper.Array_move_lastIndexOfBy_src(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "tgt":
                        return ArrayHelper.Array_move_lastIndexOfBy_tgt(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "n_id":
                        return ArrayHelper.Array_move_lastIndexOfBy_n_id(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "ref":
                        return ArrayHelper.Array_move_lastIndexOfBy_ref(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IBLink)value, startIndex);
                    case "c0":
                        return ArrayHelper.Array_move_lastIndexOfBy_c0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c1":
                        return ArrayHelper.Array_move_lastIndexOfBy_c1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c2":
                        return ArrayHelper.Array_move_lastIndexOfBy_c2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c3":
                        return ArrayHelper.Array_move_lastIndexOfBy_c3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c4":
                        return ArrayHelper.Array_move_lastIndexOfBy_c4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c5":
                        return ArrayHelper.Array_move_lastIndexOfBy_c5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c6":
                        return ArrayHelper.Array_move_lastIndexOfBy_c6(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c7":
                        return ArrayHelper.Array_move_lastIndexOfBy_c7(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c8":
                        return ArrayHelper.Array_move_lastIndexOfBy_c8(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c9":
                        return ArrayHelper.Array_move_lastIndexOfBy_c9(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c10":
                        return ArrayHelper.Array_move_lastIndexOfBy_c10(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c11":
                        return ArrayHelper.Array_move_lastIndexOfBy_c11(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "c12":
                        return ArrayHelper.Array_move_lastIndexOfBy_c12(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c13":
                        return ArrayHelper.Array_move_lastIndexOfBy_c13(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c14":
                        return ArrayHelper.Array_move_lastIndexOfBy_c14(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c15":
                        return ArrayHelper.Array_move_lastIndexOfBy_c15(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbPrnt)value, startIndex);
                    case "c16":
                        return ArrayHelper.Array_move_lastIndexOfBy_c16(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbNode)value, startIndex);
                    case "_edge0":
                        return ArrayHelper.Array_move_lastIndexOfBy__edge0(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge1":
                        return ArrayHelper.Array_move_lastIndexOfBy__edge1(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge2":
                        return ArrayHelper.Array_move_lastIndexOfBy__edge2(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge3":
                        return ArrayHelper.Array_move_lastIndexOfBy__edge3(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge4":
                        return ArrayHelper.Array_move_lastIndexOfBy__edge4(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    case "_edge5":
                        return ArrayHelper.Array_move_lastIndexOfBy__edge5(GRGEN_ACTIONS.Rule_move.ConvertAsNeeded(array), (GRGEN_MODEL.IbLink)value, startIndex);
                    default:
                        return -1;
                    }
                default:
                    return -1;
                }
            }
        }

        public override int ArrayIndexOfOrderedBy(IList array, string member, object value)
        {
            if(array.Count == 0)
                return -1;
            string arrayType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array.GetType());
            string arrayValueType = GRGEN_LIBGR.TypesHelper.ExtractSrc(arrayType);
            if(!arrayValueType.StartsWith("match<"))
                return -1;
            if(array[0] == null)
                return -1;
            if(arrayValueType == "match<>")
                arrayValueType = GRGEN_LIBGR.TypesHelper.DotNetTypeToXgrsType(array[0].GetType());
            if(arrayValueType.StartsWith("match<class "))
            {
                switch(arrayValueType.Substring(12, arrayValueType.Length - 12 - 1))
                {
                default:
                    return -1;
                }
            }
            else
            {
                switch(arrayValueType.Substring(6, arrayValueType.Length - 6 - 1))
                {
                case "es_0_1":
                    switch(member)
                    {
                    default:
                        return -1;
                    }
                case "ss_1_0":
                    switch(member)
                    {
                    default:
                        return -1;
                    }
                case "initMvmt":
                    switch(member)
                    {
                    default:
                        return -1;
                    }
                case "move":
                    switch(member)
                    {
                    default:
                        return -1;
                    }
                default:
                    return -1;
                }
            }
        }
        public override void FailAssertion() { Debug.Assert(false); }
        public override string ModelMD5Hash { get { return "69a2e3a65b2231ca55c41413c5095d45"; } }
    }
}